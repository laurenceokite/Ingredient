[{"/Users/laurenceokite/Documents/projects/recipes/client/src/App.tsx":"1","/Users/laurenceokite/Documents/projects/recipes/client/src/index.tsx":"2","/Users/laurenceokite/Documents/projects/recipes/client/src/components/RenderIngredient/index.tsx":"3","/Users/laurenceokite/Documents/projects/recipes/client/src/components/UnitSelect/index.tsx":"4","/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/index.tsx":"5","/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/Ingredient.tsx":"6","/Users/laurenceokite/Documents/projects/recipes/client/src/components/ToggleGlobals/index.tsx":"7","/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/Recipe.tsx":"8"},{"size":186,"mtime":1653479560569,"results":"9","hashOfConfig":"10"},{"size":198,"mtime":1653479560570,"results":"11","hashOfConfig":"10"},{"size":3914,"mtime":1653735494677,"results":"12","hashOfConfig":"10"},{"size":1214,"mtime":1653479560570,"results":"13","hashOfConfig":"10"},{"size":3078,"mtime":1653785371586,"results":"14","hashOfConfig":"10"},{"size":4695,"mtime":1653659846027,"results":"15","hashOfConfig":"10"},{"size":2728,"mtime":1653785266884,"results":"16","hashOfConfig":"10"},{"size":3543,"mtime":1653997663084,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"aiqusn",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/laurenceokite/Documents/projects/recipes/client/src/App.tsx",[],["37","38"],"/Users/laurenceokite/Documents/projects/recipes/client/src/index.tsx",[],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/RenderIngredient/index.tsx",["39"],"import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Form, Row, Col, Button, Table, Stack } from \"react-bootstrap\";\nimport UnitSelect from \"../UnitSelect\";\nimport { Ingredient } from \"../Recipe/Ingredient\";\nimport { Recipe } from \"../Recipe/Recipe\";\n\n\nexport interface IRecipeProp {\n    recipe: Recipe\n}\n\nconst RenderIngredient = observer(({ recipe }: IRecipeProp) => {\n\n    const thisValue = (index: number): number => recipe.ingredients[index].returnSelected(recipe.state).value;\n    \n    const formatValue = (value: number): number | string => {\n\n        if (value <= 0) return '';\n\n        return Math.round((value + Number.EPSILON) * 100) / 100;\n    }\n\n    \n    const handleChange = (ingredient: Ingredient, name: string, index: number) => (event: React.FormEvent): void => {\n        const { value } = event.target as HTMLFormElement;\n\n        const unit = ingredient.returnSelected(recipe.state).unit;\n\n        //update ingredient value\n        if (name === 'value') ingredient.updateValue(recipe.state, unit, value);\n\n        //update ingredient unit\n        if (name === 'unit') ingredient.updateSelected(recipe.state, value);\n\n        //update bakers percent\n        if (name === 'percent') recipe.bakersPercent(index, value);\n\n        //update anchor index\n        if (name === 'anchor') recipe.anchorIndex = index;\n    };\n\n    return(\n        <tr>\n            {recipe.ingredients.map((ingredient: Ingredient, index) => (\n            <div key={index}>\n                <Row>\n                    <td>{recipe.ingredients[index].name}</td>\n                </Row>\n                <Row>\n                    <Col xs={6}>\n\n                        <Row>\n\n                            {/* render ingredient value */}\n                            <Col xs={6}>\n                                <Form>\n                                    <Form.Control \n                                        type=\"number\" \n                                        placeholder=\"No Amt.\" \n                                        value={formatValue(thisValue(index))}\n                                        onChange={handleChange(ingredient, 'value', index)}\n                                    />\n                                </Form>\n                            </Col>\n\n                            {/* render UnitSelect */}\n                            <Col xs={6}>\n                                <div onChange={handleChange(ingredient, 'unit', index)}>\n                                    <UnitSelect \n                                        recipe={recipe}\n                                        ingredient={ingredient}\n                                    />\n                                </div>\n                            </Col>\n\n                        </Row>\n\n                    </Col>\n\n                    {/* percentage */}\n                    <Col xs={4} sm={3}>\n                       <Stack direction=\"horizontal\">\n                            <Form.Control \n                            type=\"number\" \n                            value={formatValue(recipe.bakersPercent(index))} \n                            onChange={handleChange(ingredient, 'percent', index)}\n                            disabled={recipe.anchorIndex === index}\n                            />\n                            <div>&nbsp;%</div>\n                       </Stack>\n                    </Col>\n                    <Col xs={1}>\n                        <Button \n                        variant={recipe.anchorIndex === index ? 'outline-success' : 'outline-secondary'}\n                        size='sm'\n                        onClick={handleChange(ingredient, 'anchor', index)}\n                        >\n                            1:1\n                        </Button>\n                    </Col>\n                </Row>  \n            </div>     \n            ))} \n        </tr>    \n    )\n})\n\nexport default RenderIngredient;",["40","41"],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/UnitSelect/index.tsx",[],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/index.tsx",[],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/Ingredient.tsx",[],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/ToggleGlobals/index.tsx",[],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/Recipe.tsx",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":3,"column":34,"nodeType":"48","messageId":"49","endLine":3,"endColumn":39},{"ruleId":"42","replacedBy":"50"},{"ruleId":"44","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"@typescript-eslint/no-unused-vars","'Table' is defined but never used.","Identifier","unusedVar",["52"],["53"],"no-global-assign","no-unsafe-negation"]