[{"/Users/laurenceokite/Documents/projects/recipes/client/src/utils/actions.js":"1","/Users/laurenceokite/Documents/projects/recipes/client/src/components/ToggleMeasure/index.js":"2","/Users/laurenceokite/Documents/projects/recipes/client/src/App.tsx":"3","/Users/laurenceokite/Documents/projects/recipes/client/src/index.tsx":"4","/Users/laurenceokite/Documents/projects/recipes/client/src/utils/GlobalState.tsx":"5","/Users/laurenceokite/Documents/projects/recipes/client/src/components/ViewEditRecipe/index.tsx":"6","/Users/laurenceokite/Documents/projects/recipes/client/src/utils/reducers.ts":"7","/Users/laurenceokite/Documents/projects/recipes/client/src/components/ViewEditRecipe/Ingredient.tsx":"8","/Users/laurenceokite/Documents/projects/recipes/client/src/components/RenderIngredient/index.tsx":"9","/Users/laurenceokite/Documents/projects/recipes/client/src/components/UnitSelect/index.tsx":"10"},{"size":215,"mtime":1651336577721,"results":"11","hashOfConfig":"12"},{"size":1649,"mtime":1652092226201,"results":"13","hashOfConfig":"12"},{"size":237,"mtime":1651923627650,"results":"14","hashOfConfig":"12"},{"size":220,"mtime":1651938965701,"results":"15","hashOfConfig":"12"},{"size":1168,"mtime":1652090726662,"results":"16","hashOfConfig":"12"},{"size":4505,"mtime":1652092031573,"results":"17","hashOfConfig":"12"},{"size":864,"mtime":1651930850177,"results":"18","hashOfConfig":"12"},{"size":4142,"mtime":1652007019295,"results":"19","hashOfConfig":"12"},{"size":2694,"mtime":1652092014670,"results":"20","hashOfConfig":"12"},{"size":969,"mtime":1652050643914,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"aiqusn",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/laurenceokite/Documents/projects/recipes/client/src/utils/actions.js",[],["50","51"],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/ToggleMeasure/index.js",["52","53","54"],"import React, { useState } from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { CHANGE_GLOBAL_UNIT, CHANGE_GLOBAL_SYSTEM, TOGGLE_AUTO_CONVERT } from '../../utils/actions';\nimport './index.css'\n\nfunction ToggleMeasure() {\n    const [ state, dispatch ] = useStoreContext();\n\n    //Each time form is changed, update GlobalState\n    //Weight or Volume\n    function handleUnitChange(event) {\n        const value = event.target.value;\n        dispatch({\n            type: CHANGE_GLOBAL_UNIT,\n            globalUnit: value\n        });\n        console.log(state, value);\n    }\n\n    //Metric or Imperial\n    function handleSystemChange(event) {\n        const value = event.target.value;\n        dispatch({\n            type: CHANGE_GLOBAL_SYSTEM,\n            globalSystem: value\n        }); \n    }\n\n    return (\n        <form className='toggle-measure'> \n            {/* Measurement Options */}\n            <div>\n                {/* system */}\n                <select onChange={handleSystemChange}>\n                    <option value=\"metric\">M</option>\n                    <option value=\"us\">US</option>\n                </select>\n                {/* type */}\n                <select onChange={handleUnitChange}>\n                        <option value=\"weight\">WEIGHT</option>\n                        <option value=\"volume\">VOLUME</option>\n                </select>\n            </div>\n            <div className='edit-percent'>\n                <input type='number' defaultValue={state.recipeState.percent} placeholder='100'></input>\n                <a> X</a>\n            </div>\n        </form>\n    )\n}\n\nexport default ToggleMeasure;","/Users/laurenceokite/Documents/projects/recipes/client/src/App.tsx",[],"/Users/laurenceokite/Documents/projects/recipes/client/src/index.tsx",[],["55","56"],"/Users/laurenceokite/Documents/projects/recipes/client/src/utils/GlobalState.tsx",[],["57","58"],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/ViewEditRecipe/index.tsx",["59"],"import React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport UnitSelect from '../UnitSelect';\nimport { useStoreContext, GlobalSystems, GlobalUnits, KeyOfIngredient } from \"../../utils/GlobalState\";\nimport { Ingredient, UnitInterface, IngredientDataInterface } from './Ingredient';\nimport { EDIT_RECIPE } from '../../utils/actions';\nimport './index.css';\nimport { useEffect } from 'react';\n\nconst ViewEditRecipe = () => {\n    const [ state, dispatch ] = useStoreContext();\n\n    const globalSystem: GlobalSystems = state.globalSystem;\n    const globalUnit: GlobalUnits = state.globalUnit;\n\n    //this is the state as a key of Ingredient object\n    const keyOfIngredient: KeyOfIngredient = `${globalSystem}_${globalUnit}`;\n\n    //utilizing 'Ingredient's init values to populate our form <select>\n    const formIngredient = new Ingredient(null);\n\n    const currentUnits: UnitInterface[] = formIngredient.returnCurrentUnits(keyOfIngredient);\n    const selectedUnit: UnitInterface = formIngredient.returnSelected(keyOfIngredient);\n\n    const [formState, setFormState] = useState<IngredientDataInterface>({ \n        name: '',\n        value: 0,\n        unit: selectedUnit.unit,\n        state: keyOfIngredient\n    });\n\n    useEffect(() => {\n        setFormState({\n            ...formState,\n            state: keyOfIngredient,\n            unit: selectedUnit.unit\n        })    \n    }, [state]);\n\n    const addIngredient = (event: React.FormEvent): void => {\n        event.preventDefault();\n\n        console.log(formState);\n\n        const newIngredient = new Ingredient(formState);\n        \n        dispatch({\n            type: EDIT_RECIPE,\n            recipeState: {\n                ...state.recipeState,\n                ingredients: [\n                    ...state.recipeState.ingredients, \n                    newIngredient\n                ]\n            }\n        });\n\n        // Reset ingredient input form to original state\n        setFormState({\n            name: '',\n            value: 0,\n            unit: selectedUnit.unit,\n            state: keyOfIngredient\n        });\n        console.log(formState);\n    };\n\n    const handleChange = (event: React.FormEvent): void => {\n        const { value, name } = event.target as HTMLFormElement;\n\n        setFormState({\n          ...formState,\n          [name]: value\n        });\n    };\n\n    return(\n        <div className='viewEditRecipe'>\n            {/* Change measurement type here */}\n            <ToggleMeasure/>\n\n            {/* Map array of ingredients */}\n            <table>\n                {state.recipeState.ingredients.map((ingredient: Ingredient) => (\n                <RenderIngredient \n                    key={ingredient.name} \n                    data={ingredient} \n                    currentUnits={currentUnits}\n                />     \n                ))}\n            </table>\n\n            {/* Ingredient Input */}\n                <form onSubmit={addIngredient}>\n                    <div className='ingredient-input'>\n                        <div>\n                            <input type=\"text\" \n                                placeholder=\"Ingredient\" \n                                id='ingredientNameInput'\n                                name='name'\n                                value={formState.name}\n                                autoComplete=\"off\" \n                                onChange={handleChange}/>\n\n                            <input type=\"number\" \n                                placeholder=\"Amount\"\n                                id='ingredientAmtInput'\n                                name='value'\n                                value={formState.value?formState.value:''}\n                                onChange={handleChange}\n                                autoComplete=\"off\"/>\n                        </div>\n\n                        <div id='measurementSelect'>\n                            <UnitSelect \n                                currentUnits={currentUnits} \n                                selectedUnit={selectedUnit}\n                                ingredient={formIngredient}\n                                keyOfIngredient={keyOfIngredient}\n                            />\n                        </div>\n                    </div> \n                    {/* Add Ingredient Button */}\n                    <input type=\"submit\" value=\"+\"></input>\n                </form>\n        </div>\n    )\n};\n\n\n\nexport default ViewEditRecipe;","/Users/laurenceokite/Documents/projects/recipes/client/src/utils/reducers.ts",["60"],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/ViewEditRecipe/Ingredient.tsx",["61","62","63","64"],"import { useStoreContext, GlobalSystems, GlobalUnits } from \"../../utils/GlobalState\";\n\ntype Unit = \n    'milligrams' | 'grams' | 'kilograms' |\n    'pounds' | 'ounces' |\n    'milliliters' | 'liters' |\n    'cups' | 'quarts' | 'gallons' | 'teaspoons' | 'tablespoons' | 'fluidOunces';\n\n\ninterface UnitInterface {\n    unit: string; \n    divisor: number;\n    abbrev: string; \n    selected: boolean; \n    value: number;\n}\n\ninterface IngredientInterface {\n    metric_weight: UnitInterface[];\n    us_weight: UnitInterface[];\n    metric_volume: UnitInterface[];\n    us_volume: UnitInterface[];\n}\n\ninterface IngredientDataInterface {\n    name: string;\n    value: number;\n    unit: string;\n    state: keyof IngredientInterface;\n}\n\nclass Ingredient implements IngredientInterface {\n    metric_weight = [\n        { unit: 'milligrams', divisor: .001, abbrev: 'mg', selected: false, value: 0 },\n        { unit: 'grams', divisor: 1, abbrev: 'g', selected: true, value: 0 },\n        { unit: 'kilograms', divisor: 1000, abbrev: 'k', selected: false, value: 0 }\n    ];   \n\n    us_weight = [\n        { unit: 'pounds', divisor: 454, abbrev: 'lbs.', selected: false , value: 0 },\n        { unit: 'ounces', divisor: 28, abbrev: 'oz.', selected: true, value: 0 }\n    ];\n\n    metric_volume = [\n        { unit: 'milliliters', divisor: 1, abbrev: 'mL', selected: true, value: 0 },\n        { unit: 'liters', divisor: 1000, abbrev: 'L', selected: false, value: 0 },\n    ];\n        \n    us_volume = [   \n        { unit: 'cups', divisor: 240, abbrev: 'C', selected: true, value: 0 },\n        { unit: 'quarts', divisor: 946, abbrev: 'Q', selected: false, value: 0 },\n        { unit: 'gallons', divisor: 3785, abbrev: 'G', selected: false, value: 0 },\n        { unit: 'teaspoons', divisor: 4.929, abbrev: 'tsp.', selected: false , value: 0},\n        { unit: 'tablespoons', divisor: 14.787, abbrev: 'tbsp.', selected: false, value: 0 },\n        { unit: 'fluidOunces', divisor: 29.575, abbrev: 'fl. oz.', selected: false, value: 0 }\n    ];\n\n    name?: string;\n\n    constructor(data: IngredientDataInterface | null) {\n        if (data) {\n            this.name = data.name;\n            this.updateValue(data.state, data.unit, data.value);\n            this.updateSelected(data.state, data.unit);\n        }\n    }\n\n    //return relevant units, based on global state \n    returnCurrentUnits(state: keyof IngredientInterface): UnitInterface[] {\n        return this[state];\n    }\n\n    //return data of unit with 'selected: true'\n    returnSelected(state: keyof IngredientInterface): UnitInterface {\n        const selectedUnit: UnitInterface = \n            this[state].filter(unit => unit.selected)[0];  \n\n        return selectedUnit;\n    }\n\n    //changes selected to true on given unit, and all else in array to false\n    updateSelected(state: keyof IngredientInterface, unit: string): void {\n        this[state].forEach(unitData => { \n            if (unitData.unit === unit) {\n                unitData.selected = true;\n            }\n            else unitData.selected = false;\n        });\n    }\n    \n    //update all relevant unit values, by giving new value of any unit\n    updateValue(state: keyof IngredientInterface, unit: string, value: number ): void {\n        //retrieve index of requested unit\n        const unitIndex: number = this[state].findIndex(unitData => unitData.unit === unit);\n\n        //get product of value and unit divisor\n        const product = this[state][unitIndex].divisor * value;\n\n        //update each state relevant array in Ingredient\n        const update = (units: UnitInterface[]) => {\n            units.forEach((unitData, index) => {\n                const thisValue = product / unitData.divisor;\n                unitData.value = thisValue;\n            });\n        }\n\n        if (state === ('metric_weight' || 'us_weight')) {\n            update(this.metric_weight);\n            update(this.us_weight);\n        }\n\n        if (state === ('metric_volume' || 'us_volume')) {\n            update(this.metric_volume);\n            update(this.us_volume);\n        }\n    }\n};\n\nexport { Ingredient, UnitInterface, IngredientInterface, IngredientDataInterface }\n\n",["65","66"],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/RenderIngredient/index.tsx",["67","68"],"import React, { useState, useEffect, useRef } from \"react\";\nimport UnitSelect from \"../UnitSelect\";\nimport { useStoreContext, GlobalSystems, GlobalUnits, KeyOfIngredient } from \"../../utils/GlobalState\";\nimport { Ingredient, UnitInterface } from \"../ViewEditRecipe/Ingredient\";\nimport './index.css';\n\ninterface RenderIngredientInterface {\n    data: Ingredient,\n    currentUnits: UnitInterface[],\n}\n\nconst RenderIngredient = ({ data , currentUnits }: RenderIngredientInterface) => {\n    const [ state ] = useStoreContext();\n    const [ingredient, setIngredient] = useState({});\n\n    const globalSystem: GlobalSystems = state.globalSystem;\n    const globalUnit: GlobalUnits = state.globalUnit;\n\n    //this is the state as a key of Ingredient object\n    const keyOfIngredient: KeyOfIngredient = `${globalSystem}_${globalUnit}`;\n\n    let thisUnit = data.returnSelected(keyOfIngredient).unit;\n    let thisValue = data.returnSelected(keyOfIngredient).value;\n\n    useRef(() => {\n        thisUnit = data.returnSelected(keyOfIngredient).unit;\n        thisValue = data.returnSelected(keyOfIngredient).value;\n    });\n\n    const handleChangeUnit = (event: React.FormEvent): void => {\n        const { value } = event.target as HTMLFormElement;\n\n        data.updateSelected(keyOfIngredient, value);\n        setIngredient({}); // Hack to re render ingredient.. \n    }\n\n    const handleChangeValue = (event: React.FormEvent): void => {\n        const { value } = event.target as HTMLFormElement;\n\n        data.updateValue(keyOfIngredient, thisUnit, value);\n        setIngredient({}); // Hack to re render ingredient.. \n    }\n    \n    return(\n        <tbody>\n             <tr>\n                <td className=\"ingredient-name\">{data.name}</td>\n                <td className=\"ingredient-measurement\">\n                    <form>\n                        <input \n                            type=\"text\" \n                            placeholder=\"No Amt.\" \n                            value={thisValue ? thisValue : ''} \n                            onChange={handleChangeValue}\n                        />\n                    </form>\n                </td>\n                <td id='unitSelect' className=\"unit-select\" onChange={handleChangeUnit}>\n                    <UnitSelect \n                        ingredient={data}\n                        currentUnits={currentUnits}\n                        keyOfIngredient={keyOfIngredient}\n                        selectedUnit={data.returnSelected(keyOfIngredient)}\n                    />\n                </td>\n                <td>\n                    <input type=\"number\"></input>\n                </td>\n            </tr> \n        </tbody>\n    )\n}\n\nexport default RenderIngredient;","/Users/laurenceokite/Documents/projects/recipes/client/src/components/UnitSelect/index.tsx",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":25},{"ruleId":"73","severity":1,"message":"77","line":3,"column":52,"nodeType":"75","messageId":"76","endLine":3,"endColumn":71},{"ruleId":"78","severity":1,"message":"79","line":46,"column":17,"nodeType":"80","endLine":46,"endColumn":20},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"69","replacedBy":"81"},{"ruleId":"71","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":39,"column":8,"nodeType":"85","endLine":39,"endColumn":15,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"77","line":7,"column":5,"nodeType":"75","messageId":"76","endLine":7,"endColumn":24},{"ruleId":"87","severity":1,"message":"88","line":1,"column":10,"nodeType":"75","messageId":"76","endLine":1,"endColumn":25},{"ruleId":"87","severity":1,"message":"89","line":1,"column":27,"nodeType":"75","messageId":"76","endLine":1,"endColumn":40},{"ruleId":"87","severity":1,"message":"90","line":1,"column":42,"nodeType":"75","messageId":"76","endLine":1,"endColumn":53},{"ruleId":"87","severity":1,"message":"91","line":3,"column":6,"nodeType":"75","messageId":"76","endLine":3,"endColumn":10},{"ruleId":"69","replacedBy":"92"},{"ruleId":"71","replacedBy":"93"},{"ruleId":"87","severity":1,"message":"94","line":1,"column":27,"nodeType":"75","messageId":"76","endLine":1,"endColumn":36},{"ruleId":"87","severity":1,"message":"95","line":14,"column":12,"nodeType":"75","messageId":"76","endLine":14,"endColumn":22},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'TOGGLE_AUTO_CONVERT' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",["96"],["97"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'formState', 'keyOfIngredient', and 'selectedUnit.unit'. Either include them or remove the dependency array. You can also do a functional update 'setFormState(f => ...)' if you only need 'formState' in the 'setFormState' call.","ArrayExpression",["98"],"@typescript-eslint/no-unused-vars","'useStoreContext' is defined but never used.","'GlobalSystems' is defined but never used.","'GlobalUnits' is defined but never used.","'Unit' is defined but never used.",["96"],["97"],"'useEffect' is defined but never used.","'ingredient' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},"Update the dependencies array to be: [formState, keyOfIngredient, selectedUnit.unit, state]",{"range":"101","text":"102"},[1460,1467],"[formState, keyOfIngredient, selectedUnit.unit, state]"]