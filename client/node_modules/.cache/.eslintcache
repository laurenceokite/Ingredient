[{"/Users/laurenceokite/Documents/projects/recipes/src/index.js":"1","/Users/laurenceokite/Documents/projects/recipes/src/App.js":"2","/Users/laurenceokite/Documents/projects/recipes/src/reportWebVitals.js":"3","/Users/laurenceokite/Documents/projects/recipes/src/Components/ViewEditRecipe/index.js":"4","/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js":"5","/Users/laurenceokite/Documents/projects/recipes/src/components/ToggleMeasure/index.js":"6","/Users/laurenceokite/Documents/projects/recipes/src/utils/GlobalState.js":"7","/Users/laurenceokite/Documents/projects/recipes/src/utils/reducers.js":"8","/Users/laurenceokite/Documents/projects/recipes/src/utils/actions.js":"9","/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js":"10","/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/relativeValues.js":"11","/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/returnIngredient.js":"12","/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/Ingredient.js":"13"},{"size":500,"mtime":1643033510837,"results":"14","hashOfConfig":"15"},{"size":247,"mtime":1643639143180,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1643033510838,"results":"17","hashOfConfig":"15"},{"size":3730,"mtime":1643664921605,"results":"18","hashOfConfig":"15"},{"size":4718,"mtime":1651340914640,"results":"19","hashOfConfig":"15"},{"size":2096,"mtime":1651341960626,"results":"20","hashOfConfig":"15"},{"size":694,"mtime":1651341101909,"results":"21","hashOfConfig":"15"},{"size":898,"mtime":1651336366892,"results":"22","hashOfConfig":"15"},{"size":215,"mtime":1651336577721,"results":"23","hashOfConfig":"15"},{"size":1857,"mtime":1651264606211,"results":"24","hashOfConfig":"15"},{"size":931,"mtime":1650893812494,"results":"25","hashOfConfig":"15"},{"size":3371,"mtime":1651229488429,"results":"26","hashOfConfig":"15"},{"size":2548,"mtime":1651230066148,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"16ir4te",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"/Users/laurenceokite/Documents/projects/recipes/src/index.js",[],["63","64"],"/Users/laurenceokite/Documents/projects/recipes/src/App.js",[],"/Users/laurenceokite/Documents/projects/recipes/src/reportWebVitals.js",[],"/Users/laurenceokite/Documents/projects/recipes/src/Components/ViewEditRecipe/index.js",["65","66"],"import React, { useState } from 'react'\n\nfunction ViewEditRecipe() {\n    const [addIngredientState, setAddIngredientState] = useState({ \n        ingredient: '', amount: ''\n    });\n\n    const ingredients = [];\n    const poop = 'dumb';\n    \n    function addIngredient(event) {\n        event.preventDefault();\n       ingredients.push({\n           ingredient: addIngredientState.ingredient,\n           amount: {\n               [poop]: addIngredientState.amount\n            }\n       });\n       console.log(ingredients);\n    }\n\n    {/* Each time text is entered to input, update formState */}\n    const handleChange = event => {\n        const { name, value } = event.target;\n        setAddIngredientState({\n          ...addIngredientState,\n          [name]: value\n        });\n    }\n\n    return(\n        <div>\n            {/* Measurement Options */}\n            <div className=\"measureOptions\">\n                <label htmlFor=\"unitOfMeasure\"></label>\n                <select className=\"unitOfMeasure\">\n                    <option value=\"metric\">M</option>\n                    <option value=\"imperial\">I</option>\n                </select>\n                <label htmlFor=\"typeOfMeasure\"></label>\n                <select className=\"typeOfMeasure\">\n                        <option value=\"weight\">WEIGHT</option>\n                        <option value=\"volume\">VOLUME</option>\n                </select>\n                <label htmlFor=\"autoConvertToggle\">autoconvert</label>\n                <input type=\"checkbox\" className=\"autoConvertToggle\"></input>\n            </div>\n\n            <div>\n                    {ingredients.map(ingredient => {\n\n                    })}\n            </div>\n\n            <form onSubmit={addIngredient}>\n                <div>\n                    {/* Ingredient Input */}\n                    <input type=\"text\" \n                        placeholder=\"Ingredient\" \n                        id='ingredientNameInput'\n                        name='ingredient'\n                        onChange={handleChange}></input>\n                    <input type=\"text\" \n                        placeholder=\"Amt.\"\n                        id='ingredientAmtInput'\n                        name='amount'\n                        onChange={handleChange} \n                        className=\"ingredientAmtInput\"></input>\n\n                    {/* Conditional Measurement Select */}\n                    {/* if Imperial */}\n                    <select className=\"imperialVolumeSelect\">\n                        <option value=\"gallons\">G</option>\n                        <option value=\"quarts\">Q</option>\n                        <option value=\"cups\">C</option>\n                        <option value=\"tablespoons\">T</option>\n                        <option value=\"teaspoons\">t</option>\n                        <option value=\"fluid ounces\">fl. oz.</option>\n                    </select>\n\n                    <select className=\"imperialWeightSelect\">\n                        <option value=\"pounds\">lbs.</option>\n                        <option value=\"ounces\">oz.</option>\n                    </select> \n                    {/* if Metric */}\n                    <select className=\"metricVolumeSelect\">\n                        <option value=\"liters\">L</option>\n                        <option value=\"deciliters\">dL</option>\n                        <option value=\"milliliters\">mL</option>\n                    </select>\n\n                    <select className=\"metricWeightSelect\">\n                        <option value=\"kilograms\">kg</option>\n                        <option value=\"grams\">g</option>\n                        <option value=\"milligrams\">mg</option>\n                    </select> \n                </div>\n                {/* Add Ingredient Button */}\n                <div>\n                    <input type=\"submit\" value=\"+\"></input>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default ViewEditRecipe;",["67","68"],"/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js",["69"],"import React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { relativeValues } from \"../RenderIngredient/relativeValues\";\nimport { EDIT_RECIPE } from '../../utils/actions';\nimport './index.css';\n\nfunction ViewEditRecipe() {\n    const [ state, dispatch ] = useStoreContext();\n\n    const {...currentUnits} = relativeValues[state.globalSystem][state.globalUnit];\n    const selected = (obj) => {\n        for (const [key, value] of Object.entries(obj)) {\n            if (obj[key].selected) {\n                return {\n                    initUnit: key,\n                    initFactor: currentUnits[key].value\n                };\n            } \n        }\n    }\n    \n    const { initUnit, initFactor } = selected(currentUnits);\n\n    const [formState, setFormState] = useState({ \n        name: '',\n        amount: false,\n        unit: initUnit,\n        factor: initFactor\n    });\n\n\n    const addIngredient = (event) => {\n        event.preventDefault();\n\n        const standardVal = formState.amount * formState.factor;\n        \n        dispatch({\n            type: EDIT_RECIPE,\n            recipeState: {\n                ...state.recipeState,\n                ingredients: [\n                    ...state.recipeState.ingredients, \n                    {\n                        name: formState.name,\n                        [state.globalUnit]: {\n                            value: standardVal,\n                            default: formState.unit\n                        },\n                        index: state.recipeState.ingredients.length\n                    }\n                ]\n            }\n        });\n\n        // Reset ingredient input form to original state\n        setFormState({\n            name: '',\n            amount: false,\n            unit: initUnit,\n            factor: initFactor\n        });\n    };\n\n    const handleChange = event => {\n        const { value, name } = event.target;\n\n        if (name === 'unit') {\n            const index = event.target.options.selectedIndex;\n            const options = event.target.options\n\n            setFormState({\n                ...formState,\n                [name]: value,\n                factor: options[index].dataset.factor\n            });\n\n            return;\n        }\n\n        setFormState({\n          ...formState,\n          [name]: value\n        });\n    };\n\n    console.log(formState.unit);\n\n    return(\n        <div className='viewEditRecipe'>\n            {/* Change measurement type here */}\n            <ToggleMeasure/>\n\n            {/* Map array of ingredients */}\n            <table>\n                {state.recipeState.ingredients.map(ingredient => (\n                    <RenderIngredient key={ingredient.index} data={ingredient} currentUnits={currentUnits}/>\n                ))}\n            </table>\n\n            {/* Ingredient Input */}\n                <form onSubmit={addIngredient}>\n                    <div className='ingredient-input'>\n                        <div>\n                            <input type=\"text\" \n                                placeholder=\"Ingredient\" \n                                id='ingredientNameInput'\n                                name='name'\n                                value={formState.name}\n                                autoComplete=\"off\" \n                                onChange={handleChange}/>\n\n                            <input type=\"number\" \n                                placeholder=\"Amount\"\n                                id='ingredientAmtInput'\n                                name='amount'\n                                value={formState.amount}\n                                onChange={handleChange}\n                                autoComplete=\"off\"/>\n                        </div>\n\n                        {/* Measurement Select, Displays each set of options conditionally based on state */}\n                        <div id='measurementSelect'>\n                            <select onChange={handleChange} name='unit' defaultValue={formState.unit}>\n\n                                {Object.entries(currentUnits).map(([key, obj]) => (\n                                    <option data-factor={obj.value} key={key} value={key}>\n                                            {obj.abbrev}\n                                    </option>\n                                ))}\n\n                            </select>\n                        </div>\n                    </div> \n                    {/* Add Ingredient Button */}\n                    <input type=\"submit\" value=\"+\"></input>\n                </form>\n        </div>\n    )\n};\n\nexport default ViewEditRecipe;",["70","71"],"/Users/laurenceokite/Documents/projects/recipes/src/components/ToggleMeasure/index.js",["72","73","74"],"import React, { useState } from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { CHANGE_GLOBAL_UNIT, CHANGE_GLOBAL_SYSTEM, TOGGLE_AUTO_CONVERT, EDIT_RECIPE } from '../../utils/actions';\nimport './index.css'\n\nfunction ToggleMeasure() {\n    const [ state, dispatch ] = useStoreContext();\n\n    //Each time form is changed, update GlobalState\n    //Weight or Volume\n    function handleUnitChange(event) {\n        const value = event.target.value;\n        dispatch({\n            type: CHANGE_GLOBAL_UNIT,\n            globalUnit: value\n        });\n        console.log(state, value);\n    }\n\n    //Metric or Imperial\n    function handleSystemChange(event) {\n        const value = event.target.value;\n        dispatch({\n            type: CHANGE_GLOBAL_SYSTEM,\n            globalSystem: value\n        }); \n    }\n\n    //Toggle autoconvert on and off\n    function handleToggleAutoConvert() {\n        dispatch({\n            type: TOGGLE_AUTO_CONVERT,\n            autoConvert: !state.autoConvert\n        })\n    }\n\n    return (\n        <form className='toggle-measure'> \n            {/* Measurement Options */}\n            <div>\n                {/* system */}\n                <select onChange={handleSystemChange}>\n                    <option value=\"metric\">M</option>\n                    <option value=\"us\">US</option>\n                </select>\n                {/* type */}\n                <select onChange={handleUnitChange}>\n                        <option value=\"weight\">WEIGHT</option>\n                        <option value=\"volume\">VOLUME</option>\n                </select>\n            </div>\n            <div className='edit-percent'>\n                <input type='number' defaultValue={state.recipeState.percent} placeholder='100'></input>\n                <a>%</a>\n            </div>\n            <div className='autoconvert'>\n                <label htmlFor=\"autoConvertToggle\">autoconvert</label>\n                <input type=\"checkbox\" id=\"autoConvertToggle\" onChange={handleToggleAutoConvert}></input>\n            </div>\n        </form>\n    )\n}\n\nexport default ToggleMeasure;","/Users/laurenceokite/Documents/projects/recipes/src/utils/GlobalState.js",[],"/Users/laurenceokite/Documents/projects/recipes/src/utils/reducers.js",["75"],"import { useReducer } from 'react';\n\nimport {\n    CHANGE_GLOBAL_SYSTEM,\n    CHANGE_GLOBAL_UNIT,\n    TOGGLE_AUTO_CONVERT,\n    EDIT_RECIPE\n} from './actions'\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case CHANGE_GLOBAL_UNIT:\n            return {\n                ...state,\n                globalUnit: action.globalUnit\n            }\n        case CHANGE_GLOBAL_SYSTEM:\n            return {\n                ...state,\n                globalSystem: action.globalSystem\n            }\n        case TOGGLE_AUTO_CONVERT:\n            return {\n                ...state,\n                autoConvert: action.autoConvert\n            }\n        case EDIT_RECIPE:\n            return {\n                ...state,\n                recipeState: action.recipeState\n            }\n    }\n}\n\nexport function useIngredientReducer(initialState) {\n\treturn useReducer(reducer, initialState);\n}",["76","77"],"/Users/laurenceokite/Documents/projects/recipes/src/utils/actions.js",[],"/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js",[],"/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/relativeValues.js",[],["78","79"],"/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/returnIngredient.js",[],"/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/Ingredient.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":22,"column":5,"nodeType":"86","messageId":"87","endLine":22,"endColumn":65},{"ruleId":"88","severity":1,"message":"89","line":50,"column":49,"nodeType":"90","messageId":"91","endLine":50,"endColumn":51},{"ruleId":"80","replacedBy":"92"},{"ruleId":"82","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":14,"column":26,"nodeType":"96","messageId":"97","endLine":14,"endColumn":31},{"ruleId":"80","replacedBy":"98"},{"ruleId":"82","replacedBy":"99"},{"ruleId":"94","severity":1,"message":"100","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":25},{"ruleId":"94","severity":1,"message":"101","line":3,"column":73,"nodeType":"96","messageId":"97","endLine":3,"endColumn":84},{"ruleId":"102","severity":1,"message":"103","line":54,"column":17,"nodeType":"104","endLine":54,"endColumn":20},{"ruleId":"105","severity":1,"message":"106","line":11,"column":5,"nodeType":"107","messageId":"108","endLine":32,"endColumn":6},{"ruleId":"80","replacedBy":"109"},{"ruleId":"82","replacedBy":"110"},{"ruleId":"80","replacedBy":"111"},{"ruleId":"82","replacedBy":"112"},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["113"],["114"],"no-unused-vars","'value' is assigned a value but never used.","Identifier","unusedVar",["113"],["114"],"'useState' is defined but never used.","'EDIT_RECIPE' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["113"],["114"],["113"],["114"],"no-global-assign","no-unsafe-negation"]