[{"/Users/laurenceokite/Documents/projects/recipes/client/src/utils/actions.js":"1","/Users/laurenceokite/Documents/projects/recipes/client/src/App.tsx":"2","/Users/laurenceokite/Documents/projects/recipes/client/src/index.tsx":"3","/Users/laurenceokite/Documents/projects/recipes/client/src/utils/GlobalState.tsx":"4","/Users/laurenceokite/Documents/projects/recipes/client/src/utils/reducers.ts":"5","/Users/laurenceokite/Documents/projects/recipes/client/src/components/RenderIngredient/index.tsx":"6","/Users/laurenceokite/Documents/projects/recipes/client/src/components/UnitSelect/index.tsx":"7","/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/index.tsx":"8","/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/Ingredient.tsx":"9","/Users/laurenceokite/Documents/projects/recipes/client/src/components/ToggleGlobals/index.tsx":"10","/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/Recipe.tsx":"11"},{"size":215,"mtime":1652093087056,"results":"12","hashOfConfig":"13"},{"size":229,"mtime":1652094499725,"results":"14","hashOfConfig":"13"},{"size":220,"mtime":1652093087056,"results":"15","hashOfConfig":"13"},{"size":717,"mtime":1652098837656,"results":"16","hashOfConfig":"13"},{"size":864,"mtime":1652093087056,"results":"17","hashOfConfig":"13"},{"size":2555,"mtime":1652101523775,"results":"18","hashOfConfig":"13"},{"size":903,"mtime":1652101150212,"results":"19","hashOfConfig":"13"},{"size":3819,"mtime":1652105834615,"results":"20","hashOfConfig":"13"},{"size":3858,"mtime":1652098364479,"results":"21","hashOfConfig":"13"},{"size":1247,"mtime":1652105814811,"results":"22","hashOfConfig":"13"},{"size":1320,"mtime":1652105717748,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"aiqusn",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},"/Users/laurenceokite/Documents/projects/recipes/client/src/utils/actions.js",[],"/Users/laurenceokite/Documents/projects/recipes/client/src/App.tsx",[],["52","53"],"/Users/laurenceokite/Documents/projects/recipes/client/src/index.tsx",[],"/Users/laurenceokite/Documents/projects/recipes/client/src/utils/GlobalState.tsx",["54"],"/Users/laurenceokite/Documents/projects/recipes/client/src/utils/reducers.ts",["55"],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/RenderIngredient/index.tsx",["56","57"],"import React, { useState, useRef } from \"react\";\nimport UnitSelect from \"../UnitSelect\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { Ingredient, UnitInterface } from \"../Recipe/Ingredient\";\nimport { Recipe } from \"../Recipe/Recipe\";\nimport './index.css';\n\ninterface RenderIngredientInterface {\n    ingredient: Ingredient,\n    recipe: Recipe,\n    currentUnits: UnitInterface[],\n}\n\nconst RenderIngredient = ({ ingredient, recipe, currentUnits }: RenderIngredientInterface) => {\n    const [ state ] = useStoreContext();\n    const [ingredientState, setIngredientState] = useState({});\n\n    console.log(ingredient, recipe, currentUnits);\n    let thisUnit = ingredient.returnSelected(recipe.state).unit;\n    let thisValue = ingredient.returnSelected(recipe.state).value;\n\n    useRef(() => {\n        thisUnit = ingredient.returnSelected(recipe.state).unit;\n        thisValue = ingredient.returnSelected(recipe.state).value;\n    });\n\n    const handleChangeUnit = (event: React.FormEvent): void => {\n        const { value } = event.target as HTMLFormElement;\n\n        ingredient.updateSelected(recipe.state, value);\n        setIngredientState({}); // Hack to re render ingredient.. \n    }\n\n    const handleChangeValue = (event: React.FormEvent): void => {\n        const { value } = event.target as HTMLFormElement;\n\n        ingredient.updateValue(recipe.state, thisUnit, value);\n        setIngredientState({}); // Hack to re render ingredient.. \n    }\n    \n    return(\n        <tbody>\n             <tr>\n                <td className=\"ingredient-name\">{ingredient.name}</td>\n                <td className=\"ingredient-measurement\">\n                    <form>\n                        <input \n                            type=\"text\" \n                            placeholder=\"No Amt.\" \n                            value={thisValue ? thisValue : ''} \n                            onChange={handleChangeValue}\n                        />\n                    </form>\n                </td>\n                <td id='unitSelect' className=\"unit-select\" onChange={handleChangeUnit}>\n                    <UnitSelect \n                        ingredient={ingredient}\n                        currentUnits={currentUnits}\n                        state={recipe.state}\n                        selectedUnit={ingredient.returnSelected(recipe.state)}\n                    />\n                </td>\n                <td>\n                    <input type=\"number\"></input>\n                </td>\n            </tr> \n        </tbody>\n    )\n}\n\nexport default RenderIngredient;",["58","59"],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/UnitSelect/index.tsx",[],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/index.tsx",["60","61","62"],"import React, { useState } from 'react';\nimport ToggleGlobals from '../ToggleGlobals';\nimport RenderIngredient from '../RenderIngredient';\nimport UnitSelect from '../UnitSelect';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { Ingredient, UnitInterface, IngredientDataInterface } from './Ingredient';\nimport { Recipe } from './Recipe';\nimport './index.css';\nimport { useEffect } from 'react';\n\nconst ViewEditRecipe = () => {\n    const [ state, dispatch ] = useStoreContext();\n\n    const [ recipe, setRecipe ] = useState<Recipe>(new Recipe('metric', 'weight', 0))\n\n    //using info from our super(null); aka new Ingredient(null); call in Recipe (extends Ingredient)\n    const currentUnits: UnitInterface[] = recipe.returnCurrentUnits(recipe.state);\n    const selectedUnit: UnitInterface = recipe.returnSelected(recipe.state);\n\n    console.log(currentUnits, recipe.state)\n\n    const [formState, setFormState] = useState<IngredientDataInterface>({ \n        name: '',\n        value: 0,\n        unit: selectedUnit.unit,\n        state: recipe!.state\n    });\n\n    const addIngredient = (event: React.FormEvent): void => {\n        event.preventDefault();\n        \n        setRecipe(recipe.addIngredient(new Ingredient(formState)));\n\n        // Reset ingredient input form to original state\n        setFormState({\n            name: '',\n            value: 0,\n            unit: selectedUnit.unit,\n            state: recipe.state\n        });\n    };\n\n    const handleChange = (event: React.FormEvent): void => {\n        const { value, name } = event.target as HTMLFormElement;\n\n        setFormState({\n          ...formState,\n          [name]: value\n        });\n    };\n\n    return(\n        <div className='viewEditRecipe'>\n            {/* Change measurement type here */}\n            <ToggleGlobals recipe={recipe} />\n\n            {/* Map array of ingredients */}\n            <table>\n                {recipe.ingredients && recipe.ingredients.map((ingredient: Ingredient) => (\n                <RenderIngredient \n                    key={ingredient.name} \n                    recipe={recipe}\n                    ingredient={ingredient} \n                    currentUnits={currentUnits}\n                />     \n                ))}\n            </table>\n\n            {/* Ingredient Input */}\n                <form onSubmit={addIngredient}>\n                    <div className='ingredient-input'>\n                        <div>\n                            <input type=\"text\" \n                                placeholder=\"Ingredient\" \n                                id='ingredientNameInput'\n                                name='name'\n                                value={formState.name}\n                                autoComplete=\"off\" \n                                onChange={handleChange}/>\n\n                            <input type=\"number\" \n                                placeholder=\"Amount\"\n                                id='ingredientAmtInput'\n                                name='value'\n                                value={formState.value?formState.value:''}\n                                onChange={handleChange}\n                                autoComplete=\"off\"/>\n                        </div>\n\n                        <div id='measurementSelect'>\n                            <UnitSelect \n                                currentUnits={currentUnits} \n                                selectedUnit={selectedUnit}\n                                ingredient={recipe}\n                                state={recipe.state}\n                            />\n                        </div>\n                    </div> \n                    {/* Add Ingredient Button */}\n                    <input type=\"submit\" value=\"+\"></input>\n                </form>\n        </div>\n    )\n};\n\n\n\nexport default ViewEditRecipe;","/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/Ingredient.tsx",[],"/Users/laurenceokite/Documents/projects/recipes/client/src/components/ToggleGlobals/index.tsx",["63","64","65"],"import React, { useState } from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport './index.css'\nimport { Recipe } from '../Recipe/Recipe';\n\nconst ToggleGlobals = ( recipe: Recipe ) => {\n    const [ state, dispatch ] = useStoreContext();\n\n    const handleChange = (event: React.FormEvent): void =>  {\n        const { value } = event.target as HTMLFormElement;\n        recipe.changeState(value);\n    }\n\n    return (\n        <form className='toggle-measure'> \n            {/* Measurement Options */}\n            <div>\n                {/* system */}\n                <select onChange={handleChange}>\n                    <option value=\"metric\">M</option>\n                    <option value=\"us\">US</option>\n                </select>\n                {/* type */}\n                <select onChange={handleChange}>\n                        <option value=\"weight\">WEIGHT</option>\n                        <option value=\"volume\">VOLUME</option>\n                </select>\n            </div>\n            <div className='edit-percent'>\n                <input type='number' defaultValue={state.recipeState.percent} placeholder='100'></input>\n                <a> X</a>\n            </div>\n        </form>\n    )\n}\n\nexport default ToggleGlobals;","/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/Recipe.tsx",["66"],"import { Ingredient, IngredientDataInterface } from \"./Ingredient\";\n\ntype GlobalSystems = 'metric' | 'us';\ntype GlobalUnits = 'weight' | 'volume';\nexport type State = `${GlobalSystems}_${GlobalUnits}`;\n\nexport class Recipe extends Ingredient {\n    multiplier = 1;\n\n    system: GlobalSystems;\n    units: GlobalUnits;\n    state: State;\n    anchorIndex: number;\n    name?: string;\n    ingredients?: Ingredient[];\n\n    constructor(system: GlobalSystems, units: GlobalUnits, anchorIndex: number, name?: string, ingredients?: Ingredient[]) {\n        super(null);//gets info to pass to selects\n\n        this.system = system;\n        this.units = units;\n        this.state = `${this.system}_${this.units}`\n        this.anchorIndex = anchorIndex;\n        if (name) this.name = name;\n        if (ingredients) this.ingredients = ingredients;\n    }\n\n    changeState(system?: GlobalSystems, units?: GlobalUnits): Recipe {\n        if (system) this.system = system;\n        if (units) this.units = units;\n        \n        this.state = `${this.system}_${this.units}`\n        return this;\n    }\n\n    addIngredient(ingredient: Ingredient): Recipe {\n        if (!this.ingredients) this.ingredients = [ingredient];\n        this.ingredients = [\n            ...this.ingredients,\n            ingredient\n        ]\n        return this;\n    }\n}\n\n",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":3,"column":10,"nodeType":"73","messageId":"74","endLine":3,"endColumn":20},{"ruleId":"71","severity":1,"message":"75","line":7,"column":5,"nodeType":"73","messageId":"74","endLine":7,"endColumn":24},{"ruleId":"71","severity":1,"message":"76","line":15,"column":13,"nodeType":"73","messageId":"74","endLine":15,"endColumn":18},{"ruleId":"71","severity":1,"message":"77","line":16,"column":12,"nodeType":"73","messageId":"74","endLine":16,"endColumn":27},{"ruleId":"67","replacedBy":"78"},{"ruleId":"69","replacedBy":"79"},{"ruleId":"71","severity":1,"message":"80","line":9,"column":10,"nodeType":"73","messageId":"74","endLine":9,"endColumn":19},{"ruleId":"71","severity":1,"message":"76","line":12,"column":13,"nodeType":"73","messageId":"74","endLine":12,"endColumn":18},{"ruleId":"71","severity":1,"message":"81","line":12,"column":20,"nodeType":"73","messageId":"74","endLine":12,"endColumn":28},{"ruleId":"71","severity":1,"message":"82","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"81","line":7,"column":20,"nodeType":"73","messageId":"74","endLine":7,"endColumn":28},{"ruleId":"83","severity":1,"message":"84","line":31,"column":17,"nodeType":"85","endLine":31,"endColumn":20},{"ruleId":"71","severity":1,"message":"86","line":1,"column":22,"nodeType":"73","messageId":"74","endLine":1,"endColumn":45},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"@typescript-eslint/no-unused-vars","'Ingredient' is defined but never used.","Identifier","unusedVar","'TOGGLE_AUTO_CONVERT' is defined but never used.","'state' is assigned a value but never used.","'ingredientState' is assigned a value but never used.",["87"],["88"],"'useEffect' is defined but never used.","'dispatch' is assigned a value but never used.","'useState' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'IngredientDataInterface' is defined but never used.","no-global-assign","no-unsafe-negation"]