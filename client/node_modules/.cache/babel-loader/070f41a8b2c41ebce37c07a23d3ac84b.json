{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ToggleGlobals from '../ToggleGlobals';\nimport RenderIngredient from '../RenderIngredient';\nimport UnitSelect from '../UnitSelect';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { Ingredient } from './Ingredient';\nimport { Recipe } from './Recipe';\nimport './index.css';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewEditRecipe = () => {\n  _s();\n\n  const [state, dispatch] = useStoreContext();\n  let recipe;\n  useEffect(() => {\n    recipe = new Recipe('metric', 'weight', 0);\n  }); //using info from our super(null); aka new Ingredient(null); call in Recipe (extends Ingredient)\n\n  const currentUnits = recipe.returnCurrentUnits(recipe.state);\n  const selectedUnit = recipe.returnSelected(recipe.state);\n  const [ingredients, setIngredients] = useState(recipe.ingredients || []);\n  const [formState, setFormState] = useState({\n    name: '',\n    value: 0,\n    unit: selectedUnit.unit,\n    state: recipe.state\n  });\n\n  const addIngredient = event => {\n    event.preventDefault();\n    const newIngredient = new Ingredient(formState);\n    recipe.addIngredient(newIngredient); // Reset ingredient input form to original state\n\n    setFormState({\n      name: '',\n      value: 0,\n      unit: selectedUnit.unit,\n      state: recipe.state\n    });\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setFormState({ ...formState,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"viewEditRecipe\",\n    children: [/*#__PURE__*/_jsxDEV(ToggleGlobals, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: recipe.ingredients && recipe.ingredients.map(ingredient => /*#__PURE__*/_jsxDEV(RenderIngredient, {\n        recipe: recipe,\n        ingredient: ingredient,\n        currentUnits: currentUnits\n      }, ingredient.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addIngredient,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ingredient-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Ingredient\",\n            id: \"ingredientNameInput\",\n            name: \"name\",\n            value: formState.name,\n            autoComplete: \"off\",\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Amount\",\n            id: \"ingredientAmtInput\",\n            name: \"value\",\n            value: formState.value ? formState.value : '',\n            onChange: handleChange,\n            autoComplete: \"off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"measurementSelect\",\n          children: /*#__PURE__*/_jsxDEV(UnitSelect, {\n            currentUnits: currentUnits,\n            selectedUnit: selectedUnit,\n            ingredient: recipe,\n            state: recipe.state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ViewEditRecipe, \"VyNeJUx4iC17LWv/IVKVH3dRNwU=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ViewEditRecipe;\nexport default ViewEditRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewEditRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/index.tsx"],"names":["React","useState","ToggleGlobals","RenderIngredient","UnitSelect","useStoreContext","Ingredient","Recipe","useEffect","ViewEditRecipe","state","dispatch","recipe","currentUnits","returnCurrentUnits","selectedUnit","returnSelected","ingredients","setIngredients","formState","setFormState","name","value","unit","addIngredient","event","preventDefault","newIngredient","handleChange","target","map","ingredient"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ToggleGlobals from '../ToggleGlobals';\nimport RenderIngredient from '../RenderIngredient';\nimport UnitSelect from '../UnitSelect';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { Ingredient, UnitInterface, IngredientDataInterface } from './Ingredient';\nimport { Recipe } from './Recipe';\nimport './index.css';\nimport { useEffect } from 'react';\n\nconst ViewEditRecipe = () => {\n    const [ state, dispatch ] = useStoreContext();\n\n    let recipe: Recipe;\n\n    useEffect(() => {\n        recipe = new Recipe('metric', 'weight', 0);\n    });\n\n    //using info from our super(null); aka new Ingredient(null); call in Recipe (extends Ingredient)\n    const currentUnits: UnitInterface[] = recipe!.returnCurrentUnits(recipe!.state);\n    const selectedUnit: UnitInterface = recipe!.returnSelected(recipe!.state);\n\n    const [ ingredients, setIngredients ] = useState<Ingredient[]>(recipe!.ingredients || []);\n\n    const [formState, setFormState] = useState<IngredientDataInterface>({ \n        name: '',\n        value: 0,\n        unit: selectedUnit.unit,\n        state: recipe!.state\n    });\n\n    const addIngredient = (event: React.FormEvent): void => {\n        event.preventDefault();\n\n        const newIngredient = new Ingredient(formState);\n        \n        recipe.addIngredient(newIngredient);\n\n        // Reset ingredient input form to original state\n        setFormState({\n            name: '',\n            value: 0,\n            unit: selectedUnit.unit,\n            state: recipe.state\n        });\n    };\n\n    const handleChange = (event: React.FormEvent): void => {\n        const { value, name } = event.target as HTMLFormElement;\n\n        setFormState({\n          ...formState,\n          [name]: value\n        });\n    };\n\n    return(\n        <div className='viewEditRecipe'>\n            {/* Change measurement type here */}\n            <ToggleGlobals/>\n\n            {/* Map array of ingredients */}\n            <table>\n                {recipe!.ingredients && recipe!.ingredients.map((ingredient: Ingredient) => (\n                <RenderIngredient \n                    key={ingredient.name} \n                    recipe={recipe}\n                    ingredient={ingredient} \n                    currentUnits={currentUnits}\n                />     \n                ))}\n            </table>\n\n            {/* Ingredient Input */}\n                <form onSubmit={addIngredient}>\n                    <div className='ingredient-input'>\n                        <div>\n                            <input type=\"text\" \n                                placeholder=\"Ingredient\" \n                                id='ingredientNameInput'\n                                name='name'\n                                value={formState.name}\n                                autoComplete=\"off\" \n                                onChange={handleChange}/>\n\n                            <input type=\"number\" \n                                placeholder=\"Amount\"\n                                id='ingredientAmtInput'\n                                name='value'\n                                value={formState.value?formState.value:''}\n                                onChange={handleChange}\n                                autoComplete=\"off\"/>\n                        </div>\n\n                        <div id='measurementSelect'>\n                            <UnitSelect \n                                currentUnits={currentUnits} \n                                selectedUnit={selectedUnit}\n                                ingredient={recipe!}\n                                state={recipe!.state}\n                            />\n                        </div>\n                    </div> \n                    {/* Add Ingredient Button */}\n                    <input type=\"submit\" value=\"+\"></input>\n                </form>\n        </div>\n    )\n};\n\n\n\nexport default ViewEditRecipe;"]},"metadata":{},"sourceType":"module"}