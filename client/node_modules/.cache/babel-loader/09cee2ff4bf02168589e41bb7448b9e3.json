{"ast":null,"code":"import { Ingredient } from \"./Ingredient\"; //convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\n\nconst convertToString = (measurement, requested) => {\n  if (measurement) {\n    //if measurement is in pounds send to displayPounds function for further formatting\n    if (requested === \"pounds\") {\n      console.log('lbs');\n      return displayPounds(measurement);\n    } else {\n      return (Math.round(measurement * 100) / 100).toLocaleString();\n    }\n  } else {\n    //if no measurement\n    return false;\n  }\n}; //format pounds for display as string\n\n\nconst displayPounds = measurement => {\n  const pounds = parseInt(measurement);\n  const remainder = measurement % 1;\n  const ounces = (remainder * 16).toFixed(1);\n\n  if (remainder) {\n    return `${pounds}: ${ounces}`;\n  } else if (measurement) {\n    return measurement;\n  } else {\n    return false;\n  }\n};\n\nconst returnIngredient = (data, unit, system, requested, autoconvert) => {\n  /*\n  {\n      name: \"\",\n      [unit]: {\n          value: float,\n          default: [default unit of measurement]\n  }\n  global unit and system, \n   */\n  const ingredient = new Ingredient(data, unit, system);\n  console.log(requested);\n\n  if (!requested || requested === ingredient[unit].default) {\n    console.log(requested, ingredient[unit].default);\n\n    if (ingredient[unit]) {\n      if (ingredient.default()) {\n        const {\n          measurement\n        } = ingredient.default();\n        return {\n          name: ingredient.name,\n          unit: ingredient[unit].default,\n          measurement: convertToString(measurement, requested)\n        };\n      } else {\n        const {\n          measurement,\n          newUnit\n        } = ingredient.findConciseUnit();\n        return {\n          name: ingredient.name,\n          unit: newUnit,\n          measurement: convertToString(measurement, requested)\n        };\n      }\n    } //If no requeste\n    else {\n      return {\n        name: ingredient.name,\n        unit: false,\n        measurement: false\n      };\n    }\n  }\n\n  if (requested !== ingredient[unit].default) {\n    console.log(requested, '2');\n\n    if (ingredient[unit]) {\n      const measurement = ingredient.convert(requested);\n      return {\n        name: ingredient.name,\n        unit: requested,\n        measurement: convertToString(measurement, requested)\n      };\n    }\n\n    if (autoconvert) {\n      const {\n        measurement,\n        newUnit\n      } = ingredient.findConciseUnit();\n      return {\n        name: ingredient.name,\n        unit: newUnit,\n        measurement: convertToString(measurement, requested)\n      };\n    }\n\n    if (!ingredient[unit]) {\n      return {\n        name: ingredient.name,\n        unit: requested,\n        measurement: false\n      };\n    }\n  }\n};\n\nexport default returnIngredient;","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/returnIngredient.js"],"names":["Ingredient","convertToString","measurement","requested","console","log","displayPounds","Math","round","toLocaleString","pounds","parseInt","remainder","ounces","toFixed","returnIngredient","data","unit","system","autoconvert","ingredient","default","name","newUnit","findConciseUnit","convert"],"mappings":"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","sourcesContent":["import { Ingredient } from \"./Ingredient\";\n\n//convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\nconst convertToString = (measurement, requested) => {\n    if (measurement) {\n        //if measurement is in pounds send to displayPounds function for further formatting\n        if (requested === \"pounds\") {\n            console.log('lbs');\n            return displayPounds(measurement);\n        }\n        else {\n            return (Math.round(measurement*100)/100).toLocaleString();\n        }\n    }\n    else {\n        //if no measurement\n        return false;\n    }\n}\n\n//format pounds for display as string\nconst displayPounds = (measurement) => {\n    const pounds = parseInt(measurement);\n    const remainder = measurement % 1;\n    const ounces = (remainder*16).toFixed(1);\n    \n    if (remainder) {\n        return `${pounds}: ${ounces}`;\n    }\n    else if (measurement) {\n        return measurement;\n    } \n    else {\n        return false;\n    }\n}\n\nconst returnIngredient = (data, unit, system, requested, autoconvert) => {\n    /*\n    {\n        name: \"\",\n        [unit]: {\n            value: float,\n            default: [default unit of measurement]\n    }\n    global unit and system, \n\n    */\n    const ingredient = new Ingredient(data, unit, system);\n\n    console.log(requested);\n\n    if (!requested || (requested === ingredient[unit].default)) {\n        console.log(requested, ingredient[unit].default);\n\n        if (ingredient[unit]) {\n\n            if (ingredient.default()) {\n                const { measurement } = ingredient.default();\n\n                return {\n                    name: ingredient.name,\n                    unit: ingredient[unit].default,\n                    measurement: convertToString(measurement, requested)\n                }\n\n            } else {\n                const { measurement, newUnit } = ingredient.findConciseUnit();\n\n                return {\n                    name: ingredient.name,\n                    unit: newUnit,\n                    measurement: convertToString(measurement, requested)\n                }\n            }\n        }\n        //If no requeste\n        else {\n            return {\n                name: ingredient.name,\n                unit: false,\n                measurement: false\n            }\n        }\n    }\n\n    if (requested !== ingredient[unit].default) {\n        console.log(requested, '2');\n        if (ingredient[unit]) {\n            const measurement = ingredient.convert(requested);\n            return {\n                name: ingredient.name,\n                unit: requested,\n                measurement: convertToString(measurement, requested)\n            }\n        }\n\n        if (autoconvert) {\n            const { measurement, newUnit } = ingredient.findConciseUnit();\n            return {\n                name: ingredient.name,\n                unit: newUnit,\n                measurement: convertToString(measurement, requested)\n            }\n        }\n\n        if (!ingredient[unit]) {\n            return {\n                name: ingredient.name,\n                unit: requested,\n                measurement: false\n            }\n        }\n    }\n\n    \n\n}\n\nexport default returnIngredient;"]},"metadata":{},"sourceType":"module"}