{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/Components/ViewEditRecipe/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ViewEditRecipe() {\n  _s();\n\n  const [addIngredientState, setAddIngredientState] = useState({\n    ingredient: '',\n    amount: ''\n  });\n  const ingredients = {};\n\n  function addIngredient() {\n    ingredients.push({\n      ingredient: addIngredientState.ingredient,\n      amount: addIngredientState.amount,\n      measure: measure\n    });\n    console.log(ingredients);\n  }\n\n  {\n    /* Each time text is entered to input, update formState */\n  }\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setAddIngredientState({ ...addIngredientState,\n      [name]: value\n    });\n    console.log(name, value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"measureOptions\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"unitOfMeasure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"unitOfMeasure\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"metric\",\n          children: \"M\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"imperial\",\n          children: \"I\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"typeOfMeasure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"typeOfMeasure\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"weight\",\n          children: \"WEIGHT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"volume\",\n          children: \"VOLUME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"autoConvertToggle\",\n        children: \"autoconvert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        className: \"autoConvertToggle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Xanthan Gum \", /*#__PURE__*/_jsxDEV(\"u\", {\n          children: \"16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 36\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"u\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 46\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Ingredient\",\n        id: \"ingredientNameInput\",\n        name: \"name\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Amt.\",\n        id: \"ingredientAmtInput\",\n        name: \"amount\",\n        onChange: handleChange,\n        className: \"ingredientAmtInput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"imperialVolumeSelect\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gallons\",\n          children: \"G\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"quarts\",\n          children: \"Q\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cups\",\n          children: \"C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"tablespoons\",\n          children: \"T\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"teaspoons\",\n          children: \"t\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fluid ounces\",\n          children: \"fl. oz.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"imperialWeightSelect\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"pounds\",\n          children: \"lbs.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ounces\",\n          children: \"oz.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"metricVolumeSelect\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"liters\",\n          children: \"L\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"deciliters\",\n          children: \"dL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"milliliters\",\n          children: \"mL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"metricWeightSelect\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"kilograms\",\n          children: \"kg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"grams\",\n          children: \"g\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"milligrams\",\n          children: \"mg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"addIngredient\",\n        onClick: addIngredient,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewEditRecipe, \"BNskiFRh/lb48odvLrWaUWoHdgI=\");\n\n_c = ViewEditRecipe;\nexport default ViewEditRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewEditRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/Components/ViewEditRecipe/index.js"],"names":["React","useState","ViewEditRecipe","addIngredientState","setAddIngredientState","ingredient","amount","ingredients","addIngredient","push","measure","console","log","handleChange","event","name","value","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nfunction ViewEditRecipe() {\n    const [addIngredientState, setAddIngredientState] = useState({ \n        ingredient: '', amount: ''\n    });\n\n    const ingredients = {}\n    \n    function addIngredient() {\n       ingredients.push({\n           ingredient: addIngredientState.ingredient,\n           amount: addIngredientState.amount,\n           measure: measure\n       });\n       console.log(ingredients);\n    }\n\n    {/* Each time text is entered to input, update formState */}\n    const handleChange = event => {\n        const { name, value } = event.target;\n        setAddIngredientState({\n          ...addIngredientState,\n          [name]: value\n        });\n\n        console.log(name, value);\n    }\n\n    return(\n        <div>\n            {/* Measurement Options */}\n            <div className=\"measureOptions\">\n                <label htmlFor=\"unitOfMeasure\"></label>\n                <select className=\"unitOfMeasure\">\n                    <option value=\"metric\">M</option>\n                    <option value=\"imperial\">I</option>\n                </select>\n                <label htmlFor=\"typeOfMeasure\"></label>\n                <select className=\"typeOfMeasure\">\n                        <option value=\"weight\">WEIGHT</option>\n                        <option value=\"volume\">VOLUME</option>\n                </select>\n                <label htmlFor=\"autoConvertToggle\">autoconvert</label>\n                <input type=\"checkbox\" className=\"autoConvertToggle\"></input>\n            </div>\n\n            <div>\n                    <p>Xanthan Gum <u>16</u> <u></u> </p>\n            </div>\n\n            <div>\n                {/* Ingredient Input */}\n                <input type=\"text\" \n                    placeholder=\"Ingredient\" \n                    id='ingredientNameInput'\n                    name='name'\n                    onChange={handleChange}></input>\n                <input type=\"text\" \n                    placeholder=\"Amt.\"\n                    id='ingredientAmtInput'\n                    name='amount'\n                    onChange={handleChange} \n                    className=\"ingredientAmtInput\"></input>\n\n                {/* Conditional Measurement Select */}\n                {/* if Imperial */}\n                <select className=\"imperialVolumeSelect\">\n                    <option value=\"gallons\">G</option>\n                    <option value=\"quarts\">Q</option>\n                    <option value=\"cups\">C</option>\n                    <option value=\"tablespoons\">T</option>\n                    <option value=\"teaspoons\">t</option>\n                    <option value=\"fluid ounces\">fl. oz.</option>\n                </select>\n\n                <select className=\"imperialWeightSelect\">\n                    <option value=\"pounds\">lbs.</option>\n                    <option value=\"ounces\">oz.</option>\n                </select> \n                {/* if Metric */}\n                <select className=\"metricVolumeSelect\">\n                    <option value=\"liters\">L</option>\n                    <option value=\"deciliters\">dL</option>\n                    <option value=\"milliliters\">mL</option>\n                </select>\n\n                <select className=\"metricWeightSelect\">\n                    <option value=\"kilograms\">kg</option>\n                    <option value=\"grams\">g</option>\n                    <option value=\"milligrams\">mg</option>\n                </select> \n            </div>\n            {/* Add Ingredient Button */}\n            <div>\n                <button className=\"addIngredient\" onClick={addIngredient}>+</button>\n            </div>\n        </div>\n    )\n}\n\nexport default ViewEditRecipe;"]},"metadata":{},"sourceType":"module"}