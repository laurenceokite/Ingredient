{"ast":null,"code":"export function convertMeasure(current, requested, measurement) {\n  const log = function () {\n    return console.log(...arguments);\n  };\n\n  const curSystem = current[0];\n  const reqSystem = requested[0];\n  const curSubmeasure = current[1];\n  const reqSubmeasure = requested[1];\n  const systemValues = {\n    metric_weight: {\n      grams: 1,\n      milligrams: .001,\n      kilograms: 100\n    },\n    metric_volume: {\n      milliliters: 1,\n      liters: 1000\n    },\n    us_weight: {\n      ounces: 24.35,\n      pounds: 453.6\n    },\n    us_volume: {\n      cups: 240,\n      quarts: 946,\n      gallons: 3785,\n      fluid_ounces: 29.574,\n      tablespoons: 14.787,\n      teaspoon: 4.929\n    }\n  };\n  const curSubmeasureValue = systemValues[curSystem][curSubmeasure];\n\n  if (!reqSubmeasure) {\n    function compareClosestSubmeasure() {\n      let newPossibleSubmeasure;\n      let leastDifference;\n      log('original value:', curSubmeasureValue);\n\n      for (const [key, value] of Object.entries(systemValues[reqSystem])) {\n        const difference = Math.abs(curSubmeasureValue - value);\n        log('current:', key, '-', value);\n\n        if (leastDifference) {\n          if (difference < leastDifference) {\n            leastDifference = difference;\n            newPossibleSubmeasure = key;\n            log('new lowest difference!:', leastDifference, ':', newPossibleSubmeasure);\n          }\n        } else {\n          leastDifference = difference;\n          newPossibleSubmeasure = key;\n        }\n      }\n\n      log('got it!: ', newPossibleSubmeasure);\n      return newPossibleSubmeasure;\n    }\n\n    reqSubmeasure = compareClosestSubmeasure();\n  }\n\n  const reqSubmeasureValue = systemValues[reqSystem][reqSubmeasure];\n  const newMeasurement = curSubmeasureValue / reqSubmeasureValue * measurement;\n  return {\n    newMeasurement: newMeasurement,\n    newSubmeasure: reqSubmeasure\n  };\n}","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/utils/helpers.js"],"names":["convertMeasure","current","requested","measurement","log","console","curSystem","reqSystem","curSubmeasure","reqSubmeasure","systemValues","metric_weight","grams","milligrams","kilograms","metric_volume","milliliters","liters","us_weight","ounces","pounds","us_volume","cups","quarts","gallons","fluid_ounces","tablespoons","teaspoon","curSubmeasureValue","compareClosestSubmeasure","newPossibleSubmeasure","leastDifference","key","value","Object","entries","difference","Math","abs","reqSubmeasureValue","newMeasurement","newSubmeasure"],"mappings":"AAAA,OAAO,SAASA,cAAT,CAAwBC,OAAxB,EAAiCC,SAAjC,EAA4CC,WAA5C,EAAyD;AAC5D,QAAMC,GAAG,GAAG;AAAA,WAAaC,OAAO,CAACD,GAAR,CAAY,YAAZ,CAAb;AAAA,GAAZ;;AAEA,QAAME,SAAS,GAAGL,OAAO,CAAC,CAAD,CAAzB;AACA,QAAMM,SAAS,GAAGL,SAAS,CAAC,CAAD,CAA3B;AACA,QAAMM,aAAa,GAAGP,OAAO,CAAC,CAAD,CAA7B;AACA,QAAMQ,aAAa,GAAGP,SAAS,CAAC,CAAD,CAA/B;AAEA,QAAMQ,YAAY,GAAG;AACjBC,IAAAA,aAAa,EAAE;AACXC,MAAAA,KAAK,EAAE,CADI;AAEXC,MAAAA,UAAU,EAAE,IAFD;AAGXC,MAAAA,SAAS,EAAE;AAHA,KADE;AAOjBC,IAAAA,aAAa,EAAE;AACXC,MAAAA,WAAW,EAAE,CADF;AAEXC,MAAAA,MAAM,EAAE;AAFG,KAPE;AAYjBC,IAAAA,SAAS,EAAE;AACPC,MAAAA,MAAM,EAAE,KADD;AAEPC,MAAAA,MAAM,EAAE;AAFD,KAZM;AAiBjBC,IAAAA,SAAS,EAAE;AACPC,MAAAA,IAAI,EAAE,GADC;AAEPC,MAAAA,MAAM,EAAE,GAFD;AAGPC,MAAAA,OAAO,EAAE,IAHF;AAIPC,MAAAA,YAAY,EAAE,MAJP;AAKPC,MAAAA,WAAW,EAAE,MALN;AAMPC,MAAAA,QAAQ,EAAE;AANH;AAjBM,GAArB;AA2BA,QAAMC,kBAAkB,GAAGlB,YAAY,CAACJ,SAAD,CAAZ,CAAwBE,aAAxB,CAA3B;;AAEA,MAAI,CAACC,aAAL,EAAoB;AAChB,aAASoB,wBAAT,GAAoC;AAChC,UAAIC,qBAAJ;AACA,UAAIC,eAAJ;AACA3B,MAAAA,GAAG,CAAC,iBAAD,EAAoBwB,kBAApB,CAAH;;AACA,WAAK,MAAM,CAACI,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAezB,YAAY,CAACH,SAAD,CAA3B,CAA3B,EAAoE;AAChE,cAAM6B,UAAU,GAAGC,IAAI,CAACC,GAAL,CAASV,kBAAkB,GAAGK,KAA9B,CAAnB;AACA7B,QAAAA,GAAG,CAAC,UAAD,EAAa4B,GAAb,EAAkB,GAAlB,EAAuBC,KAAvB,CAAH;;AACA,YAAIF,eAAJ,EAAqB;AACjB,cAAIK,UAAU,GAAGL,eAAjB,EAAkC;AAC9BA,YAAAA,eAAe,GAAGK,UAAlB;AACAN,YAAAA,qBAAqB,GAAGE,GAAxB;AACA5B,YAAAA,GAAG,CAAC,yBAAD,EAA4B2B,eAA5B,EAA6C,GAA7C,EAAkDD,qBAAlD,CAAH;AACH;AACJ,SAND,MAMO;AACHC,UAAAA,eAAe,GAAGK,UAAlB;AACAN,UAAAA,qBAAqB,GAAGE,GAAxB;AACH;AACJ;;AACD5B,MAAAA,GAAG,CAAC,WAAD,EAAc0B,qBAAd,CAAH;AACA,aAAOA,qBAAP;AACH;;AACDrB,IAAAA,aAAa,GAAGoB,wBAAwB,EAAxC;AACH;;AAED,QAAMU,kBAAkB,GAAG7B,YAAY,CAACH,SAAD,CAAZ,CAAwBE,aAAxB,CAA3B;AAEA,QAAM+B,cAAc,GAAGZ,kBAAkB,GAAGW,kBAArB,GAA0CpC,WAAjE;AAEA,SAAO;AACHqC,IAAAA,cAAc,EAAEA,cADb;AAEHC,IAAAA,aAAa,EAAEhC;AAFZ,GAAP;AAKH","sourcesContent":["export function convertMeasure(current, requested, measurement) {    \n    const log = (...args) => console.log(...args);\n\n    const curSystem = current[0];\n    const reqSystem = requested[0];\n    const curSubmeasure = current[1];\n    const reqSubmeasure = requested[1];\n    \n    const systemValues = {\n        metric_weight: {\n            grams: 1,\n            milligrams: .001,\n            kilograms: 100\n        },\n\n        metric_volume: {\n            milliliters: 1,\n            liters: 1000\n        },\n\n        us_weight: {\n            ounces: 24.35,\n            pounds: 453.6\n        },\n\n        us_volume: {\n            cups: 240,\n            quarts: 946,\n            gallons: 3785,\n            fluid_ounces: 29.574,\n            tablespoons: 14.787,\n            teaspoon: 4.929\n        }\n    }\n\n    const curSubmeasureValue = systemValues[curSystem][curSubmeasure];\n    \n    if (!reqSubmeasure) {\n        function compareClosestSubmeasure() {\n            let newPossibleSubmeasure;\n            let leastDifference;\n            log('original value:', curSubmeasureValue);\n            for (const [key, value] of Object.entries(systemValues[reqSystem])) {\n                const difference = Math.abs(curSubmeasureValue - value);\n                log('current:', key, '-', value);\n                if (leastDifference) {\n                    if (difference < leastDifference) {\n                        leastDifference = difference;\n                        newPossibleSubmeasure = key;\n                        log('new lowest difference!:', leastDifference, ':', newPossibleSubmeasure);\n                    }\n                } else {\n                    leastDifference = difference;\n                    newPossibleSubmeasure = key;\n                }\n            }\n            log('got it!: ', newPossibleSubmeasure);\n            return newPossibleSubmeasure;\n        }\n        reqSubmeasure = compareClosestSubmeasure();\n    }\n    \n    const reqSubmeasureValue = systemValues[reqSystem][reqSubmeasure];\n\n    const newMeasurement = curSubmeasureValue / reqSubmeasureValue * measurement;\n    \n    return { \n        newMeasurement: newMeasurement,\n        newSubmeasure: reqSubmeasure\n    }\n    \n}\n\n"]},"metadata":{},"sourceType":"module"}