{"ast":null,"code":"import { relativeValues } from \"./relativeValues\";\nexport class Ingredient {\n  constructor(data, unit, system) {\n    this.system = system;\n    this.unit = unit;\n    this.weight = false;\n    this.volume = false;\n    Object.assign(this, data);\n  } //convert any value based on relativeValues\n\n\n  convert(requested) {\n    const {\n      unit,\n      system\n    } = this;\n    const relativeValue = relativeValues[system][unit][requested].value;\n    console.log({\n      measurement: this[unit].value / relativeValue,\n      newUnit: requested\n    }); //all other functions in Ingredient call convert(), return raw value as any unit measurement\n\n    return {\n      measurement: this[unit].value / relativeValue,\n      newUnit: requested\n    };\n  } //return measurement as default unit\n\n\n  default() {\n    const {\n      unit,\n      system\n    } = this;\n    const requested = this[unit].default; //.default() evaluates to true or false\n\n    if (!relativeValues[system][unit][requested]) {\n      return false;\n    }\n\n    console.log(requested);\n    return this.convert(requested);\n  } //if default() = false, findConciseUnit can find closest in relativeValues\n\n\n  findConciseUnit() {\n    const {\n      unit,\n      system\n    } = this;\n    let oppUnit;\n    let thisValue;\n    let quotient; //define opposite global unit\n\n    if (unit === 'volume') {\n      oppUnit = 'weight';\n    } else oppUnit = 'volume'; //check both global units for a value\n\n\n    if (this[unit]) {\n      thisValue = this[unit].value;\n    } else thisValue = this[oppUnit].value; //Iterate through values to find closest unit\n\n\n    for (const [key, value] of Object.entries(relativeValues[system][unit])) {\n      const thisQuotient = Math.abs(value.value / thisValue);\n\n      if (quotient) {\n        if (quotient.val > thisQuotient && thisQuotient > 1) {\n          quotient = {\n            val: thisQuotient,\n            key: key\n          };\n        }\n      }\n\n      if (!quotient) {\n        quotient = {\n          val: thisQuotient,\n          key: key\n        };\n      }\n    }\n\n    return this.convert(quotient.key);\n  }\n\n}","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/Ingredient.js"],"names":["relativeValues","Ingredient","constructor","data","unit","system","weight","volume","Object","assign","convert","requested","relativeValue","value","console","log","measurement","newUnit","default","findConciseUnit","oppUnit","thisValue","quotient","key","entries","thisQuotient","Math","abs","val"],"mappings":"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","sourcesContent":["import { relativeValues } from \"./relativeValues\";\n\nexport class Ingredient {\n    constructor(data, unit, system) {\n        this.system = system;\n        this.unit = unit;\n\n        this.weight = false;\n        this.volume = false;\n\n        Object.assign(this, data);\n    }\n\n    //convert any value based on relativeValues\n    convert(requested) {\n        const { unit, system } = this;\n        const relativeValue = relativeValues[system][unit][requested].value;\n\n        console.log({measurement: this[unit].value / relativeValue,\n        newUnit: requested});\n\n        //all other functions in Ingredient call convert(), return raw value as any unit measurement\n        return {\n            measurement: this[unit].value / relativeValue,\n            newUnit: requested\n        };\n    }\n\n    //return measurement as default unit\n    default() {\n        const { unit, system } = this;\n        const requested = this[unit].default;\n\n        //.default() evaluates to true or false\n        if (!relativeValues[system][unit][requested]) {\n            return false;\n        }\n\n        console.log(requested);\n\n        return this.convert(requested);\n    }\n\n    //if default() = false, findConciseUnit can find closest in relativeValues\n    findConciseUnit() {\n        const { unit, system } = this;\n\n        let oppUnit;\n        let thisValue;\n        let quotient;\n\n        //define opposite global unit\n        if (unit === 'volume') { oppUnit = 'weight' }\n\n        else oppUnit = 'volume';\n\n        //check both global units for a value\n        if (this[unit]) { thisValue = this[unit].value }\n\n        else thisValue = this[oppUnit].value;\n\n        //Iterate through values to find closest unit\n        for (const [key, value] of Object.entries(relativeValues[system][unit])) {\n            const thisQuotient = Math.abs(value.value / thisValue);\n            if (quotient) {\n                if ((quotient.val > thisQuotient) && (thisQuotient > 1)) {\n                    quotient = {\n                        val: thisQuotient,\n                        key: key \n                    };\n                }\n            }\n            if (!quotient) {\n                quotient = {\n                    val: thisQuotient,\n                    key: key \n                };\n            }\n        }\n\n        return this.convert(quotient.key);\n    }\n}"]},"metadata":{},"sourceType":"module"}