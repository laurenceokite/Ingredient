{"ast":null,"code":"export const relativeValues = {\n  metric: {\n    weight: {\n      milligrams: {\n        value: .001,\n        abbrev: 'mg'\n      },\n      grams: {\n        value: 1,\n        abbrev: 'g',\n        default: true\n      },\n      kilograms: {\n        value: 1000,\n        abbrev: 'k'\n      }\n    },\n    volume: {\n      milliliters: {\n        value: 1,\n        abbrev: 'mL',\n        default: true\n      },\n      liters: {\n        value: 1000,\n        abbrev: 'L'\n      }\n    }\n  },\n  us: {\n    weight: {\n      pounds: {\n        value: 454,\n        abbrev: 'lbs.'\n      },\n      ounces: {\n        value: 28,\n        abbrev: 'oz.',\n        default: true\n      }\n    },\n    volume: {\n      cups: {\n        value: 240,\n        abbrev: 'C',\n        default: true\n      },\n      quarts: {\n        value: 946,\n        abbrev: 'Q'\n      },\n      gallons: {\n        value: 3785,\n        abbrev: 'G'\n      },\n      teaspoons: {\n        value: 4.929,\n        abbrev: 'tsp.'\n      },\n      tablespoons: {\n        value: 14.787,\n        abbrev: 'tbsp.'\n      },\n      fluidOunces: {\n        value: 29.575,\n        abbrev: 'fl. oz.'\n      }\n    }\n  }\n};\nexport class Ingredient {\n  constructor(data, system, unit) {\n    this.name = data.name;\n    this.state = {\n      system: system,\n      unit: unit\n    };\n    this.weight = {\n      value: false,\n      default: false\n    };\n    this.volume = {\n      value: false,\n      default: false\n    };\n    Object.assign(this, data);\n  }\n\n  default(state) {\n    return this.convert(this[state.unit].default);\n  }\n\n  convert(unit, state) {\n    const relativeValue = relativeValues[state.unit][state.system][unit].value;\n    return this[state.unit].value / relativeValue;\n  }\n\n}","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/utils/Ingredient.js"],"names":["relativeValues","metric","weight","milligrams","value","abbrev","grams","default","kilograms","volume","milliliters","liters","us","pounds","ounces","cups","quarts","gallons","teaspoons","tablespoons","fluidOunces","Ingredient","constructor","data","system","unit","name","state","Object","assign","convert","relativeValue"],"mappings":"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","sourcesContent":["export const relativeValues = {\n    metric: {\n        weight: {\n            milligrams: { value: .001, abbrev: 'mg' },\n            grams: { value: 1, abbrev: 'g', default: true },\n            kilograms:{ value: 1000, abbrev: 'k' } \n        },\n        volume: {\n            milliliters: { value: 1, abbrev: 'mL', default: true },\n            liters: { value: 1000, abbrev: 'L' }\n        }\n    },\n    us: {\n        weight: {\n            pounds: { value: 454, abbrev: 'lbs.' },\n            ounces: { value: 28, abbrev: 'oz.', default: true }\n        },\n        volume: {\n            cups: { value: 240, abbrev: 'C', default: true },\n            quarts: { value: 946, abbrev: 'Q' },\n            gallons: { value: 3785, abbrev: 'G' },\n            teaspoons: { value: 4.929, abbrev: 'tsp.' },\n            tablespoons: { value: 14.787, abbrev: 'tbsp.' },\n            fluidOunces: { value: 29.575, abbrev: 'fl. oz.' }\n        }\n    }\n}\n\nexport class Ingredient {\n    constructor(data, system, unit) {\n        this.name = data.name;\n        this.state = { system: system, unit: unit };\n        this.weight = {\n            value: false,\n            default: false\n        }\n        this.volume = {\n            value: false,\n            default: false\n        }\n        Object.assign(this, data);\n    }\n\n    default(state) {\n        return this.convert(this[state.unit].default);\n    }\n\n    convert(unit, state) {\n        const relativeValue = relativeValues[state.unit][state.system][unit].value;\n        return this[state.unit].value / relativeValue;\n    }\n}"]},"metadata":{},"sourceType":"module"}