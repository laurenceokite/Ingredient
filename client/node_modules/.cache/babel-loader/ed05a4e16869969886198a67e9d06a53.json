{"ast":null,"code":"export function convertMeasure(_ref, _ref2, measurement) {\n  let [current] = _ref;\n  let [requested] = _ref2;\n\n  const log = function () {\n    return console.log(...arguments);\n  };\n\n  const curSystem = current[0];\n  const reqSystem = requested[0];\n  const curSubmeasure = current[1];\n  const reqSubmeasure = requested[1];\n  const systemValues = {\n    weight_metric: {\n      grams: 1,\n      milligrams: .001,\n      kilograms: 100\n    },\n    metric_volume: {\n      milliliters: 1,\n      liters: 1000\n    },\n    us_volume: {\n      cups: 240,\n      quarts: 946,\n      gallons: 3785,\n      fluid_ounces: 29.574,\n      tablespoons: 14.787,\n      teaspoon: 4.929\n    }\n  };\n  const curSubmeasureValue = systemValues[curSystem][curSubmeasure];\n  const reqSubmeasureValue = systemValues[reqSystem][reqSubmeasure];\n\n  if (!reqSubmeasure) {\n    const newPossibleRequested = {};\n    Object.values(systemValues[reqSystem]).forEach(val => {\n      const difference = curSubmeasureValue - val;\n      log(difference);\n    });\n  }\n\n  const newMeasurement = curSubmeasureValue / reqSubmeasureValue * measurement;\n  return {\n    newMeasurement: newMeasurement,\n    newSubmeasure: reqSubmeasure\n  };\n}","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/utils/helpers.js"],"names":["convertMeasure","measurement","current","requested","log","console","curSystem","reqSystem","curSubmeasure","reqSubmeasure","systemValues","weight_metric","grams","milligrams","kilograms","metric_volume","milliliters","liters","us_volume","cups","quarts","gallons","fluid_ounces","tablespoons","teaspoon","curSubmeasureValue","reqSubmeasureValue","newPossibleRequested","Object","values","forEach","val","difference","newMeasurement","newSubmeasure"],"mappings":"AAAA,OAAO,SAASA,cAAT,cAAgDC,WAAhD,EAA6D;AAAA,MAArC,CAACC,OAAD,CAAqC;AAAA,MAA1B,CAACC,SAAD,CAA0B;;AAChE,QAAMC,GAAG,GAAG;AAAA,WAAaC,OAAO,CAACD,GAAR,CAAY,YAAZ,CAAb;AAAA,GAAZ;;AAEA,QAAME,SAAS,GAAGJ,OAAO,CAAC,CAAD,CAAzB;AACA,QAAMK,SAAS,GAAGJ,SAAS,CAAC,CAAD,CAA3B;AACA,QAAMK,aAAa,GAAGN,OAAO,CAAC,CAAD,CAA7B;AACA,QAAMO,aAAa,GAAGN,SAAS,CAAC,CAAD,CAA/B;AAEA,QAAMO,YAAY,GAAG;AACjBC,IAAAA,aAAa,EAAE;AACXC,MAAAA,KAAK,EAAE,CADI;AAEXC,MAAAA,UAAU,EAAE,IAFD;AAGXC,MAAAA,SAAS,EAAE;AAHA,KADE;AAOjBC,IAAAA,aAAa,EAAE;AACXC,MAAAA,WAAW,EAAE,CADF;AAEXC,MAAAA,MAAM,EAAE;AAFG,KAPE;AAYjBC,IAAAA,SAAS,EAAE;AACPC,MAAAA,IAAI,EAAE,GADC;AAEPC,MAAAA,MAAM,EAAE,GAFD;AAGPC,MAAAA,OAAO,EAAE,IAHF;AAIPC,MAAAA,YAAY,EAAE,MAJP;AAKPC,MAAAA,WAAW,EAAE,MALN;AAMPC,MAAAA,QAAQ,EAAE;AANH;AAZM,GAArB;AAuBA,QAAMC,kBAAkB,GAAGf,YAAY,CAACJ,SAAD,CAAZ,CAAwBE,aAAxB,CAA3B;AACA,QAAMkB,kBAAkB,GAAGhB,YAAY,CAACH,SAAD,CAAZ,CAAwBE,aAAxB,CAA3B;;AAEA,MAAI,CAACA,aAAL,EAAoB;AAChB,UAAMkB,oBAAoB,GAAG,EAA7B;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAcnB,YAAY,CAACH,SAAD,CAA1B,EAAuCuB,OAAvC,CAA+CC,GAAG,IAAI;AAClD,YAAMC,UAAU,GAAGP,kBAAkB,GAAGM,GAAxC;AACA3B,MAAAA,GAAG,CAAC4B,UAAD,CAAH;AACH,KAHD;AAIH;;AAED,QAAMC,cAAc,GAAGR,kBAAkB,GAAGC,kBAArB,GAA0CzB,WAAjE;AAEA,SAAO;AACHgC,IAAAA,cAAc,EAAEA,cADb;AAEHC,IAAAA,aAAa,EAAEzB;AAFZ,GAAP;AAKH","sourcesContent":["export function convertMeasure([current], [requested], measurement) {    \n    const log = (...args) => console.log(...args);\n\n    const curSystem = current[0];\n    const reqSystem = requested[0];\n    const curSubmeasure = current[1];\n    const reqSubmeasure = requested[1];\n    \n    const systemValues = {\n        weight_metric: {\n            grams: 1,\n            milligrams: .001,\n            kilograms: 100\n        },\n\n        metric_volume: {\n            milliliters: 1,\n            liters: 1000\n        },\n\n        us_volume: {\n            cups: 240,\n            quarts: 946,\n            gallons: 3785,\n            fluid_ounces: 29.574,\n            tablespoons: 14.787,\n            teaspoon: 4.929\n        }\n\n    }\n\n    const curSubmeasureValue = systemValues[curSystem][curSubmeasure]\n    const reqSubmeasureValue = systemValues[reqSystem][reqSubmeasure]\n\n    if (!reqSubmeasure) {\n        const newPossibleRequested = {};\n        Object.values(systemValues[reqSystem]).forEach(val => {\n            const difference = curSubmeasureValue - val\n            log(difference);\n        });\n    }\n    \n    const newMeasurement = curSubmeasureValue / reqSubmeasureValue * measurement\n    \n    return { \n        newMeasurement: newMeasurement,\n        newSubmeasure: reqSubmeasure\n    }\n    \n}\n\n"]},"metadata":{},"sourceType":"module"}