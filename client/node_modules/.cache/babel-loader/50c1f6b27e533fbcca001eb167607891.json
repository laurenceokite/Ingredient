{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ViewEditRecipe() {\n  _s();\n\n  const [state] = useStoreContext();\n  const [addIngredientState, setAddIngredientState] = useState({\n    ingredient: '',\n    amount: ''\n  });\n  const [recipeState, setRecipeState] = useState({\n    recipe: '',\n    ingredients: []\n  });\n  const measure = `${state.measureType}-${state.measureSystem}`; // Push new ingredient to 'ingredients' array\n\n  function addIngredient(event) {\n    event.preventDefault();\n    addIngredientState.ingredient = `${addIngredientState.ingredient}`;\n    setRecipeState({ //Add ingredient to array of objects in recipeState\n      ...recipeState,\n      ingredients: [...recipeState.ingredients, {\n        ingredient: addIngredientState.ingredient,\n        amount: {\n          [measure]: addIngredientState.amount\n        }\n      }]\n    });\n    setAddIngredientState({\n      ingredient: '',\n      amount: ''\n    });\n    console.log(recipeState.ingredients, addIngredientState);\n  }\n\n  ; // Each time text is entered to input, update formState\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setAddIngredientState({ ...addIngredientState,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ToggleMeasure, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: recipeState.ingredients.map(ingredient => console.log('there are ingredients'))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addIngredient,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Ingredient\",\n          id: \"ingredientNameInput\",\n          name: \"ingredient\",\n          value: addIngredientState.ingredient,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Amount\",\n          id: \"ingredientAmtInput\",\n          name: \"amount\",\n          onChange: handleChange,\n          value: addIngredientState.amount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"measurementSelect\",\n          children: [measure === 'volume-imperial' && /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"imperialVolumeSelect\",\n            defaultValue: \"cups\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gallons\",\n              children: \"G\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"quarts\",\n              children: \"Q\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cups\",\n              children: \"C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"tablespoons\",\n              children: \"T\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"teaspoons\",\n              children: \"t\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"fluid ounces\",\n              children: \"fl. oz.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), measure === 'weight-imperial' && /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"imperialWeightSelect\",\n            defaultValue: \"ounces\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"pounds\",\n              children: \"lbs.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ounces\",\n              children: \"oz.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), measure === 'volume-metric' && /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"metricVolumeSelect\",\n            defaultValue: \"milliliters\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"liters\",\n              children: \"L\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"deciliters\",\n              children: \"dL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"milliliters\",\n              children: \"mL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this), measure === 'weight-metric' && /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"metricWeightSelect\",\n            defaultValue: \"grams\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"kilograms\",\n              children: \"kg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"grams\",\n              children: \"g\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"milligrams\",\n              children: \"mg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewEditRecipe, \"ZiTnhqhWLjQOU0k/BMz38hpu5A0=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ViewEditRecipe;\n;\nexport default ViewEditRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewEditRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js"],"names":["React","useState","ToggleMeasure","useStoreContext","ViewEditRecipe","state","addIngredientState","setAddIngredientState","ingredient","amount","recipeState","setRecipeState","recipe","ingredients","measure","measureType","measureSystem","addIngredient","event","preventDefault","console","log","handleChange","name","value","target","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\nfunction ViewEditRecipe() {\n    const [ state ] = useStoreContext();\n    const [addIngredientState, setAddIngredientState] = useState({ \n        ingredient: '', amount: ''\n    });\n    const [recipeState, setRecipeState] = useState({ \n        recipe: '', \n        ingredients: []\n    });\n\n\n    const measure = `${state.measureType}-${state.measureSystem}`;\n    \n    // Push new ingredient to 'ingredients' array\n    function addIngredient(event) {\n        event.preventDefault();\n        addIngredientState.ingredient = `${addIngredientState.ingredient}`\n\n        setRecipeState({\n            //Add ingredient to array of objects in recipeState\n            ...recipeState,\n            ingredients: [...recipeState.ingredients, {\n                ingredient: addIngredientState.ingredient,\n                    amount: {\n                        [measure]: addIngredientState.amount\n                    }   \n            }]\n        });\n\n        \n        setAddIngredientState({\n            ingredient: '',\n            amount: ''\n        });\n\n        console.log(recipeState.ingredients, addIngredientState);\n    };\n\n    // Each time text is entered to input, update formState\n    const handleChange = event => {\n        const { name, value } = event.target;\n        setAddIngredientState({\n          ...addIngredientState,\n          [name]: value\n        });\n    };\n\n    return(\n        <div>\n            {/* Change measurement type here */}\n            <ToggleMeasure/>\n\n            {/* Map array of ingredients */}\n            <div>\n                    {recipeState.ingredients.map(ingredient => (console.log('there are ingredients')))}\n            </div>\n\n            {/* Ingredient Input */}\n            <form onSubmit={addIngredient}>\n                <div>\n                    <input type=\"text\" \n                        placeholder=\"Ingredient\" \n                        id='ingredientNameInput'\n                        name='ingredient'\n                        value={addIngredientState.ingredient} \n                        onChange={handleChange}/>\n                    <input type=\"text\" \n                        placeholder=\"Amount\"\n                        id='ingredientAmtInput'\n                        name='amount'\n                        onChange={handleChange}\n                        value={addIngredientState.amount}/>\n\n                    {/* Measurement Select, Displays each set of options conditionally based on state */}\n                    {/* if Imperial */}\n                    <div id='measurementSelect'>\n                        {(measure === 'volume-imperial') && (\n                        <select className=\"imperialVolumeSelect\" defaultValue=\"cups\">\n                            <option value=\"gallons\">G</option>\n                            <option value=\"quarts\">Q</option>\n                            <option value=\"cups\">C</option>\n                            <option value=\"tablespoons\">T</option>\n                            <option value=\"teaspoons\">t</option>\n                            <option value=\"fluid ounces\">fl. oz.</option>\n                        </select>\n                        )}\n                        \n                        {(measure === 'weight-imperial') && (\n                        <select className=\"imperialWeightSelect\" defaultValue=\"ounces\">\n                            <option value=\"pounds\">lbs.</option>\n                            <option value=\"ounces\">oz.</option>\n                        </select>\n                        )}\n                        {/* if Metric */}\n                        {(measure === 'volume-metric') && (\n                        <select className=\"metricVolumeSelect\" defaultValue=\"milliliters\">\n                            <option value=\"liters\">L</option>\n                            <option value=\"deciliters\">dL</option>\n                            <option value=\"milliliters\">mL</option>\n                        </select>\n                        )}\n\n                        {(measure === 'weight-metric') && (\n                        <select className=\"metricWeightSelect\" defaultValue=\"grams\">\n                            <option value=\"kilograms\">kg</option>\n                            <option value=\"grams\">g</option>\n                            <option value=\"milligrams\">mg</option>\n                        </select>\n                        )}\n                    </div> \n                </div>\n                {/* Add Ingredient Button */}\n                <div>\n                    <input type=\"submit\" value=\"+\"></input>\n                </div>\n            </form>\n        </div>\n    )\n};\n\nexport default ViewEditRecipe;"]},"metadata":{},"sourceType":"module"}