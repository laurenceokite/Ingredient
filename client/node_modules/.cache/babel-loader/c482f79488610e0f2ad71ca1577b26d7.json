{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { Ingredient, relativeValues } from \"../../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RenderIngredient(_ref) {\n  _s();\n\n  let {\n    data,\n    currentUnits\n  } = _ref;\n  const [state] = useStoreContext();\n  const {\n    globalUnit: unit,\n    globalSystem: system\n  } = state;\n  const ingredient = new Ingredient(data, system, unit);\n  console.log(ingredient);\n  const name = ingredient.name;\n  const defaultUnit = ingredient[unit].default;\n  const [localUnit, setLocalUnit] = useState(defaultUnit);\n\n  const returnMeasurement = () => {\n    const stateContainsDefault = () => {\n      for (const [key, value] of Object.entries(relativeValues[system][unit])) {\n        if (key === defaultUnit) return true;\n      }\n    };\n\n    if (localUnit !== defaultUnit) if (stateContainsDefault()) {\n      const string = ingredient.default(unit);\n      return string;\n    }\n\n    if (defaultUnit) {}\n  }; //convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\n\n\n  const convertMeasurementToString = measurement => {\n    if (measurement) {\n      //if measurement is in pounds send to displayPounds function for further formatting\n      if (measurement) {\n        return displayPounds(measurement);\n      } else {\n        return (Math.round(measurement * 100) / 100).toLocaleString();\n      }\n    } else {\n      //if no measurement\n      return false;\n    }\n  }; //format pounds for display as string\n\n\n  const displayPounds = measurement => {\n    const pounds = parseInt(measurement);\n    const remainder = measurement % 1;\n    const ounces = (remainder * 16).toFixed(1);\n\n    if (remainder) {\n      return `${pounds}: ${ounces}`;\n    } else if (measurement) {\n      return measurement;\n    } else {\n      return false;\n    }\n  };\n\n  const handleUnitChange = event => {\n    const value = event.target.value;\n    setLocalUnit(value);\n  };\n\n  const measurement = returnMeasurement();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: measurement ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: measurement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"No Amt.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"unitSelect\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleUnitChange,\n        name: \"unit\",\n        children: Object.entries(currentUnits).map(_ref2 => {\n          let [key, obj] = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": obj.value,\n            value: key,\n            selected: obj.selected,\n            children: obj.abbrev\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RenderIngredient, \"+5qxH+kcOif0gVV7/TUxhztcbcI=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = RenderIngredient;\nexport default RenderIngredient;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderIngredient\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js"],"names":["React","useState","useEffect","useStoreContext","Ingredient","relativeValues","RenderIngredient","data","currentUnits","state","globalUnit","unit","globalSystem","system","ingredient","console","log","name","defaultUnit","default","localUnit","setLocalUnit","returnMeasurement","stateContainsDefault","key","value","Object","entries","string","convertMeasurementToString","measurement","displayPounds","Math","round","toLocaleString","pounds","parseInt","remainder","ounces","toFixed","handleUnitChange","event","target","map","obj","selected","abbrev"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { Ingredient, relativeValues } from \"../../api\";\n\n\nfunction RenderIngredient({ data, currentUnits }) {\n    const [ state ] = useStoreContext();\n    const { globalUnit: unit, globalSystem: system } = state;\n    \n    const ingredient = new Ingredient(data, system, unit);\n    console.log(ingredient);\n    const name = ingredient.name;\n    const defaultUnit = ingredient[unit].default;\n    \n    const [localUnit, setLocalUnit] = useState(defaultUnit);\n\n    const returnMeasurement = () => {\n        const stateContainsDefault = () => {for (const [key, value] of Object.entries(relativeValues[system][unit])) {\n            if (key === defaultUnit) return true;\n        }};\n\n        if (localUnit !== defaultUnit) \n\n        if (stateContainsDefault()) {\n            const string = ingredient.default(unit);\n            return string;\n        }\n\n        if (defaultUnit) {\n\n        }\n\n    }\n\n    //convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\n    const convertMeasurementToString = (measurement) => {\n        if (measurement) {\n            //if measurement is in pounds send to displayPounds function for further formatting\n            if (measurement) {\n                return displayPounds(measurement);\n            }\n            else {\n                return (Math.round(measurement*100)/100).toLocaleString();\n            }\n        }\n        else {\n            //if no measurement\n            return false;\n        }\n    }\n\n    //format pounds for display as string\n    const displayPounds = (measurement) => {\n        const pounds = parseInt(measurement);\n        const remainder = measurement % 1;\n        const ounces = (remainder*16).toFixed(1);\n        \n        if (remainder) {\n            return `${pounds}: ${ounces}`;\n        }\n        else if (measurement) {\n            return measurement;\n        } \n        else {\n            return false;\n        }\n    }\n\n    const handleUnitChange = event => {\n        const value = event.target.value;\n        setLocalUnit(value);\n    }\n\n    const measurement = returnMeasurement();\n\n    return(\n        <div>\n            <div>{name}</div>\n            <div>\n                {  measurement\n                    ? (<div>{measurement}</div>)\n                    : (<form>\n                        <input type=\"text\" placeholder=\"No Amt.\"/>\n                    </form>)\n                }        \n            </div>\n            <div id='unitSelect'>\n                <select onChange={handleUnitChange} name='unit'>\n                    {Object.entries(currentUnits).map(([key, obj]) => (\n                        <option data-factor={obj.value} \n                            value={key} \n                            key={key} \n                            selected={obj.selected}>{obj.abbrev}</option>\n                        ))}\n                </select>\n            </div>\n        </div>\n    )\n}\n\nexport default RenderIngredient;"]},"metadata":{},"sourceType":"module"}