{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ViewEditRecipe() {\n  _s();\n\n  const [state, dispatch] = useStoreContext();\n  const [addIngredientState, setAddIngredientState] = useState({\n    //This is how data will be structured in each ingredient\n    ingredient: '',\n    amount: ''\n  }); //recipe name and array of ingredients\n\n  const [recipeState, setRecipeState] = useState({\n    recipe: '',\n    ingredients: []\n  }); //'measSystem' tells us what measurement to display based on which options are selected\n\n  const measSystem = `${state.measurementSystem}_${state.measurementType}`;\n  const [previousMeasSystem, setPreviousMeasSystem] = useState(measSystem); // Push new ingredient to 'ingredients' array\n\n  function addIngredient(event) {\n    event.preventDefault(); //convert value string to floating-point number, formatted to six decimal points\n\n    const valueParsed = parseFloat(addIngredientState.amounts[measSystem].value).toFixed(6); //Update addIngredientState\n\n    setAddIngredientState({ ...addIngredientState,\n      amount: { ...addIngredientState.amounts,\n        [measSystem]: {\n          value: valueParsed,\n          ...addIngredientState.amounts[measSystem]\n        }\n      }\n    });\n    setRecipeState({ //Add ingredient to array of objects in recipeState\n      ...recipeState,\n      ingredients: [...recipeState.ingredients, {\n        ingredient: addIngredientState.ingredient,\n        amounts: { ...addIngredientState.amounts\n        }\n      }]\n    }); // Reset ingredient input form to original state\n\n    setAddIngredientState({\n      ingredient: '',\n      amounts: {\n        metric_weight: {\n          value: '',\n          submeasure: 'grams'\n        },\n        us_weight: {\n          value: '',\n          submeasure: 'ounces'\n        },\n        metric_volume: {\n          value: '',\n          submeasure: 'milliliters'\n        },\n        us_volume: {\n          value: '',\n          submeasure: 'cups'\n        }\n      }\n    });\n  }\n\n  ; // Each time text is entered to input, update formState\n  //Ingredient Input\n\n  const handleNameChange = event => {\n    const {\n      value\n    } = event.target;\n    setAddIngredientState({ ...addIngredientState,\n      ingredient: value\n    });\n  }; //Amount Input\n\n\n  const handleAmountChange = event => {\n    const {\n      value\n    } = event.target;\n    const submeasure = document.getElementById('measurementSelect').firstChild.value;\n    setAddIngredientState({ ...addIngredientState,\n      amounts: { ...addIngredientState.amounts,\n        [measSystem]: {\n          value: value,\n          submeasure: submeasure\n        }\n      }\n    });\n  }; //If global measure system has been changed, clear state and move amount to new measure system\n\n\n  useEffect(() => {\n    const submeasure = document.getElementById('measurementSelect').firstChild.value;\n    const ingredientAmtInput = document.getElementById('ingredientAmtInput').value;\n\n    if (measSystem !== previousMeasSystem) {\n      if (ingredientAmtInput) {\n        const previousAmount = addIngredientState.amounts[previousMeasSystem].value;\n        setAddIngredientState({ ...addIngredientState,\n          amount: { ...addIngredientState.amount,\n            [previousMeasSystem]: {\n              value: '',\n              submeasure: addIngredientState.amount[previousMeasSystem].submeasure\n            },\n            [measSystem]: {\n              value: previousAmount,\n              submeasure: submeasure\n            }\n          }\n        });\n        setPreviousMeasSystem(measSystem);\n      } else {\n        setPreviousMeasSystem(measSystem);\n      }\n    }\n  }, [previousMeasSystem, measSystem, addIngredientState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ToggleMeasure, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: recipeState.ingredients.map(ingredient => /*#__PURE__*/_jsxDEV(RenderIngredient, {\n        name: ingredient.ingredient,\n        amounts: ingredient.amounts,\n        measSystem: measSystem\n      }, ingredient.ingredient, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addIngredient,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Ingredient\",\n          id: \"ingredientNameInput\",\n          name: \"ingredient\",\n          value: addIngredientState.ingredient,\n          autoComplete: \"off\",\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Amount\",\n          id: \"ingredientAmtInput\",\n          name: \"amount\",\n          value: addIngredientState.amounts[measSystem].value,\n          onChange: handleAmountChange,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"measurementSelect\",\n        children: [measSystem === 'us_volume' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"imperialVolumeSelect\",\n          defaultValue: \"cups\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gallons\",\n            children: \"G\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"quarts\",\n            children: \"Q\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"cups\",\n            children: \"C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"tablespoons\",\n            children: \"T\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"teaspoons\",\n            children: \"t\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"fluid_ounces\",\n            children: \"fl. oz.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this), measSystem === 'us_weight' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"imperialWeightSelect\",\n          defaultValue: \"ounces\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"pounds\",\n            children: \"lbs.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ounces\",\n            children: \"oz.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this), measSystem === 'metric_volume' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"metricVolumeSelect\",\n          defaultValue: \"milliliters\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"liters\",\n            children: \"L\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"milliliters\",\n            children: \"mL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }, this), measSystem === 'metric_weight' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"metricWeightSelect\",\n          defaultValue: \"grams\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"kilograms\",\n            children: \"kg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"grams\",\n            children: \"g\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"milligrams\",\n            children: \"mg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewEditRecipe, \"AFglDvpvUpCXWH5Lexq1hCa1GmQ=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ViewEditRecipe;\n;\nexport default ViewEditRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewEditRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js"],"names":["React","useEffect","useState","ToggleMeasure","RenderIngredient","useStoreContext","ViewEditRecipe","state","dispatch","addIngredientState","setAddIngredientState","ingredient","amount","recipeState","setRecipeState","recipe","ingredients","measSystem","measurementSystem","measurementType","previousMeasSystem","setPreviousMeasSystem","addIngredient","event","preventDefault","valueParsed","parseFloat","amounts","value","toFixed","metric_weight","submeasure","us_weight","metric_volume","us_volume","handleNameChange","target","handleAmountChange","document","getElementById","firstChild","ingredientAmtInput","previousAmount","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\nfunction ViewEditRecipe() {\n    const [ state, dispatch ] = useStoreContext();\n\n    const [addIngredientState, setAddIngredientState] = useState({ \n        //This is how data will be structured in each ingredient\n        ingredient: '',\n        amount: ''\n    });\n\n    //recipe name and array of ingredients\n    const [recipeState, setRecipeState] = useState({ \n        recipe: '', \n        ingredients: []\n    });\n\n    //'measSystem' tells us what measurement to display based on which options are selected\n    const measSystem = `${state.measurementSystem}_${state.measurementType}`;\n    const [previousMeasSystem, setPreviousMeasSystem] = useState(measSystem);\n    \n\n\n    // Push new ingredient to 'ingredients' array\n    function addIngredient(event) {\n        event.preventDefault();\n        //convert value string to floating-point number, formatted to six decimal points\n        const valueParsed = parseFloat(addIngredientState.amounts[measSystem].value).toFixed(6);\n\n        //Update addIngredientState\n        setAddIngredientState({\n            ...addIngredientState,\n            amount: {\n                ...addIngredientState.amounts,\n                [measSystem]:\n                {\n                    value: valueParsed,\n                    ...addIngredientState.amounts[measSystem]\n                }\n            }\n        });\n\n        setRecipeState({\n            //Add ingredient to array of objects in recipeState\n            ...recipeState,\n            ingredients: [...recipeState.ingredients, {\n                ingredient: addIngredientState.ingredient,\n                    amounts: {\n                        ...addIngredientState.amounts\n                    }  \n            }]\n        });\n\n        // Reset ingredient input form to original state\n        setAddIngredientState({\n            ingredient: '',\n            amounts: {\n                metric_weight:\n                {\n                    value: '',\n                    submeasure: 'grams'\n                },\n                us_weight:\n                {\n                    value: '',\n                    submeasure: 'ounces'\n                },\n                metric_volume:\n                {\n                    value: '',\n                    submeasure: 'milliliters'\n                },\n                us_volume:\n                {\n                    value: '',\n                    submeasure: 'cups'\n                }\n            }\n        });\n    };\n\n    // Each time text is entered to input, update formState\n    //Ingredient Input\n    const handleNameChange = event => {\n        const { value } = event.target;\n        setAddIngredientState({\n          ...addIngredientState,\n          ingredient: value\n        });\n    };\n    //Amount Input\n    const handleAmountChange = event => {\n        const { value } = event.target;\n        const submeasure = document.getElementById('measurementSelect').firstChild.value;\n        \n        setAddIngredientState({\n            ...addIngredientState,\n            amounts: {\n                ...addIngredientState.amounts,\n                [measSystem]:\n                {\n                    value: value,\n                    submeasure: submeasure\n                }\n            }\n        });\n    };\n\n    //If global measure system has been changed, clear state and move amount to new measure system\n    useEffect(()=>{\n        const submeasure = document.getElementById('measurementSelect').firstChild.value;\n        const ingredientAmtInput = document.getElementById('ingredientAmtInput').value;\n\n        if (measSystem !== previousMeasSystem) {\n            if (ingredientAmtInput) {\n                const previousAmount = addIngredientState.amounts[previousMeasSystem].value;\n                setAddIngredientState({\n                    ...addIngredientState,\n                    amount: {\n                        ...addIngredientState.amount,\n                        [previousMeasSystem]:\n                        {\n                            value: '',\n                            submeasure: addIngredientState.amount[previousMeasSystem].submeasure\n                        },\n                        [measSystem]:\n                        {\n                            value: previousAmount,\n                            submeasure: submeasure\n                        }\n                    }\n                });\n                setPreviousMeasSystem(measSystem);\n            } else {\n                setPreviousMeasSystem(measSystem);\n            }\n        }\n\n    }, [previousMeasSystem, measSystem, addIngredientState]);\n\n    return(\n        <div>\n            {/* Change measurement type here */}\n            <ToggleMeasure/>\n\n            {/* Map array of ingredients */}\n            <div>\n                    {recipeState.ingredients.map(ingredient => (\n                        <RenderIngredient key={ingredient.ingredient} name={ingredient.ingredient} amounts={ingredient.amounts} measSystem={measSystem}/>\n                    ))}\n            </div>\n\n            {/* Ingredient Input */}\n                <form onSubmit={addIngredient}>\n                    <div>\n                        <input type=\"text\" \n                            placeholder=\"Ingredient\" \n                            id='ingredientNameInput'\n                            name='ingredient'\n                            value={addIngredientState.ingredient}\n                            autoComplete=\"off\" \n                            onChange={handleNameChange}/>\n\n                        <input type=\"number\" \n                            placeholder=\"Amount\"\n                            id='ingredientAmtInput'\n                            name='amount'\n                            value={addIngredientState.amounts[measSystem].value}\n                            onChange={handleAmountChange}\n                            autoComplete=\"off\"/>\n                    </div>\n\n                    {/* Measurement Select, Displays each set of options conditionally based on state */}\n\n                    {/* if Imperial */}\n                    <div id='measurementSelect'>\n                        {(measSystem === 'us_volume') && (\n                        <select className=\"imperialVolumeSelect\" defaultValue='cups'>\n                            <option value=\"gallons\">G</option>\n                            <option value=\"quarts\">Q</option>\n                            <option value=\"cups\">C</option>\n                            <option value=\"tablespoons\">T</option>\n                            <option value=\"teaspoons\">t</option>\n                            <option value=\"fluid_ounces\">fl. oz.</option>\n                        </select>\n                        )}\n                        \n                        {(measSystem === 'us_weight') && (\n                        <select className=\"imperialWeightSelect\" defaultValue=\"ounces\">\n                            <option value=\"pounds\">lbs.</option>\n                            <option value=\"ounces\">oz.</option>\n                        </select>\n                        )}\n                        {/* if Metric */}\n                        {(measSystem === 'metric_volume') && (\n                        <select className=\"metricVolumeSelect\" defaultValue=\"milliliters\">\n                            <option value=\"liters\">L</option>\n                            <option value=\"milliliters\">mL</option>\n                        </select>\n                        )}\n\n                        {(measSystem === 'metric_weight') && (\n                        <select className=\"metricWeightSelect\" defaultValue=\"grams\">\n                            <option value=\"kilograms\">kg</option>\n                            <option value=\"grams\">g</option>\n                            <option value=\"milligrams\">mg</option>\n                        </select>\n                        )}\n                    </div> \n                    {/* Add Ingredient Button */}\n                    <div>\n                        <input type=\"submit\" value=\"+\"></input>\n                    </div>\n                </form>\n        </div>\n    )\n};\n\nexport default ViewEditRecipe;"]},"metadata":{},"sourceType":"module"}