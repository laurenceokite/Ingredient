{"ast":null,"code":"import { Ingredient } from \"./Ingredient\";\nimport { relativeValues } from \"./relativeValues\"; //convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\n\nconst convertMeasurementToString = measurement => {\n  if (measurement) {\n    //if measurement is in pounds send to displayPounds function for further formatting\n    if (measurement) {\n      return displayPounds(measurement);\n    } else {\n      return (Math.round(measurement * 100) / 100).toLocaleString();\n    }\n  } else {\n    //if no measurement\n    return false;\n  }\n}; //format pounds for display as string\n\n\nconst displayPounds = measurement => {\n  const pounds = parseInt(measurement);\n  const remainder = measurement % 1;\n  const ounces = (remainder * 16).toFixed(1);\n\n  if (remainder) {\n    return `${pounds}: ${ounces}`;\n  } else if (measurement) {\n    return measurement;\n  } else {\n    return false;\n  }\n};\n\nconst returnIngredient = (data, system, unit, requested, autoconvert) => {\n  const ingredient = new Ingredient(data, system, unit);\n  const name = ingredient.name;\n  const defaultUnit = ingredient[unit].default;\n\n  if (requested !== defaultUnit) {\n    if (unitHasMeasurement) {}\n\n    if (autoconvert) {}\n  }\n};\n\nexport default returnIngredient;","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/returnIngredient.js"],"names":["Ingredient","relativeValues","convertMeasurementToString","measurement","displayPounds","Math","round","toLocaleString","pounds","parseInt","remainder","ounces","toFixed","returnIngredient","data","system","unit","requested","autoconvert","ingredient","name","defaultUnit","default","unitHasMeasurement"],"mappings":"AAAA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASC,cAAT,QAA+B,kBAA/B,C,CAEA;;AACA,MAAMC,0BAA0B,GAAIC,WAAD,IAAiB;AAChD,MAAIA,WAAJ,EAAiB;AACb;AACA,QAAIA,WAAJ,EAAiB;AACb,aAAOC,aAAa,CAACD,WAAD,CAApB;AACH,KAFD,MAGK;AACD,aAAO,CAACE,IAAI,CAACC,KAAL,CAAWH,WAAW,GAAC,GAAvB,IAA4B,GAA7B,EAAkCI,cAAlC,EAAP;AACH;AACJ,GARD,MASK;AACD;AACA,WAAO,KAAP;AACH;AACJ,CAdD,C,CAgBA;;;AACA,MAAMH,aAAa,GAAID,WAAD,IAAiB;AACnC,QAAMK,MAAM,GAAGC,QAAQ,CAACN,WAAD,CAAvB;AACA,QAAMO,SAAS,GAAGP,WAAW,GAAG,CAAhC;AACA,QAAMQ,MAAM,GAAG,CAACD,SAAS,GAAC,EAAX,EAAeE,OAAf,CAAuB,CAAvB,CAAf;;AAEA,MAAIF,SAAJ,EAAe;AACX,WAAQ,GAAEF,MAAO,KAAIG,MAAO,EAA5B;AACH,GAFD,MAGK,IAAIR,WAAJ,EAAiB;AAClB,WAAOA,WAAP;AACH,GAFI,MAGA;AACD,WAAO,KAAP;AACH;AACJ,CAdD;;AAgBA,MAAMU,gBAAgB,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,IAAf,EAAqBC,SAArB,EAAgCC,WAAhC,KAAgD;AACrE,QAAMC,UAAU,GAAG,IAAInB,UAAJ,CAAec,IAAf,EAAqBC,MAArB,EAA6BC,IAA7B,CAAnB;AACA,QAAMI,IAAI,GAAGD,UAAU,CAACC,IAAxB;AACA,QAAMC,WAAW,GAAGF,UAAU,CAACH,IAAD,CAAV,CAAiBM,OAArC;;AAEA,MAAIL,SAAS,KAAKI,WAAlB,EAA+B;AAC3B,QAAIE,kBAAJ,EAAwB,CAEvB;;AAED,QAAIL,WAAJ,EAAiB,CAEhB;AACJ;AAIJ,CAjBD;;AAmBA,eAAeL,gBAAf","sourcesContent":["import { Ingredient } from \"./Ingredient\";\nimport { relativeValues } from \"./relativeValues\";\n\n//convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\nconst convertMeasurementToString = (measurement) => {\n    if (measurement) {\n        //if measurement is in pounds send to displayPounds function for further formatting\n        if (measurement) {\n            return displayPounds(measurement);\n        }\n        else {\n            return (Math.round(measurement*100)/100).toLocaleString();\n        }\n    }\n    else {\n        //if no measurement\n        return false;\n    }\n}\n\n//format pounds for display as string\nconst displayPounds = (measurement) => {\n    const pounds = parseInt(measurement);\n    const remainder = measurement % 1;\n    const ounces = (remainder*16).toFixed(1);\n    \n    if (remainder) {\n        return `${pounds}: ${ounces}`;\n    }\n    else if (measurement) {\n        return measurement;\n    } \n    else {\n        return false;\n    }\n}\n\nconst returnIngredient = (data, system, unit, requested, autoconvert) => {\n    const ingredient = new Ingredient(data, system, unit);\n    const name = ingredient.name;\n    const defaultUnit = ingredient[unit].default;\n\n    if (requested !== defaultUnit) {\n        if (unitHasMeasurement) {\n\n        }\n\n        if (autoconvert) {\n\n        }\n    }\n\n    \n\n}\n\nexport default returnIngredient;"]},"metadata":{},"sourceType":"module"}