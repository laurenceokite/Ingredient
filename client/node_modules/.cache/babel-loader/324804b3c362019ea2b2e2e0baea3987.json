{"ast":null,"code":"export function convertSubMeasure(current, requested, measurement) {\n  const conversion = `${current}->${requested}`;\n  const measurementFloat = parseFloat(measurement).toFixed(3);\n\n  switch (conversion) {\n    //metric weight\n    case 'grams->milligrams':\n      return measurementFloat * 100;\n\n    case 'grams->kilograms':\n      return measurementFloat / 1000;\n\n    case 'milligrams->grams':\n      return measurementFloat / 100;\n\n    case 'milligrams->kilograms':\n      return measurementFloat / 100000;\n\n    case 'kilograms->milligrams':\n      return measurementFloat * 100000;\n\n    case 'kilograms->grams':\n      return measurementFloat * 1000;\n    //metric volume\n\n    case 'liters->deciliters':\n      return measurementFloat * 10;\n\n    case 'liters->milliliters':\n      return measurementFloat * 1000;\n\n    case 'deciliters->liters':\n      return measurementFloat / 10;\n\n    case 'deciliters->milliliters':\n      return measurementFloat * 100;\n\n    case 'milliliters->liters':\n      return measurementFloat / 1000;\n\n    case 'milliliters->deciliters':\n      return measurementFloat / 100;\n  }\n}\nexport function convertMeasure(current, requested, measurement, submeasure) {\n  const conversion = `${current}->${requested}`;\n  const measurementInt = parseInt(measurement);\n\n  switch (conversion) {\n    case 'weight-metric->':\n  }\n}","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/utils/helpers.js"],"names":["convertSubMeasure","current","requested","measurement","conversion","measurementFloat","parseFloat","toFixed","convertMeasure","submeasure","measurementInt","parseInt"],"mappings":"AAAA,OAAO,SAASA,iBAAT,CAA2BC,OAA3B,EAAoCC,SAApC,EAA+CC,WAA/C,EAA4D;AAC/D,QAAMC,UAAU,GAAI,GAAEH,OAAQ,KAAIC,SAAU,EAA5C;AACA,QAAMG,gBAAgB,GAAGC,UAAU,CAACH,WAAD,CAAV,CAAwBI,OAAxB,CAAgC,CAAhC,CAAzB;;AAEA,UAAOH,UAAP;AACI;AACA,SAAK,mBAAL;AACI,aAAOC,gBAAgB,GAAC,GAAxB;;AAEJ,SAAK,kBAAL;AACI,aAAOA,gBAAgB,GAAC,IAAxB;;AAEJ,SAAK,mBAAL;AACI,aAAOA,gBAAgB,GAAC,GAAxB;;AAEJ,SAAK,uBAAL;AACI,aAAOA,gBAAgB,GAAC,MAAxB;;AAEJ,SAAK,uBAAL;AACI,aAAOA,gBAAgB,GAAC,MAAxB;;AAEJ,SAAK,kBAAL;AACI,aAAOA,gBAAgB,GAAC,IAAxB;AAEJ;;AACA,SAAK,oBAAL;AACI,aAAOA,gBAAgB,GAAC,EAAxB;;AAEJ,SAAK,qBAAL;AACI,aAAOA,gBAAgB,GAAC,IAAxB;;AAEJ,SAAK,oBAAL;AACI,aAAOA,gBAAgB,GAAC,EAAxB;;AAEJ,SAAK,yBAAL;AACI,aAAOA,gBAAgB,GAAC,GAAxB;;AAEJ,SAAK,qBAAL;AACI,aAAOA,gBAAgB,GAAC,IAAxB;;AAEJ,SAAK,yBAAL;AACI,aAAOA,gBAAgB,GAAC,GAAxB;AArCR;AAuCH;AAED,OAAO,SAASG,cAAT,CAAwBP,OAAxB,EAAiCC,SAAjC,EAA4CC,WAA5C,EAAyDM,UAAzD,EAAqE;AACxE,QAAML,UAAU,GAAI,GAAEH,OAAQ,KAAIC,SAAU,EAA5C;AACA,QAAMQ,cAAc,GAAGC,QAAQ,CAACR,WAAD,CAA/B;;AAEA,UAAOC,UAAP;AACI,SAAK,iBAAL;AADJ;AAIH","sourcesContent":["export function convertSubMeasure(current, requested, measurement) {\n    const conversion = `${current}->${requested}`;\n    const measurementFloat = parseFloat(measurement).toFixed(3);\n\n    switch(conversion) {\n        //metric weight\n        case 'grams->milligrams':\n            return measurementFloat*100;\n     \n        case 'grams->kilograms':\n            return measurementFloat/1000;\n        \n        case 'milligrams->grams':\n            return measurementFloat/100;\n        \n        case 'milligrams->kilograms':\n            return measurementFloat/100000;\n        \n        case 'kilograms->milligrams':\n            return measurementFloat*100000;   \n\n        case 'kilograms->grams':\n            return measurementFloat*1000;\n\n        //metric volume\n        case 'liters->deciliters':\n            return measurementFloat*10;\n        \n        case 'liters->milliliters':\n            return measurementFloat*1000;\n        \n        case 'deciliters->liters':\n            return measurementFloat/10;\n\n        case 'deciliters->milliliters':\n            return measurementFloat*100;\n        \n        case 'milliliters->liters':\n            return measurementFloat/1000;\n        \n        case 'milliliters->deciliters':\n            return measurementFloat/100;\n    }\n}\n\nexport function convertMeasure(current, requested, measurement, submeasure) {\n    const conversion = `${current}->${requested}`;\n    const measurementInt = parseInt(measurement);\n\n    switch(conversion) {\n        case 'weight-metric->':\n\n    }\n}"]},"metadata":{},"sourceType":"module"}