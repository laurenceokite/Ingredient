{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { convertMeasure } from \"../../utils/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RenderIngredient(_ref) {\n  _s();\n\n  let {\n    name,\n    amounts,\n    measSystem\n  } = _ref;\n  const [state] = useStoreContext();\n  const [ingredientState, setIngredientState] = useState({\n    measSystem: measSystem,\n    submeasure: amounts[measSystem].submeasure,\n    newMeasurement: false\n  });\n  const {\n    value,\n    submeasure\n  } = amounts[measSystem];\n  const ingredientMeasurement = getIngredientMeasurement();\n  const ingredientMeasurementString = convertMeasurementToString(ingredientMeasurement);\n\n  const getExistingMeasurement = obj => {\n    const existingMeasurements = [];\n    Object.entries(obj).forEach(_ref2 => {\n      let [key, value] = _ref2;\n\n      if (value.value) {\n        existingMeasurements.push([key, value]);\n      }\n    });\n\n    if (existingMeasurements.length > 1) {}\n\n    return existingMeasurements[0];\n  };\n\n  function getIngredientMeasurement() {\n    //If global state measurement system has been changed, set submeasure to no \"newMeasurement\" and return value or false\n    if (!value && !state.autoConvert && ingredientState.newMeasurement) {\n      setIngredientState({\n        measSystem: measSystem,\n        submeasure: amounts[measSystem].submeasure,\n        newMeasurement: false\n      });\n      return value;\n    } //If auto convert is on, and no preexisting value, convert to new measSystem using convertMeasure\n    else if (!value && state.autoConvert && !ingredientState.newMeasurement) {\n      const currentSubmeasure = ingredientState.submeasure;\n      const existingMeasurement = getExistingMeasurement(amounts);\n      const existingSubmeasure = existingMeasurement[1].submeasure;\n      const existingValue = existingMeasurement[1].value;\n      const existingSystem = existingMeasurement[0];\n      const {\n        newMeasurement,\n        newSubmeasure\n      } = convertMeasure([existingSystem, existingSubmeasure], [measSystem], existingValue);\n      setIngredientState({\n        measSystem: measSystem,\n        submeasure: newSubmeasure,\n        newMeasurement: newMeasurement\n      });\n      console.log(newMeasurement);\n      return newMeasurement;\n    } //If submeasure has changed return new measurement\n    else if (ingredientState.newMeasurement) {\n      return ingredientState.newMeasurement;\n    } //If there is a saved value and nothing has been changed, return saved value\n    else if (value) {\n      return value;\n    } else {\n      return false;\n    }\n  }\n\n  function handleSubmeasureChange(event) {\n    const newSubmeasure = event.target.value;\n    const existingMeasurement = getExistingMeasurement(amounts);\n    const existingSubmeasure = existingMeasurement[1].submeasure;\n    const existingValue = existingMeasurement[1].value;\n    const {\n      newMeasurement\n    } = convertMeasure([measSystem, existingSubmeasure], [measSystem, newSubmeasure], existingValue);\n    setIngredientState({\n      measSystem: measSystem,\n      submeasure: newSubmeasure,\n      newMeasurement: newMeasurement\n    });\n  } //convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\n\n\n  function convertMeasurementToString(measurement) {\n    if (measurement) {\n      //if measurement is in pounds send to displayPounds function for further formatting\n      if (ingredientState.submeasure === 'pounds') {\n        return displayPounds(measurement);\n      } else {\n        return (Math.round(measurement * 100) / 100).toLocaleString();\n      }\n    } else {\n      //if no measurement\n      return false;\n    } //format pounds for display as string\n\n\n    function displayPounds(measurement) {\n      const poundsInt = parseInt(measurement).toLocaleString();\n      const remainder = measurement % 1;\n      const remainderAsOunces = (remainder * 16).toFixed(1);\n\n      if (remainder) {\n        return `${poundsInt}: ${remainderAsOunces}`;\n      } else if (measurement) {\n        return measurement;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: ingredientMeasurement ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: ingredientMeasurementString\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"No Amt.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: `${name}MeasurementSelect`,\n      onChange: handleSubmeasureChange,\n      children: [measSystem === 'us_volume' && /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"imperialVolumeSelect\",\n        defaultValue: ingredientState.submeasure,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gallons\",\n          children: \"G\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"quarts\",\n          children: \"Q\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cups\",\n          children: \"C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"tablespoons\",\n          children: \"T\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"teaspoons\",\n          children: \"t\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fluid-ounces\",\n          children: \"fl. oz.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }, this), measSystem === 'us_weight' && /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"imperialWeightSelect\",\n        defaultValue: ingredientState.submeasure,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"pounds\",\n          children: \"lbs.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ounces\",\n          children: \"oz.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 25\n      }, this), measSystem === 'metric_volume' && /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"metricVolumeSelect\",\n        defaultValue: ingredientState.submeasure,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"liters\",\n          children: \"L\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"deciliters\",\n          children: \"dL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"milliliters\",\n          children: \"mL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }, this), measSystem === 'metric_weight' && /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"metricWeightSelect\",\n        defaultValue: ingredientState.submeasure,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"kilograms\",\n          children: \"kg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"grams\",\n          children: \"g\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"milligrams\",\n          children: \"mg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RenderIngredient, \"j23D59mCi8OIo60hKYFea8+/BBE=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = RenderIngredient;\nexport default RenderIngredient;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderIngredient\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js"],"names":["React","useState","useEffect","useStoreContext","convertMeasure","RenderIngredient","name","amounts","measSystem","state","ingredientState","setIngredientState","submeasure","newMeasurement","value","ingredientMeasurement","getIngredientMeasurement","ingredientMeasurementString","convertMeasurementToString","getExistingMeasurement","obj","existingMeasurements","Object","entries","forEach","key","push","length","autoConvert","currentSubmeasure","existingMeasurement","existingSubmeasure","existingValue","existingSystem","newSubmeasure","console","log","handleSubmeasureChange","event","target","measurement","displayPounds","Math","round","toLocaleString","poundsInt","parseInt","remainder","remainderAsOunces","toFixed"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,cAAT,QAA+B,qBAA/B;;;AAGA,SAASC,gBAAT,OAAyD;AAAA;;AAAA,MAA/B;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAA+B;AACrD,QAAM,CAAEC,KAAF,IAAYN,eAAe,EAAjC;AAEA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAC;AACnDO,IAAAA,UAAU,EAAEA,UADuC;AAEnDI,IAAAA,UAAU,EAAEL,OAAO,CAACC,UAAD,CAAP,CAAoBI,UAFmB;AAGnDC,IAAAA,cAAc,EAAE;AAHmC,GAAD,CAAtD;AAMA,QAAM;AAAEC,IAAAA,KAAF;AAASF,IAAAA;AAAT,MAAwBL,OAAO,CAACC,UAAD,CAArC;AAEA,QAAMO,qBAAqB,GAAGC,wBAAwB,EAAtD;AACA,QAAMC,2BAA2B,GAAGC,0BAA0B,CAACH,qBAAD,CAA9D;;AAEA,QAAMI,sBAAsB,GAAIC,GAAD,IAAS;AACpC,UAAMC,oBAAoB,GAAG,EAA7B;AACAC,IAAAA,MAAM,CAACC,OAAP,CAAeH,GAAf,EAAoBI,OAApB,CAA4B,SAAkB;AAAA,UAAjB,CAACC,GAAD,EAAMX,KAAN,CAAiB;;AAAC,UAAIA,KAAK,CAACA,KAAV,EAAiB;AAAEO,QAAAA,oBAAoB,CAACK,IAArB,CAA0B,CAACD,GAAD,EAAMX,KAAN,CAA1B;AAAyC;AAAC,KAA5G;;AACA,QAAIO,oBAAoB,CAACM,MAArB,GAA8B,CAAlC,EAAqC,CAEpC;;AACD,WAAON,oBAAoB,CAAC,CAAD,CAA3B;AACH,GAPD;;AASA,WAASL,wBAAT,GAAoC;AAChC;AACA,QAAI,CAACF,KAAD,IAAU,CAACL,KAAK,CAACmB,WAAjB,IAAgClB,eAAe,CAACG,cAApD,EAAoE;AAChEF,MAAAA,kBAAkB,CAAC;AACfH,QAAAA,UAAU,EAAEA,UADG;AAEfI,QAAAA,UAAU,EAAEL,OAAO,CAACC,UAAD,CAAP,CAAoBI,UAFjB;AAGfC,QAAAA,cAAc,EAAE;AAHD,OAAD,CAAlB;AAMA,aAAOC,KAAP;AACH,KARD,CAUA;AAVA,SAWK,IAAI,CAACA,KAAD,IAAUL,KAAK,CAACmB,WAAhB,IAA+B,CAAClB,eAAe,CAACG,cAApD,EAAoE;AACrE,YAAMgB,iBAAiB,GAAGnB,eAAe,CAACE,UAA1C;AACA,YAAMkB,mBAAmB,GAAGX,sBAAsB,CAACZ,OAAD,CAAlD;AAEA,YAAMwB,kBAAkB,GAAGD,mBAAmB,CAAC,CAAD,CAAnB,CAAuBlB,UAAlD;AACA,YAAMoB,aAAa,GAAGF,mBAAmB,CAAC,CAAD,CAAnB,CAAuBhB,KAA7C;AACA,YAAMmB,cAAc,GAAGH,mBAAmB,CAAC,CAAD,CAA1C;AAEA,YAAM;AAAEjB,QAAAA,cAAF;AAAkBqB,QAAAA;AAAlB,UAAoC9B,cAAc,CAAC,CAAC6B,cAAD,EAAiBF,kBAAjB,CAAD,EAAuC,CAACvB,UAAD,CAAvC,EAAqDwB,aAArD,CAAxD;AAEArB,MAAAA,kBAAkB,CAAC;AACfH,QAAAA,UAAU,EAAEA,UADG;AAEfI,QAAAA,UAAU,EAAEsB,aAFG;AAGfrB,QAAAA,cAAc,EAAEA;AAHD,OAAD,CAAlB;AAMAsB,MAAAA,OAAO,CAACC,GAAR,CAAYvB,cAAZ;AACA,aAAOA,cAAP;AACH,KAlBI,CAoBL;AApBK,SAqBA,IAAIH,eAAe,CAACG,cAApB,EAAoC;AACrC,aAAOH,eAAe,CAACG,cAAvB;AACH,KAFI,CAIL;AAJK,SAKA,IAAIC,KAAJ,EAAU;AACX,aAAOA,KAAP;AACH,KAFI,MAIA;AACD,aAAO,KAAP;AACH;AACJ;;AAED,WAASuB,sBAAT,CAAgCC,KAAhC,EAAuC;AACnC,UAAMJ,aAAa,GAAGI,KAAK,CAACC,MAAN,CAAazB,KAAnC;AAEA,UAAMgB,mBAAmB,GAAGX,sBAAsB,CAACZ,OAAD,CAAlD;AACA,UAAMwB,kBAAkB,GAAGD,mBAAmB,CAAC,CAAD,CAAnB,CAAuBlB,UAAlD;AACA,UAAMoB,aAAa,GAAGF,mBAAmB,CAAC,CAAD,CAAnB,CAAuBhB,KAA7C;AAEA,UAAM;AAAED,MAAAA;AAAF,QAAqBT,cAAc,CAAC,CAACI,UAAD,EAAauB,kBAAb,CAAD,EAAmC,CAACvB,UAAD,EAAa0B,aAAb,CAAnC,EAAgEF,aAAhE,CAAzC;AACArB,IAAAA,kBAAkB,CAAC;AACfH,MAAAA,UAAU,EAAEA,UADG;AAEfI,MAAAA,UAAU,EAAEsB,aAFG;AAGfrB,MAAAA,cAAc,EAAEA;AAHD,KAAD,CAAlB;AAKH,GApFoD,CAsFrD;;;AACA,WAASK,0BAAT,CAAoCsB,WAApC,EAAiD;AAC7C,QAAIA,WAAJ,EAAiB;AACb;AACA,UAAI9B,eAAe,CAACE,UAAhB,KAA+B,QAAnC,EAA6C;AACzC,eAAO6B,aAAa,CAACD,WAAD,CAApB;AACH,OAFD,MAGK;AACD,eAAO,CAACE,IAAI,CAACC,KAAL,CAAWH,WAAW,GAAC,GAAvB,IAA4B,GAA7B,EAAkCI,cAAlC,EAAP;AACH;AACJ,KARD,MASK;AACD;AACA,aAAO,KAAP;AACH,KAb4C,CAe7C;;;AACA,aAASH,aAAT,CAAuBD,WAAvB,EAAoC;AAChC,YAAMK,SAAS,GAAGC,QAAQ,CAACN,WAAD,CAAR,CAAsBI,cAAtB,EAAlB;AACA,YAAMG,SAAS,GAAGP,WAAW,GAAG,CAAhC;AACA,YAAMQ,iBAAiB,GAAG,CAACD,SAAS,GAAC,EAAX,EAAeE,OAAf,CAAuB,CAAvB,CAA1B;;AAEA,UAAIF,SAAJ,EAAe;AACX,eAAQ,GAAEF,SAAU,KAAIG,iBAAkB,EAA1C;AACH,OAFD,MAGK,IAAIR,WAAJ,EAAiB;AAClB,eAAOA,WAAP;AACH,OAFI,MAGA;AACD,eAAO,KAAP;AACH;AACJ;AACJ;;AAED,sBACI;AAAA,4BACI;AAAA,gBAAMlC;AAAN;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAA,gBACMS,qBAAqB,gBAChB;AAAA,kBAAME;AAAN;AAAA;AAAA;AAAA;AAAA,cADgB,gBAEhB;AAAA,+BACC;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,WAAW,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AAHX;AAAA;AAAA;AAAA;AAAA,YAHJ,eAcI;AAAM,MAAA,EAAE,EAAG,GAAEX,IAAK,mBAAlB;AAAsC,MAAA,QAAQ,EAAE+B,sBAAhD;AAAA,iBACc7B,UAAU,KAAK,WAAhB,iBACD;AAAQ,QAAA,SAAS,EAAC,sBAAlB;AAAyC,QAAA,YAAY,EAAEE,eAAe,CAACE,UAAvE;AAAA,gCACI;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAQ,UAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAQ,UAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAQ,UAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAQ,UAAA,KAAK,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFZ,EAYcJ,UAAU,KAAK,WAAhB,iBACD;AAAQ,QAAA,SAAS,EAAC,sBAAlB;AAAyC,QAAA,YAAY,EAAEE,eAAe,CAACE,UAAvE;AAAA,gCACI;AAAQ,UAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAbZ,EAmBcJ,UAAU,KAAK,eAAhB,iBACD;AAAQ,QAAA,SAAS,EAAC,oBAAlB;AAAuC,QAAA,YAAY,EAAEE,eAAe,CAACE,UAArE;AAAA,gCACI;AAAQ,UAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAQ,UAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cApBZ,EA2BcJ,UAAU,KAAK,eAAhB,iBACD;AAAQ,QAAA,SAAS,EAAC,oBAAlB;AAAuC,QAAA,YAAY,EAAEE,eAAe,CAACE,UAArE;AAAA,gCACI;AAAQ,UAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAQ,UAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BZ;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoDH;;GA5KQP,gB;UACaF,e;;;KADbE,gB;AA8KT,eAAeA,gBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { convertMeasure } from \"../../utils/helpers\"\n\n\nfunction RenderIngredient({ name, amounts, measSystem }) {\n    const [ state ] = useStoreContext();\n\n    const [ingredientState, setIngredientState] = useState({\n        measSystem: measSystem,\n        submeasure: amounts[measSystem].submeasure,\n        newMeasurement: false\n    })\n\n    const { value, submeasure } = amounts[measSystem];\n\n    const ingredientMeasurement = getIngredientMeasurement();\n    const ingredientMeasurementString = convertMeasurementToString(ingredientMeasurement);\n\n    const getExistingMeasurement = (obj) => {\n        const existingMeasurements = [];\n        Object.entries(obj).forEach(([key, value]) => {if (value.value) { existingMeasurements.push([key, value]) }});\n        if (existingMeasurements.length > 1) {\n\n        }\n        return existingMeasurements[0];\n    };\n\n    function getIngredientMeasurement() {\n        //If global state measurement system has been changed, set submeasure to no \"newMeasurement\" and return value or false\n        if (!value && !state.autoConvert && ingredientState.newMeasurement) {\n            setIngredientState({\n                measSystem: measSystem,\n                submeasure: amounts[measSystem].submeasure,\n                newMeasurement: false\n            });\n            \n            return value;\n        } \n\n        //If auto convert is on, and no preexisting value, convert to new measSystem using convertMeasure\n        else if (!value && state.autoConvert && !ingredientState.newMeasurement) {\n            const currentSubmeasure = ingredientState.submeasure;\n            const existingMeasurement = getExistingMeasurement(amounts);\n\n            const existingSubmeasure = existingMeasurement[1].submeasure;\n            const existingValue = existingMeasurement[1].value;\n            const existingSystem = existingMeasurement[0];\n            \n            const { newMeasurement, newSubmeasure } = convertMeasure([existingSystem, existingSubmeasure], [measSystem], existingValue);\n\n            setIngredientState({\n                measSystem: measSystem,\n                submeasure: newSubmeasure,\n                newMeasurement: newMeasurement\n            });\n\n            console.log(newMeasurement);\n            return newMeasurement;\n        }\n\n        //If submeasure has changed return new measurement\n        else if (ingredientState.newMeasurement) {\n            return(ingredientState.newMeasurement);\n        } \n\n        //If there is a saved value and nothing has been changed, return saved value\n        else if (value){\n            return(value);\n        }\n\n        else {\n            return(false);\n        }\n    }\n\n    function handleSubmeasureChange(event) {\n        const newSubmeasure = event.target.value;\n\n        const existingMeasurement = getExistingMeasurement(amounts);\n        const existingSubmeasure = existingMeasurement[1].submeasure;\n        const existingValue = existingMeasurement[1].value;\n\n        const { newMeasurement } = convertMeasure([measSystem, existingSubmeasure], [measSystem, newSubmeasure], existingValue);\n        setIngredientState({\n            measSystem: measSystem,\n            submeasure: newSubmeasure,\n            newMeasurement: newMeasurement \n        }) \n    }\n\n    //convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\n    function convertMeasurementToString(measurement) {\n        if (measurement) {\n            //if measurement is in pounds send to displayPounds function for further formatting\n            if (ingredientState.submeasure === 'pounds') {\n                return displayPounds(measurement);\n            }\n            else {\n                return (Math.round(measurement*100)/100).toLocaleString();\n            }\n        }\n        else {\n            //if no measurement\n            return false;\n        }\n\n        //format pounds for display as string\n        function displayPounds(measurement) {\n            const poundsInt = parseInt(measurement).toLocaleString();\n            const remainder = measurement % 1;\n            const remainderAsOunces = (remainder*16).toFixed(1);\n            \n            if (remainder) {\n                return `${poundsInt}: ${remainderAsOunces}`;\n            }\n            else if (measurement) {\n                return measurement;\n            } \n            else {\n                return false;\n            }\n        }\n    }\n\n    return(\n        <div>\n            <div>{name}</div>\n\n            <div>\n                { ingredientMeasurement \n                    ? (<div>{ingredientMeasurementString}</div>)\n                    : (<form>\n                        <input type=\"text\" placeholder=\"No Amt.\"/>\n                    </form>)\n                }        \n            </div>\n\n            \n\n            <form id={`${name}MeasurementSelect`} onChange={handleSubmeasureChange}>\n                        {(measSystem === 'us_volume') && (\n                        <select className=\"imperialVolumeSelect\" defaultValue={ingredientState.submeasure}>\n                            <option value=\"gallons\">G</option>\n                            <option value=\"quarts\">Q</option>\n                            <option value=\"cups\">C</option>\n                            <option value=\"tablespoons\">T</option>\n                            <option value=\"teaspoons\">t</option>\n                            <option value=\"fluid-ounces\">fl. oz.</option>\n                        </select>\n                        )}\n                        \n                        {(measSystem === 'us_weight') && (\n                        <select className=\"imperialWeightSelect\" defaultValue={ingredientState.submeasure}>\n                            <option value=\"pounds\">lbs.</option>\n                            <option value=\"ounces\">oz.</option>\n                        </select>\n                        )}\n                        {/* if Metric */}\n                        {(measSystem === 'metric_volume') && (\n                        <select className=\"metricVolumeSelect\" defaultValue={ingredientState.submeasure}>\n                            <option value=\"liters\">L</option>\n                            <option value=\"deciliters\">dL</option>\n                            <option value=\"milliliters\">mL</option>\n                        </select>\n                        )}\n\n                        {(measSystem === 'metric_weight') && (\n                        <select className=\"metricWeightSelect\" defaultValue={ingredientState.submeasure}>\n                            <option value=\"kilograms\">kg</option>\n                            <option value=\"grams\">g</option>\n                            <option value=\"milligrams\">mg</option>\n                        </select>\n                        )}\n                    </form>    \n        </div>\n    )\n}\n\nexport default RenderIngredient;"]},"metadata":{},"sourceType":"module"}