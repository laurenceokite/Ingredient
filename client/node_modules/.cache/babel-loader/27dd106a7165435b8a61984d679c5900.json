{"ast":null,"code":"class Ingredient {\n  constructor(data) {\n    this.metric_weight = [{\n      unit: 'milligrams',\n      divisor: .001,\n      abbrev: 'mg',\n      value: false,\n      selected: false\n    }, {\n      unit: 'grams',\n      divisor: 1,\n      abbrev: 'g',\n      value: false,\n      selected: true\n    }, {\n      unit: 'kilograms',\n      divisor: 1000,\n      abbrev: 'k',\n      selected: false\n    }];\n    this.us_weight = [{\n      unit: 'pounds',\n      divisor: 454,\n      abbrev: 'lbs.',\n      selected: false\n    }, {\n      unit: 'ounces',\n      divisor: 28,\n      abbrev: 'oz.',\n      selected: true\n    }];\n    this.metric_volume = [{\n      unit: 'milliliters',\n      divisor: 1,\n      abbrev: 'mL',\n      selected: true\n    }, {\n      unit: 'liters',\n      divisor: 1000,\n      abbrev: 'L',\n      selected: false\n    }];\n    this.us_volume = [{\n      unit: 'cups',\n      divisor: 240,\n      abbrev: 'C',\n      selected: true\n    }, {\n      unit: 'quarts',\n      divisor: 946,\n      abbrev: 'Q',\n      selected: false\n    }, {\n      unit: 'gallons',\n      divisor: 3785,\n      abbrev: 'G',\n      selected: false\n    }, {\n      unit: 'teaspoons',\n      divisor: 4.929,\n      abbrev: 'tsp.',\n      selected: false\n    }, {\n      unit: 'tablespoons',\n      divisor: 14.787,\n      abbrev: 'tbsp.',\n      selected: false\n    }, {\n      unit: 'fluidOunces',\n      divisor: 29.575,\n      abbrev: 'fl. oz.',\n      selected: false\n    }];\n    this.name = void 0;\n  }\n\n  returnCurrentUnits(state) {\n    return this[state];\n  }\n\n  returnSelected(state) {\n    const selectedUnit = this[state].filter(unit => unit.selected)[0];\n    return selectedUnit;\n  }\n\n  updateValue(state, value, unit) {\n    //retrieve index of requested unit\n    const unitIndex = this[state].findIndex(unitData => unitData.unit === unit);\n    this[state][unitIndex].value = value;\n  }\n\n}\n\n;\nexport { Ingredient };","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/client/src/components/ViewEditRecipe/Ingredient.tsx"],"names":["Ingredient","constructor","data","metric_weight","unit","divisor","abbrev","value","selected","us_weight","metric_volume","us_volume","name","returnCurrentUnits","state","returnSelected","selectedUnit","filter","updateValue","unitIndex","findIndex","unitData"],"mappings":"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","sourcesContent":["import { useStoreContext, GlobalSystems, GlobalUnits } from \"../../utils/GlobalState\";\n\ntype Unit = \n    'milligrams' | 'grams' | 'kilograms' |\n    'pounds' | 'ounces' |\n    'milliliters' | 'liters' |\n    'cups' | 'quarts' | 'gallons' | 'teaspoons' | 'tablespoons' | 'fluidOunces';\n\n\ninterface UnitInterface {\n    unit: string; \n    divisor: number;\n    abbrev: string; \n    selected: boolean; \n    value?: number | false;\n}\n\ninterface IngredientInterface {\n    metric_weight: UnitInterface[];\n    us_weight: UnitInterface[];\n    metric_volume: UnitInterface[];\n    us_volume: UnitInterface[];\n}\n\ninterface IngredientDataInterface {\n    name: string;\n    amount: number | false;\n    unit: string;\n}\n\nclass Ingredient implements IngredientInterface {\n    metric_weight = [\n        { unit: 'milligrams', divisor: .001, abbrev: 'mg', value: false, selected: false },\n        { unit: 'grams', divisor: 1, abbrev: 'g', value: false, selected: true },\n        { unit: 'kilograms', divisor: 1000, abbrev: 'k', selected: false }\n    ];   \n\n    us_weight = [\n        { unit: 'pounds', divisor: 454, abbrev: 'lbs.', selected: false },\n        { unit: 'ounces', divisor: 28, abbrev: 'oz.', selected: true }\n    ];\n\n    metric_volume = [\n        { unit: 'milliliters', divisor: 1, abbrev: 'mL', selected: true },\n        { unit: 'liters', divisor: 1000, abbrev: 'L', selected: false },\n    ];\n        \n    us_volume = [   \n        { unit: 'cups', divisor: 240, abbrev: 'C', selected: true },\n        { unit: 'quarts', divisor: 946, abbrev: 'Q', selected: false },\n        { unit: 'gallons', divisor: 3785, abbrev: 'G', selected: false },\n        { unit: 'teaspoons', divisor: 4.929, abbrev: 'tsp.', selected: false },\n        { unit: 'tablespoons', divisor: 14.787, abbrev: 'tbsp.', selected: false },\n        { unit: 'fluidOunces', divisor: 29.575, abbrev: 'fl. oz.', selected: false }\n    ];\n\n    name?: string;\n\n    constructor(data: IngredientDataInterface | null) {\n\n    }\n\n    returnCurrentUnits(state: keyof IngredientInterface): UnitInterface[] {\n        return this[state];\n    }\n\n    returnSelected(state: keyof IngredientInterface): UnitInterface {\n\n        const selectedUnit: UnitInterface = \n            this[state].filter(unit => unit.selected)[0];  \n\n        return selectedUnit;\n    }\n    \n\n    updateValue(state: keyof IngredientInterface, value: number, unit: Unit) {\n\n        //retrieve index of requested unit\n        const unitIndex: number = this[state].findIndex(unitData => unitData.unit === unit);\n\n        this[state][unitIndex].value = value;\n    }\n};\n\nexport { Ingredient, UnitInterface, IngredientInterface, IngredientDataInterface }\n\n"]},"metadata":{},"sourceType":"module"}