{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/ToggleMeasure/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { CHANGE_MEASURE_TYPE, CHANGE_MEASURE_SYSTEM } from '../../utils/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToggleMeasure() {\n  _s();\n\n  const [state, dispatch] = useStoreContext();\n\n  function handleMeasureChange(event) {\n    event.preventDefault();\n    const value = event.target.value;\n\n    switch (value) {\n      case 'metric':\n      case 'imperial':\n        console.log(value);\n        dispatch({\n          type: CHANGE_MEASURE_SYSTEM,\n          ...measureType,\n          measureSystem: value\n        });\n    }\n\n    console.log(state.measureSystem, state.measureType);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onChange: handleMeasureChange,\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"metric\",\n        children: \"M\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"imperial\",\n        children: \"I\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"weight\",\n        children: \"WEIGHT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"volume\",\n        children: \"VOLUME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"autoConvertToggle\",\n      children: \"autoconvert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"autoConvertToggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ToggleMeasure, \"AaULK2aEGk5riJKW01t0FPXyxro=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ToggleMeasure;\nexport default ToggleMeasure;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToggleMeasure\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/ToggleMeasure/index.js"],"names":["React","useState","useStoreContext","CHANGE_MEASURE_TYPE","CHANGE_MEASURE_SYSTEM","ToggleMeasure","state","dispatch","handleMeasureChange","event","preventDefault","value","target","console","log","type","measureType","measureSystem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,mBAAT,EAA8BC,qBAA9B,QAA2D,qBAA3D;;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AACrB,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBL,eAAe,EAA3C;;AAEA,WAASM,mBAAT,CAA6BC,KAA7B,EAAoC;AAChCA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaD,KAA3B;;AACA,YAAQA,KAAR;AACI,WAAK,QAAL;AACA,WAAK,UAAL;AACIE,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAJ,QAAAA,QAAQ,CAAC;AACLQ,UAAAA,IAAI,EAAEX,qBADD;AAEL,aAAGY,WAFE;AAGLC,UAAAA,aAAa,EAAEN;AAHV,SAAD,CAAR;AAJR;;AAUAE,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACW,aAAlB,EAAiCX,KAAK,CAACU,WAAvC;AACH;;AAED,sBACI;AAAM,IAAA,QAAQ,EAAER,mBAAhB;AAAA,4BAGI;AAAA,8BACI;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAQI;AAAA,8BACQ;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADR,eAEQ;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFR;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eAYI;AAAO,MAAA,OAAO,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ,eAaI;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,EAAE,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;GArCQH,a;UACuBH,e;;;KADvBG,a;AAuCT,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { CHANGE_MEASURE_TYPE, CHANGE_MEASURE_SYSTEM } from '../../utils/actions';\n\nfunction ToggleMeasure() {\n    const [ state, dispatch ] = useStoreContext();\n\n    function handleMeasureChange(event) {\n        event.preventDefault();\n\n        const value = event.target.value;\n        switch (value) {\n            case 'metric':\n            case 'imperial':\n                console.log(value);\n                dispatch({\n                    type: CHANGE_MEASURE_SYSTEM,\n                    ...measureType,\n                    measureSystem: value\n                });    \n        }\n        console.log(state.measureSystem, state.measureType);\n    }\n\n    return (\n        <form onChange={handleMeasureChange}>\n            {/* Measurement Options */}\n            {/* system */}\n            <select>\n                <option value=\"metric\">M</option>\n                <option value=\"imperial\">I</option>\n            </select>\n            {/* type */}\n            <select>\n                    <option value=\"weight\">WEIGHT</option>\n                    <option value=\"volume\">VOLUME</option>\n            </select>\n            <label htmlFor=\"autoConvertToggle\">autoconvert</label>\n            <input type=\"checkbox\" id=\"autoConvertToggle\"></input>\n        </form>\n    )\n}\n\nexport default ToggleMeasure;"]},"metadata":{},"sourceType":"module"}