{"ast":null,"code":"const getIngredientMeasurement = (value, measurement) => {\n  //If global state measurement system has been changed, set submeasure to no \"newMeasurement\" and return value or false\n  if (!value && !state.autoConvert && measurement) {\n    setIngredientState({\n      measSystem: measSystem,\n      submeasure: amounts[measSystem].submeasure,\n      newMeasurement: false\n    });\n    return value;\n  } //If auto convert is on, and no preexisting value, convert to new measSystem using convertMeasure\n  else if (!value && state.autoConvert && (!ingredientState.newMeasurement || ingredientState.measSystem !== measSystem)) {\n    const existingMeasurement = getExistingMeasurement(amounts);\n    const existingSubmeasure = existingMeasurement[1].submeasure;\n    const existingValue = existingMeasurement[1].value;\n    const existingSystem = existingMeasurement[0];\n    console.log(measSystem);\n    const {\n      newMeasurement,\n      newSubmeasure\n    } = convertMeasure([existingSystem, existingSubmeasure], [measSystem], existingValue);\n    setIngredientState({\n      measSystem: measSystem,\n      submeasure: newSubmeasure,\n      newMeasurement: newMeasurement\n    });\n    return newMeasurement;\n  } //If there is a saved value and nothing has been changed, return saved value\n  else if (value) {\n    console.log(measSystem);\n\n    if (measSystem !== ingredientState.measSystem) {\n      setIngredientState({\n        measSystem: measSystem,\n        submeasure: amounts[measSystem].submeasure,\n        newMeasurement: false\n      });\n    }\n\n    return value;\n  } //If submeasure has changed return new measurement\n  else if (ingredientState.newMeasurement) {\n    return ingredientState.newMeasurement;\n  } else {\n    if (measSystem !== ingredientState.measSystem) {\n      setIngredientState({\n        measSystem: measSystem,\n        submeasure: amounts[measSystem].submeasure,\n        newMeasurement: false\n      });\n    }\n\n    return false;\n  }\n};\n\nexport default getIngredientMeasurement;","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/getIngredientMeasurement.js"],"names":["getIngredientMeasurement","value","measurement","state","autoConvert","setIngredientState","measSystem","submeasure","amounts","newMeasurement","ingredientState","existingMeasurement","getExistingMeasurement","existingSubmeasure","existingValue","existingSystem","console","log","newSubmeasure","convertMeasure"],"mappings":"AAAA,MAAMA,wBAAwB,GAAG,CAACC,KAAD,EAAQC,WAAR,KAAwB;AAErD;AACA,MAAI,CAACD,KAAD,IAAU,CAACE,KAAK,CAACC,WAAjB,IAAgCF,WAApC,EAAiD;AAC7CG,IAAAA,kBAAkB,CAAC;AACfC,MAAAA,UAAU,EAAEA,UADG;AAEfC,MAAAA,UAAU,EAAEC,OAAO,CAACF,UAAD,CAAP,CAAoBC,UAFjB;AAGfE,MAAAA,cAAc,EAAE;AAHD,KAAD,CAAlB;AAMA,WAAOR,KAAP;AACH,GARD,CAUA;AAVA,OAWK,IAAI,CAACA,KAAD,IAAUE,KAAK,CAACC,WAAhB,KAAgC,CAACM,eAAe,CAACD,cAAjB,IAAmCC,eAAe,CAACJ,UAAhB,KAA+BA,UAAlG,CAAJ,EAAmH;AACpH,UAAMK,mBAAmB,GAAGC,sBAAsB,CAACJ,OAAD,CAAlD;AAEA,UAAMK,kBAAkB,GAAGF,mBAAmB,CAAC,CAAD,CAAnB,CAAuBJ,UAAlD;AACA,UAAMO,aAAa,GAAGH,mBAAmB,CAAC,CAAD,CAAnB,CAAuBV,KAA7C;AACA,UAAMc,cAAc,GAAGJ,mBAAmB,CAAC,CAAD,CAA1C;AAEAK,IAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ;AAEA,UAAM;AAAEG,MAAAA,cAAF;AAAkBS,MAAAA;AAAlB,QAAoCC,cAAc,CAAC,CAACJ,cAAD,EAAiBF,kBAAjB,CAAD,EAAuC,CAACP,UAAD,CAAvC,EAAqDQ,aAArD,CAAxD;AAEAT,IAAAA,kBAAkB,CAAC;AACfC,MAAAA,UAAU,EAAEA,UADG;AAEfC,MAAAA,UAAU,EAAEW,aAFG;AAGfT,MAAAA,cAAc,EAAEA;AAHD,KAAD,CAAlB;AAMA,WAAOA,cAAP;AACH,GAlBI,CAoBL;AApBK,OAqBA,IAAIR,KAAJ,EAAU;AACXe,IAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ;;AACA,QAAIA,UAAU,KAAKI,eAAe,CAACJ,UAAnC,EAA+C;AAC3CD,MAAAA,kBAAkB,CAAC;AACfC,QAAAA,UAAU,EAAEA,UADG;AAEfC,QAAAA,UAAU,EAAEC,OAAO,CAACF,UAAD,CAAP,CAAoBC,UAFjB;AAGfE,QAAAA,cAAc,EAAE;AAHD,OAAD,CAAlB;AAKH;;AACD,WAAOR,KAAP;AACH,GAVI,CAYL;AAZK,OAaA,IAAIS,eAAe,CAACD,cAApB,EAAoC;AACrC,WAAOC,eAAe,CAACD,cAAvB;AACH,GAFI,MAIA;AACD,QAAIH,UAAU,KAAKI,eAAe,CAACJ,UAAnC,EAA+C;AAC3CD,MAAAA,kBAAkB,CAAC;AACfC,QAAAA,UAAU,EAAEA,UADG;AAEfC,QAAAA,UAAU,EAAEC,OAAO,CAACF,UAAD,CAAP,CAAoBC,UAFjB;AAGfE,QAAAA,cAAc,EAAE;AAHD,OAAD,CAAlB;AAKH;;AACD,WAAO,KAAP;AACH;AACJ,CA9DD;;AAgEA,eAAeT,wBAAf","sourcesContent":["const getIngredientMeasurement = (value, measurement) => {\n\n    //If global state measurement system has been changed, set submeasure to no \"newMeasurement\" and return value or false\n    if (!value && !state.autoConvert && measurement) {\n        setIngredientState({\n            measSystem: measSystem,\n            submeasure: amounts[measSystem].submeasure,\n            newMeasurement: false\n        });\n        \n        return value;\n    } \n\n    //If auto convert is on, and no preexisting value, convert to new measSystem using convertMeasure\n    else if (!value && state.autoConvert && (!ingredientState.newMeasurement || ingredientState.measSystem !== measSystem)) {\n        const existingMeasurement = getExistingMeasurement(amounts);\n\n        const existingSubmeasure = existingMeasurement[1].submeasure;\n        const existingValue = existingMeasurement[1].value;\n        const existingSystem = existingMeasurement[0];\n\n        console.log(measSystem);\n        \n        const { newMeasurement, newSubmeasure } = convertMeasure([existingSystem, existingSubmeasure], [measSystem], existingValue);\n\n        setIngredientState({\n            measSystem: measSystem,\n            submeasure: newSubmeasure,\n            newMeasurement: newMeasurement\n        });\n\n        return newMeasurement;\n    }\n\n    //If there is a saved value and nothing has been changed, return saved value\n    else if (value){\n        console.log(measSystem);\n        if (measSystem !== ingredientState.measSystem) {\n            setIngredientState({\n                measSystem: measSystem,\n                submeasure: amounts[measSystem].submeasure,\n                newMeasurement: false\n            });\n        }\n        return(value);\n    }\n\n    //If submeasure has changed return new measurement\n    else if (ingredientState.newMeasurement) {\n        return(ingredientState.newMeasurement);\n    } \n\n    else {\n        if (measSystem !== ingredientState.measSystem) {\n            setIngredientState({\n                measSystem: measSystem,\n                submeasure: amounts[measSystem].submeasure,\n                newMeasurement: false\n            });\n        }\n        return(false);\n    }\n}\n\nexport default getIngredientMeasurement;"]},"metadata":{},"sourceType":"module"}