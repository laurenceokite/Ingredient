{"ast":null,"code":"const systemValues = {\n  metric_weight: {\n    grams: 1,\n    milligrams: .001,\n    kilograms: 100\n  },\n  metric_volume: {\n    milliliters: 1,\n    liters: 1000\n  },\n  us_weight: {\n    ounces: 24.35,\n    pounds: 453.6\n  },\n  us_volume: {\n    cups: 240,\n    quarts: 946,\n    gallons: 3785,\n    fluid_ounces: 29.574,\n    tablespoons: 14.787,\n    teaspoons: 4.929\n  }\n};\nexport function convertMeasure(current, requested, measurement) {\n  const log = function () {\n    return console.log(...arguments);\n  };\n\n  const curSystem = current[0];\n  const curSubmeasure = current[1];\n  const curSubmeasureValue = systemValues[curSystem][curSubmeasure];\n  const reqSystem = requested[0];\n  const reqSubmeasure = requested[1] || compareClosestSubmeasure();\n  const reqSubmeasureValue = systemValues[reqSystem][reqSubmeasure];\n  const newMeasurement = curSubmeasureValue / reqSubmeasureValue * measurement;\n\n  function compareClosestSubmeasure() {\n    const comparisonValue = measurement / curSubmeasureValue;\n    let newPossibleSubmeasure;\n    let leastDifference;\n\n    for (const [key, value] of Object.entries(systemValues[reqSystem])) {\n      const difference = Math.abs(comparisonValue - value);\n\n      if (leastDifference) {\n        if (difference < leastDifference) {\n          leastDifference = difference;\n          newPossibleSubmeasure = key;\n        }\n      } else {\n        leastDifference = difference;\n        newPossibleSubmeasure = key;\n      }\n    }\n\n    return newPossibleSubmeasure;\n  }\n\n  log(reqSubmeasure);\n  return {\n    newMeasurement: newMeasurement,\n    newSubmeasure: reqSubmeasure\n  };\n}","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/utils/helpers.js"],"names":["systemValues","metric_weight","grams","milligrams","kilograms","metric_volume","milliliters","liters","us_weight","ounces","pounds","us_volume","cups","quarts","gallons","fluid_ounces","tablespoons","teaspoons","convertMeasure","current","requested","measurement","log","console","curSystem","curSubmeasure","curSubmeasureValue","reqSystem","reqSubmeasure","compareClosestSubmeasure","reqSubmeasureValue","newMeasurement","comparisonValue","newPossibleSubmeasure","leastDifference","key","value","Object","entries","difference","Math","abs","newSubmeasure"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,aAAa,EAAE;AACXC,IAAAA,KAAK,EAAE,CADI;AAEXC,IAAAA,UAAU,EAAE,IAFD;AAGXC,IAAAA,SAAS,EAAE;AAHA,GADE;AAOjBC,EAAAA,aAAa,EAAE;AACXC,IAAAA,WAAW,EAAE,CADF;AAEXC,IAAAA,MAAM,EAAE;AAFG,GAPE;AAYjBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,MAAM,EAAE,KADD;AAEPC,IAAAA,MAAM,EAAE;AAFD,GAZM;AAiBjBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAE,GADC;AAEPC,IAAAA,MAAM,EAAE,GAFD;AAGPC,IAAAA,OAAO,EAAE,IAHF;AAIPC,IAAAA,YAAY,EAAE,MAJP;AAKPC,IAAAA,WAAW,EAAE,MALN;AAMPC,IAAAA,SAAS,EAAE;AANJ;AAjBM,CAArB;AA2BA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,SAAjC,EAA4CC,WAA5C,EAAyD;AAC5D,QAAMC,GAAG,GAAG;AAAA,WAAaC,OAAO,CAACD,GAAR,CAAY,YAAZ,CAAb;AAAA,GAAZ;;AAEA,QAAME,SAAS,GAAGL,OAAO,CAAC,CAAD,CAAzB;AACA,QAAMM,aAAa,GAAGN,OAAO,CAAC,CAAD,CAA7B;AACA,QAAMO,kBAAkB,GAAG1B,YAAY,CAACwB,SAAD,CAAZ,CAAwBC,aAAxB,CAA3B;AAEA,QAAME,SAAS,GAAGP,SAAS,CAAC,CAAD,CAA3B;AACA,QAAMQ,aAAa,GAAGR,SAAS,CAAC,CAAD,CAAT,IAAgBS,wBAAwB,EAA9D;AACA,QAAMC,kBAAkB,GAAG9B,YAAY,CAAC2B,SAAD,CAAZ,CAAwBC,aAAxB,CAA3B;AAGA,QAAMG,cAAc,GAAGL,kBAAkB,GAAGI,kBAArB,GAA0CT,WAAjE;;AAEA,WAASQ,wBAAT,GAAoC;AAChC,UAAMG,eAAe,GAAGX,WAAW,GAAGK,kBAAtC;AACA,QAAIO,qBAAJ;AACA,QAAIC,eAAJ;;AACA,SAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAetC,YAAY,CAAC2B,SAAD,CAA3B,CAA3B,EAAoE;AAChE,YAAMY,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAST,eAAe,GAAGI,KAA3B,CAAnB;;AACA,UAAIF,eAAJ,EAAqB;AACjB,YAAIK,UAAU,GAAGL,eAAjB,EAAkC;AAC9BA,UAAAA,eAAe,GAAGK,UAAlB;AACAN,UAAAA,qBAAqB,GAAGE,GAAxB;AACH;AACJ,OALD,MAKO;AACHD,QAAAA,eAAe,GAAGK,UAAlB;AACAN,QAAAA,qBAAqB,GAAGE,GAAxB;AACH;AACJ;;AACD,WAAOF,qBAAP;AACH;;AAEDX,EAAAA,GAAG,CAACM,aAAD,CAAH;AAEA,SAAO;AACHG,IAAAA,cAAc,EAAEA,cADb;AAEHW,IAAAA,aAAa,EAAEd;AAFZ,GAAP;AAKH","sourcesContent":["const systemValues = {\n    metric_weight: {\n        grams: 1,\n        milligrams: .001,\n        kilograms: 100\n    },\n\n    metric_volume: {\n        milliliters: 1,\n        liters: 1000\n    },\n\n    us_weight: {\n        ounces: 24.35,\n        pounds: 453.6\n    },\n\n    us_volume: {\n        cups: 240,\n        quarts: 946,\n        gallons: 3785,\n        fluid_ounces: 29.574,\n        tablespoons: 14.787,\n        teaspoons: 4.929\n    }\n}\n\nexport function convertMeasure(current, requested, measurement) {    \n    const log = (...args) => console.log(...args);\n\n    const curSystem = current[0]\n    const curSubmeasure = current[1];\n    const curSubmeasureValue = systemValues[curSystem][curSubmeasure];\n\n    const reqSystem = requested[0];\n    const reqSubmeasure = requested[1] || compareClosestSubmeasure(); \n    const reqSubmeasureValue = systemValues[reqSystem][reqSubmeasure];\n    \n\n    const newMeasurement = curSubmeasureValue / reqSubmeasureValue * measurement;\n\n    function compareClosestSubmeasure() {\n        const comparisonValue = measurement / curSubmeasureValue\n        let newPossibleSubmeasure;\n        let leastDifference;\n        for (const [key, value] of Object.entries(systemValues[reqSystem])) {\n            const difference = Math.abs(comparisonValue - value);\n            if (leastDifference) {\n                if (difference < leastDifference) {\n                    leastDifference = difference;\n                    newPossibleSubmeasure = key;\n                }\n            } else {\n                leastDifference = difference;\n                newPossibleSubmeasure = key;\n            }\n        }\n        return newPossibleSubmeasure;\n    }\n\n    log(reqSubmeasure);\n    \n    return { \n        newMeasurement: newMeasurement,\n        newSubmeasure: reqSubmeasure\n    }\n    \n}\n\n"]},"metadata":{},"sourceType":"module"}