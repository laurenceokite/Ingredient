{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/client/src/components/ViewEditRecipe/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { Ingredient } from './Ingredient';\nimport { EDIT_RECIPE } from '../../utils/actions';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewEditRecipe = () => {\n  _s();\n\n  const [state, dispatch] = useStoreContext();\n  const globalSystem = state.globalSystem;\n  const globalUnit = state.globalUnit;\n  const keyOfIngredient = `${globalSystem}_${globalUnit}`; //utilizing 'Ingredient's init values to populate our form <select>\n\n  const formIngredient = new Ingredient(null);\n  const currentUnits = formIngredient.returnCurrentUnits(keyOfIngredient);\n  const selectedUnit = formIngredient.returnSelected(keyOfIngredient);\n  formIngredient.updateValue(keyOfIngredient, 6, 'grams');\n  const [formState, setFormState] = useState({\n    name: '',\n    amount: false,\n    unit: selectedUnit.unit,\n    factor: selectedUnit.divisor\n  });\n\n  const addIngredient = event => {\n    event.preventDefault();\n    const amount = formState.amount || 0;\n    const ingredientData = {\n      name: formState.name,\n      amount: formState.amount,\n      unit: formState.unit\n    };\n    const newIngredient = new Ingredient(ingredientData);\n    dispatch({\n      type: EDIT_RECIPE,\n      recipeState: { ...state.recipeState,\n        ingredients: [...state.recipeState.ingredients, newIngredient]\n      }\n    }); // Reset ingredient input form to original state\n\n    setFormState({\n      name: '',\n      amount: false,\n      unit: selectedUnit.unit,\n      factor: selectedUnit.divisor\n    });\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setFormState({ ...formState,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"viewEditRecipe\",\n    children: [/*#__PURE__*/_jsxDEV(ToggleMeasure, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: state.recipeState.ingredients.map(ingredient => /*#__PURE__*/_jsxDEV(RenderIngredient, {\n        data: ingredient,\n        currentUnits: currentUnits\n      }, ingredient.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addIngredient,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ingredient-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Ingredient\",\n            id: \"ingredientNameInput\",\n            name: \"name\",\n            value: formState.name,\n            autoComplete: \"off\",\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Amount\",\n            id: \"ingredientAmtInput\",\n            name: \"amount\",\n            value: formState.amount ? formState.amount : undefined,\n            onChange: handleChange,\n            autoComplete: \"off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"measurementSelect\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"unit\",\n            defaultValue: selectedUnit.unit,\n            children: currentUnits.map(unit => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: unit.unit,\n              children: unit.abbrev\n            }, unit.unit, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ViewEditRecipe, \"i9q2n18JrkKuww2km7HRWSgJLbg=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ViewEditRecipe;\nexport default ViewEditRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewEditRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/client/src/components/ViewEditRecipe/index.tsx"],"names":["React","useState","ToggleMeasure","RenderIngredient","useStoreContext","Ingredient","EDIT_RECIPE","ViewEditRecipe","state","dispatch","globalSystem","globalUnit","keyOfIngredient","formIngredient","currentUnits","returnCurrentUnits","selectedUnit","returnSelected","updateValue","formState","setFormState","name","amount","unit","factor","divisor","addIngredient","event","preventDefault","ingredientData","newIngredient","type","recipeState","ingredients","handleChange","value","target","map","ingredient","undefined","abbrev"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext, GlobalSystems, GlobalUnits } from \"../../utils/GlobalState\";\nimport { Ingredient, UnitInterface, IngredientDataInterface } from './Ingredient';\nimport { EDIT_RECIPE } from '../../utils/actions';\nimport './index.css';\n\nconst ViewEditRecipe = () => {\n    type KeyOfIngredient = `${GlobalSystems}_${GlobalUnits}`\n\n    interface FormStateInterface extends IngredientDataInterface {\n        factor: number;\n    }\n\n    const [ state, dispatch ] = useStoreContext();\n\n    const globalSystem: GlobalSystems = state.globalSystem;\n    const globalUnit: GlobalUnits = state.globalUnit;\n\n    const keyOfIngredient: KeyOfIngredient = `${globalSystem}_${globalUnit}`\n\n    //utilizing 'Ingredient's init values to populate our form <select>\n    const formIngredient = new Ingredient(null);\n\n    const currentUnits: UnitInterface[] = formIngredient.returnCurrentUnits(keyOfIngredient);\n    const selectedUnit: UnitInterface = formIngredient.returnSelected(keyOfIngredient);\n\n    formIngredient.updateValue(keyOfIngredient, 6, 'grams');\n\n    const [formState, setFormState] = useState<FormStateInterface>({ \n        name: '',\n        amount: false,\n        unit: selectedUnit.unit,\n        factor: selectedUnit.divisor\n    });\n\n\n    const addIngredient = (event: React.FormEvent): void => {\n        event.preventDefault();\n\n        const amount = formState.amount || 0;\n\n\n        const ingredientData: IngredientDataInterface = {\n            name: formState.name,\n            amount: formState.amount,\n            unit: formState.unit\n        };\n\n        const newIngredient = new Ingredient(ingredientData);\n        \n        dispatch({\n            type: EDIT_RECIPE,\n            recipeState: {\n                ...state.recipeState,\n                ingredients: [\n                    ...state.recipeState.ingredients, \n                    newIngredient\n                ]\n            }\n        });\n\n        // Reset ingredient input form to original state\n        setFormState({\n            name: '',\n            amount: false,\n            unit: selectedUnit.unit,\n            factor: selectedUnit.divisor\n        });\n    };\n\n    const handleChange = (event: React.FormEvent): void => {\n        const { value, name } = event.target as HTMLFormElement;\n\n        setFormState({\n          ...formState,\n          [name]: value\n        });\n    };\n\n    \n\n    return(\n        <div className='viewEditRecipe'>\n            {/* Change measurement type here */}\n            <ToggleMeasure/>\n\n            {/* Map array of ingredients */}\n            <table>\n                {state.recipeState.ingredients.map((ingredient: Ingredient) => (\n                <RenderIngredient key={ingredient.name} data={ingredient} currentUnits={currentUnits}/>\n                ))}\n            </table>\n\n            {/* Ingredient Input */}\n                <form onSubmit={addIngredient}>\n                    <div className='ingredient-input'>\n                        <div>\n                            <input type=\"text\" \n                                placeholder=\"Ingredient\" \n                                id='ingredientNameInput'\n                                name='name'\n                                value={formState.name}\n                                autoComplete=\"off\" \n                                onChange={handleChange}/>\n\n                            <input type=\"number\" \n                                placeholder=\"Amount\"\n                                id='ingredientAmtInput'\n                                name='amount'\n                                value={formState.amount ? formState.amount : undefined}\n                                onChange={handleChange}\n                                autoComplete=\"off\"/>\n                        </div>\n\n                        <div id='measurementSelect'>\n                            <select name='unit' defaultValue={selectedUnit.unit}>\n\n                                {currentUnits.map(unit => (\n                                    <option key={unit.unit} value={unit.unit}>\n                                            {unit.abbrev}\n                                    </option>\n                                ))}\n\n                            </select>\n                        </div>\n                    </div> \n                    {/* Add Ingredient Button */}\n                    <input type=\"submit\" value=\"+\"></input>\n                </form>\n        </div>\n    )\n};\n\nexport default ViewEditRecipe;"]},"metadata":{},"sourceType":"module"}