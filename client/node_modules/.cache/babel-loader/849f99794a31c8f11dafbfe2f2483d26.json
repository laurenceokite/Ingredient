{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { Ingredient } from '../../utils/Ingredient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ViewEditRecipe() {\n  _s();\n\n  const [state] = useStoreContext();\n  const [formState, setFormState] = useState({\n    ingredient: '',\n    amount: {},\n    factor: 1\n  }); //recipe name and array of ingredients\n\n  const [recipeState, setRecipeState] = useState({\n    recipeName: '',\n    ingredients: []\n  }); // Push new ingredient to 'ingredients' array\n\n  const addIngredient = () => {\n    const select = document.getElementById('measurementSelect').firstChild;\n    const unit = select.value;\n    const factor = select.options[select.selectedIndex].dataset.factor;\n    const standardizedValue = formState.amount.value * factor;\n    setFormState({ ...formState,\n      amount: {\n        [state.measurementUnit]: {\n          value: standardizedValue,\n          default: unit\n        }\n      }\n    });\n    console.log(formState);\n    setRecipeState({ //Add ingredient to array of objects in recipeState\n      ...recipeState,\n      ingredients: [...recipeState.ingredients, formState]\n    }); // Reset ingredient input form to original state\n\n    setFormState({\n      ingredient: '',\n      amount: {}\n    });\n  }; // Each time text is entered to input, update formState\n  //Ingredient Input\n\n\n  const handleNameChange = event => {\n    const {\n      value\n    } = event.target;\n    setFormState({ ...formState,\n      ingredient: value\n    });\n  }; //Amount Input\n\n\n  const handleAmountChange = event => {\n    const {\n      value\n    } = event.target;\n    const select = document.getElementById('measurementSelect').firstChild;\n    const unit = select.value;\n    setFormState({ ...formState,\n      amount: {\n        [state.measurementUnit]: {\n          value: value,\n          default: unit\n        }\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ToggleMeasure, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: recipeState.ingredients.map(ingredient => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }, this) // <RenderIngredient key={ingredient.ingredient} ingredient={ingredient}/>\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addIngredient,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Ingredient\",\n          id: \"ingredientNameInput\",\n          name: \"ingredient\",\n          value: formState.ingredient,\n          autoComplete: \"off\",\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Amount\",\n          id: \"ingredientAmtInput\",\n          name: \"amount\",\n          value: formState.amount.value,\n          onChange: handleAmountChange,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"measurementSelect\",\n        children: [state.measurementSystem === 'us' && (state.measurementUnit === 'volume' ? /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"imperialVolumeSelect\",\n          defaultValue: \"cups\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": \"3785\",\n            value: \"gallons\",\n            children: \"G\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": \"946\",\n            value: \"quarts\",\n            children: \"Q\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": \"240\",\n            value: \"cups\",\n            children: \"C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": \"14.787\",\n            value: \"tablespoons\",\n            children: \"T\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": \"4.929\",\n            value: \"teaspoons\",\n            children: \"t\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": \"29.574\",\n            value: \"fluid_ounces\",\n            children: \"fl. oz.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 30\n        }, this) : /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"imperialWeightSelect\",\n          defaultValue: \"ounces\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": \"454\",\n            value: \"pounds\",\n            children: \"lbs.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": \"28.35\",\n            value: \"ounces\",\n            children: \"oz.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 29\n        }, this)), state.measurementSystem === 'metric' && (state.measurementSystem === 'weight' ? /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"metricVolumeSelect\",\n          defaultValue: \"milliliters\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": \"1000\",\n            value: \"liters\",\n            children: \"L\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": \"1\",\n            value: \"milliliters\",\n            children: \"mL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 30\n        }, this) : /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"metricWeightSelect\",\n          defaultValue: \"grams\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": \"1000\",\n            value: \"kilograms\",\n            children: \"kg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": \"1\",\n            value: \"grams\",\n            children: \"g\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-factor\": \".001\",\n            value: \"milligrams\",\n            children: \"mg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 30\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewEditRecipe, \"FGgdLsYFpn8gKBSL9o0RZZQvqWg=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ViewEditRecipe;\n;\nexport default ViewEditRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewEditRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js"],"names":["React","useEffect","useState","ToggleMeasure","RenderIngredient","useStoreContext","Ingredient","ViewEditRecipe","state","formState","setFormState","ingredient","amount","factor","recipeState","setRecipeState","recipeName","ingredients","addIngredient","select","document","getElementById","firstChild","unit","value","options","selectedIndex","dataset","standardizedValue","measurementUnit","default","console","log","handleNameChange","event","target","handleAmountChange","map","measurementSystem"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { Ingredient } from '../../utils/Ingredient';\n\nfunction ViewEditRecipe() {\n    const [ state ] = useStoreContext();\n\n\n    const [formState, setFormState] = useState({ \n        ingredient: '',\n        amount: {},\n        factor: 1\n    });\n\n    //recipe name and array of ingredients\n    const [recipeState, setRecipeState] = useState({ \n        recipeName: '', \n        ingredients: []\n    });\n\n    // Push new ingredient to 'ingredients' array\n    const addIngredient = () => {\n        const select = document.getElementById('measurementSelect').firstChild\n        const unit = select.value;\n        const factor = select.options[select.selectedIndex].dataset.factor;\n\n        const standardizedValue = formState.amount.value * factor;\n\n        setFormState({\n            ...formState,\n            amount: {\n                [state.measurementUnit]: {\n                    value: standardizedValue,\n                    default: unit\n                }    \n            }\n        });\n\n        console.log(formState);\n\n        setRecipeState({\n            //Add ingredient to array of objects in recipeState\n            ...recipeState,\n            ingredients: [\n                ...recipeState.ingredients, \n                formState\n            ]\n        });\n\n        // Reset ingredient input form to original state\n        setFormState({\n            ingredient: '',\n            amount: {}\n        });\n    };\n\n    // Each time text is entered to input, update formState\n    //Ingredient Input\n    const handleNameChange = event => {\n        const { value } = event.target;\n        setFormState({\n          ...formState,\n          ingredient: value\n        });\n    };\n\n    //Amount Input\n    const handleAmountChange = event => {\n        const { value } = event.target;\n        const select = document.getElementById('measurementSelect').firstChild\n        const unit = select.value;\n\n        setFormState({\n            ...formState,\n            amount: {\n                [state.measurementUnit]: {\n                    value: value,\n                    default: unit\n                }\n            }\n        });\n    };\n\n    return(\n        <div>\n            {/* Change measurement type here */}\n            <ToggleMeasure/>\n\n            {/* Map array of ingredients */}\n            <div>\n                    {recipeState.ingredients.map(ingredient => (\n                        <div>hello</div>\n                       // <RenderIngredient key={ingredient.ingredient} ingredient={ingredient}/>\n                    ))}\n            </div>\n\n            {/* Ingredient Input */}\n                <form onSubmit={addIngredient}>\n                    <div>\n                        <input type=\"text\" \n                            placeholder=\"Ingredient\" \n                            id='ingredientNameInput'\n                            name='ingredient'\n                            value={formState.ingredient}\n                            autoComplete=\"off\" \n                            onChange={handleNameChange}/>\n\n                        <input type=\"number\" \n                            placeholder=\"Amount\"\n                            id='ingredientAmtInput'\n                            name='amount'\n                            value={formState.amount.value}\n                            onChange={handleAmountChange}\n                            autoComplete=\"off\"/>\n                    </div>\n\n                    {/* Measurement Select, Displays each set of options conditionally based on state */}\n\n                    {/* if Imperial */}\n                    <div id='measurementSelect'>\n                        {(state.measurementSystem === 'us') && ((state.measurementUnit === 'volume') ?\n                            (<select className=\"imperialVolumeSelect\" defaultValue='cups'>\n                                <option data-factor=\"3785\" value=\"gallons\">G</option>\n                                <option data-factor=\"946\" value=\"quarts\">Q</option>\n                                <option data-factor=\"240\" value=\"cups\">C</option>\n                                <option data-factor=\"14.787\" value=\"tablespoons\">T</option>\n                                <option data-factor=\"4.929\" value=\"teaspoons\">t</option>\n                                <option data-factor=\"29.574\" value=\"fluid_ounces\">fl. oz.</option>\n                            </select>) :\n                            (\n                            <select className=\"imperialWeightSelect\" defaultValue=\"ounces\">\n                                <option data-factor=\"454\" value=\"pounds\">lbs.</option>\n                                <option data-factor=\"28.35\" value=\"ounces\">oz.</option>\n                            </select>\n                            )\n                        )}\n        \n                       {(state.measurementSystem === 'metric') && ((state.measurementSystem === 'weight') ?\n                            (<select className=\"metricVolumeSelect\" defaultValue=\"milliliters\">\n                                <option data-factor=\"1000\" value=\"liters\">L</option>\n                                <option data-factor=\"1\" value=\"milliliters\">mL</option>\n                            </select>\n                            ) :\n\n                            (<select className=\"metricWeightSelect\" defaultValue=\"grams\">\n                                <option data-factor=\"1000\" value=\"kilograms\">kg</option>\n                                <option data-factor=\"1\" value=\"grams\">g</option>\n                                <option data-factor=\".001\" value=\"milligrams\">mg</option>\n                            </select>\n                            )   \n                        )}\n                    </div> \n                    {/* Add Ingredient Button */}\n                    <div>\n                        <input type=\"submit\" value=\"+\"></input>\n                    </div>\n                </form>\n        </div>\n    )\n};\n\nexport default ViewEditRecipe;"]},"metadata":{},"sourceType":"module"}