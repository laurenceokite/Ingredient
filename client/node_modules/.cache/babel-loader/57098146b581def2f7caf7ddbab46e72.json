{"ast":null,"code":"import { Ingredient } from \"./Ingredient\";\nimport { makeAutoObservable } from 'mobx';\nexport class Recipe {\n  constructor(system, units, anchorIndex, name, ingredients) {\n    this.multiplier = 1;\n    this.data = void 0;\n    this.system = void 0;\n    this.units = void 0;\n    this.state = void 0;\n    this.anchorIndex = void 0;\n    this.name = void 0;\n    this.ingredients = void 0;\n    this.data = new Ingredient(); //gets info to pass to selects\n\n    makeAutoObservable(this); //mobx state observer.\n\n    this.system = system;\n    this.units = units;\n    this.state = `${this.system}_${this.units}`;\n    this.anchorIndex = anchorIndex;\n    this.ingredients = [];\n    if (name) this.name = name;\n    if (ingredients) this.ingredients = ingredients;\n  } //divide all values by value of anchor ingredient\n\n\n  getBakersPercents() {\n    const anchor = this.ingredients[this.anchorIndex];\n    const anchorValue = this.state.includes('weight') ? anchor.standardWeight : anchor.standardVolume;\n\n    for (const ingredient of this.ingredients) {\n      const ingredientValue = this.state.includes('weight') ? anchor.standardWeight : anchor.standardVolume;\n      ingredient.bakersPercentage = ingredientValue / anchorValue * 100;\n      console.log(ingredient.bakersPercentage);\n    }\n  } //change recipe system and/or unit\n\n\n  changeState(system, units) {\n    this.system = system;\n    this.units = units;\n    this.state = `${this.system}_${this.units}`;\n    this.getBakersPercents();\n    return this;\n  }\n\n  addIngredient(ingredient) {\n    this.ingredients.push(ingredient);\n    this.getBakersPercents();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/Recipe.tsx"],"names":["Ingredient","makeAutoObservable","Recipe","constructor","system","units","anchorIndex","name","ingredients","multiplier","data","state","getBakersPercents","anchor","anchorValue","includes","standardWeight","standardVolume","ingredient","ingredientValue","bakersPercentage","console","log","changeState","addIngredient","push"],"mappings":"AAAA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASC,kBAAT,QAAmC,MAAnC;AAMA,OAAO,MAAMC,MAAN,CAAa;AAWhBC,EAAAA,WAAW,CAACC,MAAD,EAAwBC,KAAxB,EAA4CC,WAA5C,EAAiEC,IAAjE,EAAgFC,WAAhF,EAA4G;AAAA,SAVvHC,UAUuH,GAV1G,CAU0G;AAAA,SARvHC,IAQuH;AAAA,SAPvHN,MAOuH;AAAA,SANvHC,KAMuH;AAAA,SALvHM,KAKuH;AAAA,SAJvHL,WAIuH;AAAA,SAHvHC,IAGuH;AAAA,SAFvHC,WAEuH;AACnH,SAAKE,IAAL,GAAY,IAAIV,UAAJ,EAAZ,CADmH,CACtF;;AAE7BC,IAAAA,kBAAkB,CAAC,IAAD,CAAlB,CAHmH,CAG1F;;AAEzB,SAAKG,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKM,KAAL,GAAc,GAAE,KAAKP,MAAO,IAAG,KAAKC,KAAM,EAA1C;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKE,WAAL,GAAmB,EAAnB;AAEA,QAAID,IAAJ,EAAU,KAAKA,IAAL,GAAYA,IAAZ;AACV,QAAIC,WAAJ,EAAiB,KAAKA,WAAL,GAAmBA,WAAnB;AACpB,GAxBe,CA0BhB;;;AACAI,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,MAAM,GAAG,KAAKL,WAAL,CAAiB,KAAKF,WAAtB,CAAf;AACA,UAAMQ,WAAW,GAAG,KAAKH,KAAL,CAAWI,QAAX,CAAoB,QAApB,IAAgCF,MAAM,CAACG,cAAvC,GAAwDH,MAAM,CAACI,cAAnF;;AAEA,SAAK,MAAMC,UAAX,IAAyB,KAAKV,WAA9B,EAA2C;AACvC,YAAMW,eAAe,GAAG,KAAKR,KAAL,CAAWI,QAAX,CAAoB,QAApB,IAAgCF,MAAM,CAACG,cAAvC,GAAwDH,MAAM,CAACI,cAAvF;AAEAC,MAAAA,UAAU,CAACE,gBAAX,GAA+BD,eAAe,GAAIL,WAApB,GAAoC,GAAlE;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAU,CAACE,gBAAvB;AACH;AACJ,GArCe,CAuChB;;;AACAG,EAAAA,WAAW,CAACnB,MAAD,EAAwBC,KAAxB,EAAoD;AAC3D,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AAEA,SAAKM,KAAL,GAAc,GAAE,KAAKP,MAAO,IAAG,KAAKC,KAAM,EAA1C;AAEA,SAAKO,iBAAL;AACA,WAAO,IAAP;AACH;;AAEDY,EAAAA,aAAa,CAACN,UAAD,EAAiC;AAC1C,SAAKV,WAAL,CAAiBiB,IAAjB,CAAsBP,UAAtB;AAEA,SAAKN,iBAAL;AACA,WAAO,IAAP;AACH;;AAvDe","sourcesContent":["import { Ingredient } from \"./Ingredient\";\nimport { makeAutoObservable } from 'mobx'\n\ntype GlobalSystems = 'metric' | 'us';\ntype GlobalUnits = 'weight' | 'volume';\nexport type State = `${GlobalSystems}_${GlobalUnits}`;\n\nexport class Recipe {\n    multiplier = 1;\n\n    data: Ingredient;\n    system: GlobalSystems;\n    units: GlobalUnits;\n    state: State;\n    anchorIndex: number;\n    name?: string;\n    ingredients: Ingredient[];\n\n    constructor(system: GlobalSystems, units: GlobalUnits, anchorIndex: number, name?: string, ingredients?: Ingredient[]) {\n        this.data = new Ingredient();//gets info to pass to selects\n\n        makeAutoObservable(this);//mobx state observer.\n\n        this.system = system;\n        this.units = units;\n        this.state = `${this.system}_${this.units}`\n        this.anchorIndex = anchorIndex;\n        this.ingredients = [];\n        \n        if (name) this.name = name;\n        if (ingredients) this.ingredients = ingredients;\n    }\n\n    //divide all values by value of anchor ingredient\n    getBakersPercents() {\n        const anchor = this.ingredients[this.anchorIndex];\n        const anchorValue = this.state.includes('weight') ? anchor.standardWeight : anchor.standardVolume;\n\n        for (const ingredient of this.ingredients) {\n            const ingredientValue = this.state.includes('weight') ? anchor.standardWeight : anchor.standardVolume;\n            \n            ingredient.bakersPercentage = (ingredientValue! / anchorValue!) * 100;\n            console.log(ingredient.bakersPercentage);\n        }\n    }\n\n    //change recipe system and/or unit\n    changeState(system: GlobalSystems, units: GlobalUnits): Recipe {\n        this.system = system;\n        this.units = units;\n        \n        this.state = `${this.system}_${this.units}`;\n\n        this.getBakersPercents();\n        return this;\n    }\n\n    addIngredient(ingredient: Ingredient): Recipe {\n        this.ingredients.push(ingredient);\n\n        this.getBakersPercents();\n        return this;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}