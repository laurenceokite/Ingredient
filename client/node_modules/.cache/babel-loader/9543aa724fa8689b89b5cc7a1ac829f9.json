{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ViewEditRecipe() {\n  _s();\n\n  const [state, dispatch] = useStoreContext();\n  const [addIngredientState, setAddIngredientState] = useState({\n    //This is how data will be structured in each ingredient\n    ingredient: '',\n    amounts: {\n      metric_weight: {\n        value: '',\n        submeasure: 'grams'\n      },\n      us_weight: {\n        value: '',\n        submeasure: 'ounces'\n      },\n      metric_volume: {\n        value: '',\n        submeasure: 'milliliters'\n      },\n      us_volume: {\n        value: '',\n        submeasure: 'cups'\n      }\n    }\n  }); //recipe name and array of ingredients\n\n  const [recipeState, setRecipeState] = useState({\n    recipe: '',\n    ingredients: []\n  }); //'measSystem' tells us what measurement to display based on which options are selected\n\n  const [previousMeasSystem, setPreviousMeasSystem] = useState(measSystem); // Push new ingredient to 'ingredients' array\n\n  function addIngredient(event) {\n    event.preventDefault(); //convert value string to floating-point number, formatted to six decimal points\n\n    const valueParsed = parseFloat(addIngredientState.amounts[measSystem].value).toFixed(6); //Update addIngredientState\n\n    setAddIngredientState({ ...addIngredientState,\n      amount: { ...addIngredientState.amounts,\n        [measSystem]: {\n          value: valueParsed,\n          ...addIngredientState.amounts[measSystem]\n        }\n      }\n    });\n    setRecipeState({ //Add ingredient to array of objects in recipeState\n      ...recipeState,\n      ingredients: [...recipeState.ingredients, {\n        ingredient: addIngredientState.ingredient,\n        amounts: { ...addIngredientState.amounts\n        }\n      }]\n    }); // Reset ingredient input form to original state\n\n    setAddIngredientState({\n      ingredient: '',\n      amounts: {\n        metric_weight: {\n          value: '',\n          submeasure: 'grams'\n        },\n        us_weight: {\n          value: '',\n          submeasure: 'ounces'\n        },\n        metric_volume: {\n          value: '',\n          submeasure: 'milliliters'\n        },\n        us_volume: {\n          value: '',\n          submeasure: 'cups'\n        }\n      }\n    });\n  }\n\n  ; // Each time text is entered to input, update formState\n  //Ingredient Input\n\n  const handleNameChange = event => {\n    const {\n      value\n    } = event.target;\n    setAddIngredientState({ ...addIngredientState,\n      ingredient: value\n    });\n  }; //Amount Input\n\n\n  const handleAmountChange = event => {\n    const {\n      value\n    } = event.target;\n    const submeasure = document.getElementById('measurementSelect').firstChild.value;\n    setAddIngredientState({ ...addIngredientState,\n      amounts: { ...addIngredientState.amounts,\n        [measSystem]: {\n          value: value,\n          submeasure: submeasure\n        }\n      }\n    });\n  };\n\n  const handleSubmeasureChange = event => {\n    const {\n      value\n    } = event.target;\n    setAddIngredientState({ ...addIngredientState,\n      amounts: { ...addIngredientState.amounts,\n        [measSystem]: { ...addIngredientState.amounts[measSystem],\n          submeasure: value\n        }\n      }\n    });\n  }; //If global measure system has been changed, clear state and move amount to new measure system\n\n\n  useEffect(() => {\n    const submeasure = document.getElementById('measurementSelect').firstChild.value;\n    const ingredientAmtInput = document.getElementById('ingredientAmtInput').value;\n\n    if (measSystem !== previousMeasSystem) {\n      if (ingredientAmtInput) {\n        const previousAmount = addIngredientState.amounts[previousMeasSystem].value;\n        setAddIngredientState({ ...addIngredientState,\n          amount: { ...addIngredientState.amount,\n            [previousMeasSystem]: {\n              value: '',\n              submeasure: addIngredientState.amount[previousMeasSystem].submeasure\n            },\n            [measSystem]: {\n              value: previousAmount,\n              submeasure: submeasure\n            }\n          }\n        });\n        setPreviousMeasSystem(measSystem);\n      } else {\n        setPreviousMeasSystem(measSystem);\n      }\n    }\n  }, [previousMeasSystem, measSystem, addIngredientState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"viewEditRecipe\",\n    children: [/*#__PURE__*/_jsxDEV(ToggleMeasure, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"ingredientsContainer\",\n      children: recipeState.ingredients.map(ingredient => /*#__PURE__*/_jsxDEV(RenderIngredient, {\n        name: ingredient.ingredient,\n        amounts: ingredient.amounts,\n        measSystem: measSystem\n      }, ingredient.ingredient, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addIngredient,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Ingredient\",\n          className: \"ingredientNameInput\",\n          name: \"ingredient\",\n          value: addIngredientState.ingredient,\n          autoComplete: \"off\",\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Amount\",\n          className: \"ingredientAmtInput\",\n          name: \"amount\",\n          value: addIngredientState.amounts[measSystem].value,\n          onChange: handleAmountChange,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"measurementSelect\",\n        onChange: handleSubmeasureChange,\n        children: [measSystem === 'us_volume' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"imperialVolumeSelect\",\n          defaultValue: \"cups\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gallons\",\n            children: \"G\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"quarts\",\n            children: \"Q\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"cups\",\n            children: \"C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"tablespoons\",\n            children: \"T\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"teaspoons\",\n            children: \"t\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"fluid_ounces\",\n            children: \"fl. oz.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 25\n        }, this), measSystem === 'us_weight' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"imperialWeightSelect\",\n          defaultValue: \"ounces\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"pounds\",\n            children: \"lbs.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ounces\",\n            children: \"oz.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 25\n        }, this), measSystem === 'metric_volume' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"metricVolumeSelect\",\n          defaultValue: \"milliliters\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"liters\",\n            children: \"L\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"milliliters\",\n            children: \"mL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 25\n        }, this), measSystem === 'metric_weight' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"metricWeightSelect\",\n          defaultValue: \"grams\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"kilograms\",\n            children: \"kg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"grams\",\n            children: \"g\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"milligrams\",\n            children: \"mg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewEditRecipe, \"j9xhhM/2Mq7tq/mqWYmpL0t+wdE=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ViewEditRecipe;\n;\nexport default ViewEditRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewEditRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js"],"names":["React","useEffect","useState","ToggleMeasure","RenderIngredient","useStoreContext","ViewEditRecipe","state","dispatch","addIngredientState","setAddIngredientState","ingredient","amounts","metric_weight","value","submeasure","us_weight","metric_volume","us_volume","recipeState","setRecipeState","recipe","ingredients","previousMeasSystem","setPreviousMeasSystem","measSystem","addIngredient","event","preventDefault","valueParsed","parseFloat","toFixed","amount","handleNameChange","target","handleAmountChange","document","getElementById","firstChild","handleSubmeasureChange","ingredientAmtInput","previousAmount","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\nimport './index.css';\n\nfunction ViewEditRecipe() {\n    const [ state, dispatch ] = useStoreContext();\n\n    const [addIngredientState, setAddIngredientState] = useState({ \n        //This is how data will be structured in each ingredient\n        ingredient: '',\n            amounts: {\n                metric_weight:\n                {\n                    value: '',\n                    submeasure: 'grams'\n                },\n                us_weight:\n                {\n                    value: '',\n                    submeasure: 'ounces'\n                },\n                metric_volume:\n                {\n                    value: '',\n                    submeasure: 'milliliters'\n                },\n                us_volume:\n                {\n                    value: '',\n                    submeasure: 'cups'\n                }\n            }\n    \n    });\n\n    //recipe name and array of ingredients\n    const [recipeState, setRecipeState] = useState({ \n        recipe: '', \n        ingredients: []\n    });\n\n    //'measSystem' tells us what measurement to display based on which options are selected\n    const [previousMeasSystem, setPreviousMeasSystem] = useState(measSystem);\n    \n\n\n    // Push new ingredient to 'ingredients' array\n    function addIngredient(event) {\n        event.preventDefault();\n        //convert value string to floating-point number, formatted to six decimal points\n        const valueParsed = parseFloat(addIngredientState.amounts[measSystem].value).toFixed(6);\n\n        //Update addIngredientState\n        setAddIngredientState({\n            ...addIngredientState,\n            amount: {\n                ...addIngredientState.amounts,\n                [measSystem]:\n                {\n                    value: valueParsed,\n                    ...addIngredientState.amounts[measSystem]\n                }\n            }\n        });\n\n        setRecipeState({\n            //Add ingredient to array of objects in recipeState\n            ...recipeState,\n            ingredients: [...recipeState.ingredients, {\n                ingredient: addIngredientState.ingredient,\n                    amounts: {\n                        ...addIngredientState.amounts\n                    }  \n            }]\n        });\n\n        // Reset ingredient input form to original state\n        setAddIngredientState({\n            ingredient: '',\n            amounts: {\n                metric_weight:\n                {\n                    value: '',\n                    submeasure: 'grams'\n                },\n                us_weight:\n                {\n                    value: '',\n                    submeasure: 'ounces'\n                },\n                metric_volume:\n                {\n                    value: '',\n                    submeasure: 'milliliters'\n                },\n                us_volume:\n                {\n                    value: '',\n                    submeasure: 'cups'\n                }\n            }\n        });\n    };\n\n    // Each time text is entered to input, update formState\n    //Ingredient Input\n    const handleNameChange = event => {\n        const { value } = event.target;\n        setAddIngredientState({\n          ...addIngredientState,\n          ingredient: value\n        });\n    };\n    //Amount Input\n    const handleAmountChange = event => {\n        const { value } = event.target;\n        const submeasure = document.getElementById('measurementSelect').firstChild.value;\n        \n        \n        setAddIngredientState({\n            ...addIngredientState,\n            amounts: {\n                ...addIngredientState.amounts,\n                [measSystem]:\n                {\n                    value: value,\n                    submeasure: submeasure\n                }\n            }\n        });\n    };\n\n    const handleSubmeasureChange = event => {\n        const { value } = event.target;\n        \n        setAddIngredientState({\n            ...addIngredientState,\n            amounts: {\n                ...addIngredientState.amounts,\n                [measSystem]:\n                {\n                    ...addIngredientState.amounts[measSystem],\n                    submeasure: value\n                }\n            }\n        });\n    };\n\n    //If global measure system has been changed, clear state and move amount to new measure system\n    useEffect(()=>{\n        const submeasure = document.getElementById('measurementSelect').firstChild.value;\n        const ingredientAmtInput = document.getElementById('ingredientAmtInput').value;\n\n        if (measSystem !== previousMeasSystem) {\n            if (ingredientAmtInput) {\n                const previousAmount = addIngredientState.amounts[previousMeasSystem].value;\n                setAddIngredientState({\n                    ...addIngredientState,\n                    amount: {\n                        ...addIngredientState.amount,\n                        [previousMeasSystem]:\n                        {\n                            value: '',\n                            submeasure: addIngredientState.amount[previousMeasSystem].submeasure\n                        },\n                        [measSystem]:\n                        {\n                            value: previousAmount,\n                            submeasure: submeasure\n                        }\n                    }\n                });\n                setPreviousMeasSystem(measSystem);\n            } else {\n                setPreviousMeasSystem(measSystem);\n            }\n        }\n\n    }, [previousMeasSystem, measSystem, addIngredientState]);\n\n    return(\n        <div id='viewEditRecipe'>\n            {/* Change measurement type here */}\n            <ToggleMeasure/>\n\n            {/* Map array of ingredients */}\n            <div id='ingredientsContainer'>\n                    {recipeState.ingredients.map(ingredient => (\n                        <RenderIngredient key={ingredient.ingredient} name={ingredient.ingredient} amounts={ingredient.amounts} measSystem={measSystem}/>\n                    ))}\n            </div>\n\n            {/* Ingredient Input */}\n                <form onSubmit={addIngredient}>\n                    <div>\n                        <input type=\"text\" \n                            placeholder=\"Ingredient\" \n                            className='ingredientNameInput'\n                            name='ingredient'\n                            value={addIngredientState.ingredient}\n                            autoComplete=\"off\" \n                            onChange={handleNameChange}/>\n\n                        <input type=\"number\" \n                            placeholder=\"Amount\"\n                            className='ingredientAmtInput'\n                            name='amount'\n                            value={addIngredientState.amounts[measSystem].value}\n                            onChange={handleAmountChange}\n                            autoComplete=\"off\"/>\n                    </div>\n\n                    {/* Measurement Select, Displays each set of options conditionally based on state */}\n\n                    {/* if Imperial */}\n                    <div className='measurementSelect' onChange={handleSubmeasureChange}>\n                        {(measSystem === 'us_volume') && (\n                        <select className=\"imperialVolumeSelect\" defaultValue='cups' >\n                            <option value=\"gallons\">G</option>\n                            <option value=\"quarts\">Q</option>\n                            <option value=\"cups\">C</option>\n                            <option value=\"tablespoons\">T</option>\n                            <option value=\"teaspoons\">t</option>\n                            <option value=\"fluid_ounces\">fl. oz.</option>\n                        </select>\n                        )}\n                        \n                        {(measSystem === 'us_weight') && (\n                        <select className=\"imperialWeightSelect\" defaultValue=\"ounces\">\n                            <option value=\"pounds\">lbs.</option>\n                            <option value=\"ounces\">oz.</option>\n                        </select>\n                        )}\n                        {/* if Metric */}\n                        {(measSystem === 'metric_volume') && (\n                        <select className=\"metricVolumeSelect\" defaultValue=\"milliliters\">\n                            <option value=\"liters\">L</option>\n                            <option value=\"milliliters\">mL</option>\n                        </select>\n                        )}\n\n                        {(measSystem === 'metric_weight') && (\n                        <select className=\"metricWeightSelect\" defaultValue=\"grams\">\n                            <option value=\"kilograms\">kg</option>\n                            <option value=\"grams\">g</option>\n                            <option value=\"milligrams\">mg</option>\n                        </select>\n                        )}\n                    </div> \n                    {/* Add Ingredient Button */}\n                    <div>\n                        <input type=\"submit\" value=\"+\"></input>\n                    </div>\n                </form>\n        </div>\n    )\n};\n\nexport default ViewEditRecipe;"]},"metadata":{},"sourceType":"module"}