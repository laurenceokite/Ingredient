{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ViewEditRecipe() {\n  _s();\n\n  const [state, dispatch] = useStoreContext();\n  const [addIngredientState, setAddIngredientState] = useState({\n    ingredient: '',\n    amount: ''\n  });\n  console.log(state);\n\n  if (state.measureSystem = 'metric') {\n    console.log('success!' + state.measureSystem);\n  }\n\n  const ingredients = [];\n\n  function addIngredient(event) {\n    event.preventDefault();\n    const measure = state.measureType + state.measureSystem;\n    ingredients.push({\n      ingredient: addIngredientState.ingredient,\n      amount: {\n        [measure]: addIngredientState.amount\n      }\n    });\n    console.log(ingredients);\n  } // Each time text is entered to input, update formState\n\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setAddIngredientState({ ...addIngredientState,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ToggleMeasure, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: ingredients.map(ingredient => {})\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addIngredient,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Ingredient\",\n          id: \"ingredientNameInput\",\n          name: \"ingredient\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Amt.\",\n          id: \"ingredientAmtInput\",\n          name: \"amount\",\n          onChange: handleChange,\n          className: \"ingredientAmtInput\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), state.measureSystem = 'imperial' && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"imperialVolumeSelect\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"gallons\",\n              children: \"G\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"quarts\",\n              children: \"Q\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cups\",\n              children: \"C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"tablespoons\",\n              children: \"T\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"teaspoons\",\n              children: \"t\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"fluid ounces\",\n              children: \"fl. oz.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"imperialWeightSelect\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"pounds\",\n              children: \"lbs.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ounces\",\n              children: \"oz.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"metricVolumeSelect\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"liters\",\n            children: \"L\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"deciliters\",\n            children: \"dL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"milliliters\",\n            children: \"mL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"metricWeightSelect\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"kilograms\",\n            children: \"kg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"grams\",\n            children: \"g\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"milligrams\",\n            children: \"mg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewEditRecipe, \"ZggZdHcjFHCo1SB/FFfgJlNRp6I=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ViewEditRecipe;\nexport default ViewEditRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewEditRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js"],"names":["React","useState","ToggleMeasure","useStoreContext","ViewEditRecipe","state","dispatch","addIngredientState","setAddIngredientState","ingredient","amount","console","log","measureSystem","ingredients","addIngredient","event","preventDefault","measure","measureType","push","handleChange","name","value","target","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,SAASC,eAAT,QAAgC,yBAAhC;;;AAEA,SAASC,cAAT,GAA0B;AAAA;;AACtB,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBH,eAAe,EAA3C;AACA,QAAM,CAACI,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAAC;AACzDQ,IAAAA,UAAU,EAAE,EAD6C;AACzCC,IAAAA,MAAM,EAAE;AADiC,GAAD,CAA5D;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;;AAEA,MAAIA,KAAK,CAACQ,aAAN,GAAsB,QAA1B,EAAoC;AAChCF,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAaP,KAAK,CAACQ,aAA/B;AACH;;AAGD,QAAMC,WAAW,GAAG,EAApB;;AAEA,WAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1BA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMC,OAAO,GAAGb,KAAK,CAACc,WAAN,GAAoBd,KAAK,CAACQ,aAA1C;AAEAC,IAAAA,WAAW,CAACM,IAAZ,CAAiB;AACbX,MAAAA,UAAU,EAAEF,kBAAkB,CAACE,UADlB;AAEbC,MAAAA,MAAM,EAAE;AACJ,SAACQ,OAAD,GAAWX,kBAAkB,CAACG;AAD1B;AAFK,KAAjB;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAYE,WAAZ;AACH,GA3BqB,CA6BtB;;;AACA,QAAMO,YAAY,GAAGL,KAAK,IAAI;AAC1B,UAAM;AAAEM,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBP,KAAK,CAACQ,MAA9B;AACAhB,IAAAA,qBAAqB,CAAC,EACpB,GAAGD,kBADiB;AAEpB,OAACe,IAAD,GAAQC;AAFY,KAAD,CAArB;AAIH,GAND;;AAQA,sBACI;AAAA,4BAEI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI;AAAA,gBACST,WAAW,CAACW,GAAZ,CAAgBhB,UAAU,IAAI,CAE9B,CAFA;AADT;AAAA;AAAA;AAAA;AAAA,YALJ,eAYI;AAAM,MAAA,QAAQ,EAAEM,aAAhB;AAAA,8BACI;AAAA,gCACI;AAAO,UAAA,IAAI,EAAC,MAAZ;AACI,UAAA,WAAW,EAAC,YADhB;AAEI,UAAA,EAAE,EAAC,qBAFP;AAGI,UAAA,IAAI,EAAC,YAHT;AAII,UAAA,QAAQ,EAAEM;AAJd;AAAA;AAAA;AAAA;AAAA,gBADJ,eAMI;AAAO,UAAA,IAAI,EAAC,MAAZ;AACI,UAAA,WAAW,EAAC,MADhB;AAEI,UAAA,EAAE,EAAC,oBAFP;AAGI,UAAA,IAAI,EAAC,QAHT;AAII,UAAA,QAAQ,EAAEA,YAJd;AAKI,UAAA,SAAS,EAAC;AALd;AAAA;AAAA;AAAA;AAAA,gBANJ,EAeKhB,KAAK,CAACQ,aAAN,GAAsB,2BACnB;AAAA,kCACI;AAAQ,YAAA,SAAS,EAAC,sBAAlB;AAAA,oCACI;AAAQ,cAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAQ,cAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAQ,cAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAQ,cAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAKI;AAAQ,cAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,eAMI;AAAQ,cAAA,KAAK,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAUI;AAAQ,YAAA,SAAS,EAAC,sBAAlB;AAAA,oCACI;AAAQ,cAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAQ,cAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBR,eAiCI;AAAQ,UAAA,SAAS,EAAC,oBAAlB;AAAA,kCACI;AAAQ,YAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAQ,YAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjCJ,eAuCI;AAAQ,UAAA,SAAS,EAAC,oBAAlB;AAAA,kCACI;AAAQ,YAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAQ,YAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvCJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eA+CI;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cA/CJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkEH;;GAxGQT,c;UACuBD,e;;;KADvBC,c;AA0GT,eAAeA,cAAf","sourcesContent":["import React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\nfunction ViewEditRecipe() {\n    const [ state, dispatch ] = useStoreContext();\n    const [addIngredientState, setAddIngredientState] = useState({ \n        ingredient: '', amount: ''\n    });\n\n    console.log(state);\n\n    if (state.measureSystem = 'metric') {\n        console.log('success!' + state.measureSystem);\n    }\n\n\n    const ingredients = [];\n    \n    function addIngredient(event) {\n        event.preventDefault();\n\n        const measure = state.measureType + state.measureSystem;\n\n        ingredients.push({\n            ingredient: addIngredientState.ingredient,\n            amount: {\n                [measure]: addIngredientState.amount\n            }\n        });\n        console.log(ingredients);\n    }\n\n    // Each time text is entered to input, update formState\n    const handleChange = event => {\n        const { name, value } = event.target;\n        setAddIngredientState({\n          ...addIngredientState,\n          [name]: value\n        });\n    }\n\n    return(\n        <div>\n            {/* Change measurement type here */}\n            <ToggleMeasure/>\n\n            {/* Map array of ingredients */}\n            <div>\n                    {ingredients.map(ingredient => {\n\n                    })}\n            </div>\n\n            {/* Ingredient Input */}\n            <form onSubmit={addIngredient}>\n                <div>\n                    <input type=\"text\" \n                        placeholder=\"Ingredient\" \n                        id='ingredientNameInput'\n                        name='ingredient'\n                        onChange={handleChange}></input>\n                    <input type=\"text\" \n                        placeholder=\"Amt.\"\n                        id='ingredientAmtInput'\n                        name='amount'\n                        onChange={handleChange} \n                        className=\"ingredientAmtInput\"></input>\n\n                    {/* Conditional Measurement Select */}\n                    {/* if Imperial */}\n                    {state.measureSystem = 'imperial' && \n                        <div>\n                            <select className=\"imperialVolumeSelect\">\n                                <option value=\"gallons\">G</option>\n                                <option value=\"quarts\">Q</option>\n                                <option value=\"cups\">C</option>\n                                <option value=\"tablespoons\">T</option>\n                                <option value=\"teaspoons\">t</option>\n                                <option value=\"fluid ounces\">fl. oz.</option>\n                            </select>\n\n                            <select className=\"imperialWeightSelect\">\n                                <option value=\"pounds\">lbs.</option>\n                                <option value=\"ounces\">oz.</option>\n                            </select>\n                        </div>\n                    } \n                    {/* if Metric */}\n                    <select className=\"metricVolumeSelect\">\n                        <option value=\"liters\">L</option>\n                        <option value=\"deciliters\">dL</option>\n                        <option value=\"milliliters\">mL</option>\n                    </select>\n\n                    <select className=\"metricWeightSelect\">\n                        <option value=\"kilograms\">kg</option>\n                        <option value=\"grams\">g</option>\n                        <option value=\"milligrams\">mg</option>\n                    </select> \n                </div>\n                {/* Add Ingredient Button */}\n                <div>\n                    <input type=\"submit\" value=\"+\"></input>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default ViewEditRecipe;"]},"metadata":{},"sourceType":"module"}