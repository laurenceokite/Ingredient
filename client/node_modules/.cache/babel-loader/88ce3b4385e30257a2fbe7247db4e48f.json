{"ast":null,"code":"import { Ingredient, returnWeightOrVolume } from \"./Ingredient\";\nimport { makeAutoObservable } from 'mobx';\nexport class Recipe {\n  constructor(system, units, anchorIndex, name, ingredients) {\n    this.multiplier = 1;\n    this.data = void 0;\n    this.system = void 0;\n    this.units = void 0;\n    this.state = void 0;\n    this.anchorIndex = void 0;\n    this.name = void 0;\n    this.ingredients = void 0;\n    this.data = new Ingredient(); //unit data, UnitSelect component uses this.\n\n    makeAutoObservable(this); //mobx\n\n    this.system = system;\n    this.units = units;\n    this.state = `${this.system}_${this.units}`;\n    this.anchorIndex = anchorIndex;\n    this.ingredients = [];\n    if (name) this.name = name;\n    if (ingredients) this.ingredients = ingredients;\n  } //change recipe system and/or unit\n\n\n  changeState(system, units) {\n    this.system = system;\n    this.units = units;\n    this.state = `${this.system}_${this.units}`;\n    return this;\n  }\n\n  addIngredient(ingredient) {\n    this.ingredients.push(ingredient);\n    return this;\n  } //get bakers percent of ingredient\n\n\n  bakersPercent(index, updatePercent) {\n    if (this.ingredients.length === 0) return 0;\n    const anchor = this.ingredients[this.anchorIndex];\n    const weightOrVol = returnWeightOrVolume(this.state);\n\n    const milsOrGrams = weightOrVol => {\n      if (weightOrVol === 'weight') return 'grams';\n      if (weightOrVol === 'volume') return 'milliliters';\n      return '';\n    };\n\n    const anchorValue = anchor.standard[weightOrVol] || 0;\n    const ingredient = this.ingredients[index];\n    const ingredientValue = ingredient.standard[weightOrVol] || 0;\n\n    if (updatePercent) {\n      const decimal = updatePercent / 100;\n      const newValue = anchorValue * decimal;\n      ingredient.updateValue(this.state, milsOrGrams(weightOrVol), newValue);\n      return updatePercent;\n    }\n\n    return ingredientValue / anchorValue * 100;\n  }\n\n}","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/Recipe.tsx"],"names":["Ingredient","returnWeightOrVolume","makeAutoObservable","Recipe","constructor","system","units","anchorIndex","name","ingredients","multiplier","data","state","changeState","addIngredient","ingredient","push","bakersPercent","index","updatePercent","length","anchor","weightOrVol","milsOrGrams","anchorValue","standard","ingredientValue","decimal","newValue","updateValue"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,oBAArB,QAAiD,cAAjD;AACA,SAASC,kBAAT,QAAmC,MAAnC;AAMA,OAAO,MAAMC,MAAN,CAAa;AAWhBC,EAAAA,WAAW,CAACC,MAAD,EAAwBC,KAAxB,EAA4CC,WAA5C,EAAiEC,IAAjE,EAAgFC,WAAhF,EAA4G;AAAA,SAVvHC,UAUuH,GAV1G,CAU0G;AAAA,SARvHC,IAQuH;AAAA,SAPvHN,MAOuH;AAAA,SANvHC,KAMuH;AAAA,SALvHM,KAKuH;AAAA,SAJvHL,WAIuH;AAAA,SAHvHC,IAGuH;AAAA,SAFvHC,WAEuH;AACnH,SAAKE,IAAL,GAAY,IAAIX,UAAJ,EAAZ,CADmH,CACtF;;AAE7BE,IAAAA,kBAAkB,CAAC,IAAD,CAAlB,CAHmH,CAG1F;;AAEzB,SAAKG,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKM,KAAL,GAAc,GAAE,KAAKP,MAAO,IAAG,KAAKC,KAAM,EAA1C;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKE,WAAL,GAAmB,EAAnB;AAEA,QAAID,IAAJ,EAAU,KAAKA,IAAL,GAAYA,IAAZ;AACV,QAAIC,WAAJ,EAAiB,KAAKA,WAAL,GAAmBA,WAAnB;AACpB,GAxBe,CA0BhB;;;AACAI,EAAAA,WAAW,CAACR,MAAD,EAAwBC,KAAxB,EAAoD;AAC3D,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AAEA,SAAKM,KAAL,GAAc,GAAE,KAAKP,MAAO,IAAG,KAAKC,KAAM,EAA1C;AAEA,WAAO,IAAP;AACH;;AAEDQ,EAAAA,aAAa,CAACC,UAAD,EAAiC;AAC1C,SAAKN,WAAL,CAAiBO,IAAjB,CAAsBD,UAAtB;AAEA,WAAO,IAAP;AACH,GAxCe,CA0ChB;;;AACAE,EAAAA,aAAa,CAACC,KAAD,EAAgBC,aAAhB,EAAgD;AACzD,QAAI,KAAKV,WAAL,CAAiBW,MAAjB,KAA4B,CAAhC,EAAmC,OAAO,CAAP;AAEnC,UAAMC,MAAM,GAAG,KAAKZ,WAAL,CAAiB,KAAKF,WAAtB,CAAf;AAEA,UAAMe,WAAW,GAAGrB,oBAAoB,CAAC,KAAKW,KAAN,CAAxC;;AAEA,UAAMW,WAAW,GAAID,WAAD,IAAiC;AAEjD,UAAIA,WAAW,KAAK,QAApB,EAA8B,OAAO,OAAP;AAC9B,UAAIA,WAAW,KAAK,QAApB,EAA8B,OAAO,aAAP;AAC9B,aAAO,EAAP;AACH,KALD;;AAOA,UAAME,WAAW,GAAGH,MAAM,CAACI,QAAP,CAAgBH,WAAhB,KAAgC,CAApD;AAEA,UAAMP,UAAU,GAAG,KAAKN,WAAL,CAAiBS,KAAjB,CAAnB;AAEA,UAAMQ,eAAe,GAAGX,UAAU,CAACU,QAAX,CAAoBH,WAApB,KAAoC,CAA5D;;AAEA,QAAIH,aAAJ,EAAmB;AACf,YAAMQ,OAAO,GAAGR,aAAa,GAAG,GAAhC;AAEA,YAAMS,QAAQ,GAAGJ,WAAW,GAAGG,OAA/B;AAEAZ,MAAAA,UAAU,CAACc,WAAX,CAAuB,KAAKjB,KAA5B,EAAmCW,WAAW,CAACD,WAAD,CAA9C,EAA6DM,QAA7D;AAEA,aAAOT,aAAP;AACH;;AAED,WAAQO,eAAe,GAAGF,WAAnB,GAAkC,GAAzC;AACH;;AA1Ee","sourcesContent":["import { Ingredient, returnWeightOrVolume } from \"./Ingredient\";\nimport { makeAutoObservable } from 'mobx'\n\ntype GlobalSystems = 'metric' | 'us';\ntype GlobalUnits = 'weight' | 'volume';\nexport type State = `${GlobalSystems}_${GlobalUnits}`;\n\nexport class Recipe {\n    multiplier = 1;\n\n    data: Ingredient;\n    system: GlobalSystems;\n    units: GlobalUnits;\n    state: State;\n    anchorIndex: number;\n    name?: string;\n    ingredients: Ingredient[];\n\n    constructor(system: GlobalSystems, units: GlobalUnits, anchorIndex: number, name?: string, ingredients?: Ingredient[]) {\n        this.data = new Ingredient();//unit data, UnitSelect component uses this.\n\n        makeAutoObservable(this);//mobx\n\n        this.system = system;\n        this.units = units;\n        this.state = `${this.system}_${this.units}`\n        this.anchorIndex = anchorIndex;\n        this.ingredients = [];\n        \n        if (name) this.name = name;\n        if (ingredients) this.ingredients = ingredients;\n    }\n\n    //change recipe system and/or unit\n    changeState(system: GlobalSystems, units: GlobalUnits): Recipe {\n        this.system = system;\n        this.units = units;\n        \n        this.state = `${this.system}_${this.units}`;\n\n        return this;\n    }\n\n    addIngredient(ingredient: Ingredient): Recipe {\n        this.ingredients.push(ingredient);\n\n        return this;\n    }\n\n    //get bakers percent of ingredient\n    bakersPercent(index: number, updatePercent?: number): number {\n        if (this.ingredients.length === 0) return 0;\n\n        const anchor = this.ingredients[this.anchorIndex];\n\n        const weightOrVol = returnWeightOrVolume(this.state);\n\n        const milsOrGrams = (weightOrVol: string): string => {\n\n            if (weightOrVol === 'weight') return 'grams';\n            if (weightOrVol === 'volume') return 'milliliters';\n            return '';\n        }\n\n        const anchorValue = anchor.standard[weightOrVol] || 0;\n\n        const ingredient = this.ingredients[index];\n\n        const ingredientValue = ingredient.standard[weightOrVol] || 0;\n\n        if (updatePercent) {\n            const decimal = updatePercent / 100;\n\n            const newValue = anchorValue * decimal;\n\n            ingredient.updateValue(this.state, milsOrGrams(weightOrVol), newValue);\n\n            return updatePercent;\n        }\n\n        return (ingredientValue / anchorValue) * 100;\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}