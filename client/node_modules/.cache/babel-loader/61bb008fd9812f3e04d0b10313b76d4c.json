{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { relativeValues } from \"../../utils/Ingredient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ViewEditRecipe() {\n  _s();\n\n  const [state] = useStoreContext();\n  const [formState, setFormState] = useState({\n    name: '',\n    amount: '',\n    localUnit: 'grams'\n  }); //recipe name and array of ingredients\n\n  const [recipeState, setRecipeState] = useState({\n    name: '',\n    ingredients: []\n  });\n  const { ...currentUnits\n  } = relativeValues[state.globalSystem][state.globalUnit];\n  console.log(Object.entries(currentUnits).map(_ref => {\n    let [key, obj] = _ref;\n    return console.log(key[value]);\n  })); // Push new ingredient to 'ingredients' array\n\n  const addIngredient = event => {\n    event.preventDefault();\n    setRecipeState({ //Add ingredient to array of objects in recipeState\n      ...recipeState,\n      ingredients: [...recipeState.ingredients, {\n        name: formState.name,\n        [state.measurementUnit]: {\n          value: 'standardizedValue',\n          default: 'unit'\n        }\n      }]\n    }); // Reset ingredient input form to original state\n\n    setFormState({\n      name: '',\n      amount: ''\n    });\n  }; // Each time text is entered to input, update formState\n  //Ingredient Input\n\n\n  const handleNameChange = event => {\n    const {\n      value\n    } = event.target;\n    setFormState({ ...formState,\n      name: value\n    });\n  }; //Amount Input\n\n\n  const handleAmountChange = event => {\n    const {\n      value\n    } = event.target;\n    setFormState({ ...formState,\n      amount: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ToggleMeasure, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: recipeState.ingredients.map(ingredient => /*#__PURE__*/_jsxDEV(RenderIngredient, {\n        data: ingredient\n      }, ingredient.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addIngredient,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Ingredient\",\n          id: \"ingredientNameInput\",\n          name: \"ingredient\",\n          value: formState.name,\n          autoComplete: \"off\",\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Amount\",\n          id: \"ingredientAmtInput\",\n          name: \"amount\",\n          value: formState.amount,\n          onChange: handleAmountChange,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"measurementSelect\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          children: Object.entries(currentUnits).map(_ref2 => {\n            let [key, value] = _ref2;\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              \"data-factor\": \"\",\n              value: \"gallons\",\n              children: key[value]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewEditRecipe, \"7F43+lzBWM4uYWwrQLuM9suPYks=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ViewEditRecipe;\n;\nexport default ViewEditRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewEditRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js"],"names":["React","useEffect","useState","ToggleMeasure","RenderIngredient","useStoreContext","relativeValues","ViewEditRecipe","state","formState","setFormState","name","amount","localUnit","recipeState","setRecipeState","ingredients","currentUnits","globalSystem","globalUnit","console","log","Object","entries","map","key","obj","value","addIngredient","event","preventDefault","measurementUnit","default","handleNameChange","target","handleAmountChange","ingredient"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { relativeValues } from \"../../utils/Ingredient\";\n\nfunction ViewEditRecipe() {\n    const [ state ] = useStoreContext();\n\n    const [formState, setFormState] = useState({ \n        name: '',\n        amount: '',\n        localUnit: 'grams'\n    });\n\n    //recipe name and array of ingredients\n    const [recipeState, setRecipeState] = useState({ \n        name: '', \n        ingredients: []\n    });\n\n    const {...currentUnits} = relativeValues[state.globalSystem][state.globalUnit];\n\n    console.log(Object.entries(currentUnits).map(([key, obj]) => (\n        console.log(key[value])\n        )))\n\n    // Push new ingredient to 'ingredients' array\n    const addIngredient = (event) => {\n        event.preventDefault();\n\n        setRecipeState({\n            //Add ingredient to array of objects in recipeState\n            ...recipeState,\n            ingredients: [\n                ...recipeState.ingredients, \n                {\n                    name: formState.name,\n                    [state.measurementUnit]: {\n                        value: 'standardizedValue',\n                        default: 'unit'\n                    }\n                }\n            ]\n        });\n        // Reset ingredient input form to original state\n        setFormState({\n            name: '',\n            amount: ''\n        });\n    };\n\n    // Each time text is entered to input, update formState\n    //Ingredient Input\n    const handleNameChange = event => {\n        const { value } = event.target;\n        setFormState({\n          ...formState,\n          name: value\n        });\n    };\n\n    //Amount Input\n    const handleAmountChange = event => {\n        const { value } = event.target;\n\n        setFormState({\n            ...formState,\n            amount: value\n        });\n    };\n\n    return(\n        <div>\n            {/* Change measurement type here */}\n            <ToggleMeasure/>\n\n            {/* Map array of ingredients */}\n            <div>\n                    {recipeState.ingredients.map(ingredient => (\n                        <RenderIngredient key={ingredient.name} data={ingredient}/>\n                    ))}\n            </div>\n\n            {/* Ingredient Input */}\n                <form onSubmit={addIngredient}>\n                    <div>\n                        <input type=\"text\" \n                            placeholder=\"Ingredient\" \n                            id='ingredientNameInput'\n                            name='ingredient'\n                            value={formState.name}\n                            autoComplete=\"off\" \n                            onChange={handleNameChange}/>\n\n                        <input type=\"number\" \n                            placeholder=\"Amount\"\n                            id='ingredientAmtInput'\n                            name='amount'\n                            value={formState.amount}\n                            onChange={handleAmountChange}\n                            autoComplete=\"off\"/>\n                    </div>\n\n                    {/* Measurement Select, Displays each set of options conditionally based on state */}\n                    <div id='measurementSelect'>\n                       <select>\n                            {Object.entries(currentUnits).map(([key, value]) => (\n                                <option data-factor='' value=\"gallons\">{key[value]}</option>\n                                ))}\n                        </select>\n                    </div> \n                    {/* Add Ingredient Button */}\n                    <div>\n                        <input type=\"submit\" value=\"+\"></input>\n                    </div>\n                </form>\n        </div>\n    )\n};\n\nexport default ViewEditRecipe;"]},"metadata":{},"sourceType":"module"}