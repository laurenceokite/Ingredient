{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/client/src/components/ViewEditRecipe/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport UnitSelect from '../UnitSelect';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { Ingredient } from './Ingredient';\nimport { EDIT_RECIPE } from '../../utils/actions';\nimport './index.css';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewEditRecipe = () => {\n  _s();\n\n  const [state, dispatch] = useStoreContext();\n  const globalSystem = state.globalSystem;\n  const globalUnit = state.globalUnit; //this is the state as a key of Ingredient object\n\n  const keyOfIngredient = `${globalSystem}_${globalUnit}`; //utilizing 'Ingredient's init values to populate our form <select>\n\n  const formIngredient = new Ingredient(null);\n  const currentUnits = formIngredient.returnCurrentUnits(keyOfIngredient);\n  const selectedUnit = formIngredient.returnSelected(keyOfIngredient);\n  const [formState, setFormState] = useState({\n    name: '',\n    value: 0,\n    unit: selectedUnit.unit,\n    state: keyOfIngredient\n  });\n  useEffect(() => {\n    setFormState({ ...formState,\n      state: keyOfIngredient,\n      unit: selectedUnit.unit\n    });\n  }, [state]);\n\n  const addIngredient = event => {\n    event.preventDefault();\n    console.log(formState);\n    const newIngredient = new Ingredient(formState);\n    dispatch({\n      type: EDIT_RECIPE,\n      recipeState: { ...state.recipeState,\n        ingredients: [...state.recipeState.ingredients, newIngredient]\n      }\n    }); // Reset ingredient input form to original state\n\n    setFormState({\n      name: '',\n      value: 0,\n      unit: selectedUnit.unit,\n      state: keyOfIngredient\n    });\n    console.log(formState);\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setFormState({ ...formState,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"viewEditRecipe\",\n    children: [/*#__PURE__*/_jsxDEV(ToggleMeasure, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: state.recipeState.ingredients.map((ingredient, index) => /*#__PURE__*/_jsxDEV(RenderIngredient, {\n        data: ingredient,\n        currentUnits: currentUnits,\n        index: index\n      }, ingredient.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addIngredient,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ingredient-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Ingredient\",\n            id: \"ingredientNameInput\",\n            name: \"name\",\n            value: formState.name,\n            autoComplete: \"off\",\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Amount\",\n            id: \"ingredientAmtInput\",\n            name: \"value\",\n            value: formState.value,\n            onChange: handleChange,\n            autoComplete: \"off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"measurementSelect\",\n          children: /*#__PURE__*/_jsxDEV(UnitSelect, {\n            currentUnits: currentUnits,\n            selectedUnit: selectedUnit,\n            ingredient: formIngredient,\n            keyOfIngredient: keyOfIngredient\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ViewEditRecipe, \"6px90Fb/z9WUvN4ZZEW9rqsNwe4=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ViewEditRecipe;\nexport default ViewEditRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewEditRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/client/src/components/ViewEditRecipe/index.tsx"],"names":["React","useState","ToggleMeasure","RenderIngredient","UnitSelect","useStoreContext","Ingredient","EDIT_RECIPE","useEffect","ViewEditRecipe","state","dispatch","globalSystem","globalUnit","keyOfIngredient","formIngredient","currentUnits","returnCurrentUnits","selectedUnit","returnSelected","formState","setFormState","name","value","unit","addIngredient","event","preventDefault","console","log","newIngredient","type","recipeState","ingredients","handleChange","target","map","ingredient","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport UnitSelect from '../UnitSelect';\nimport { useStoreContext, GlobalSystems, GlobalUnits, KeyOfIngredient } from \"../../utils/GlobalState\";\nimport { Ingredient, UnitInterface, IngredientDataInterface } from './Ingredient';\nimport { EDIT_RECIPE } from '../../utils/actions';\nimport './index.css';\nimport { useEffect } from 'react';\n\nconst ViewEditRecipe = () => {\n    const [ state, dispatch ] = useStoreContext();\n\n    const globalSystem: GlobalSystems = state.globalSystem;\n    const globalUnit: GlobalUnits = state.globalUnit;\n\n    //this is the state as a key of Ingredient object\n    const keyOfIngredient: KeyOfIngredient = `${globalSystem}_${globalUnit}`;\n\n    //utilizing 'Ingredient's init values to populate our form <select>\n    const formIngredient = new Ingredient(null);\n\n    const currentUnits: UnitInterface[] = formIngredient.returnCurrentUnits(keyOfIngredient);\n    const selectedUnit: UnitInterface = formIngredient.returnSelected(keyOfIngredient);\n\n    const [formState, setFormState] = useState<IngredientDataInterface>({ \n        name: '',\n        value: 0,\n        unit: selectedUnit.unit,\n        state: keyOfIngredient\n    });\n\n    useEffect(() => {\n        setFormState({\n            ...formState,\n            state: keyOfIngredient,\n            unit: selectedUnit.unit\n        })    \n    }, [state]);\n\n    const addIngredient = (event: React.FormEvent): void => {\n        event.preventDefault();\n\n        console.log(formState);\n\n        const newIngredient = new Ingredient(formState);\n        \n        dispatch({\n            type: EDIT_RECIPE,\n            recipeState: {\n                ...state.recipeState,\n                ingredients: [\n                    ...state.recipeState.ingredients, \n                    newIngredient\n                ]\n            }\n        });\n\n        // Reset ingredient input form to original state\n        setFormState({\n            name: '',\n            value: 0,\n            unit: selectedUnit.unit,\n            state: keyOfIngredient\n        });\n        console.log(formState);\n    };\n\n    const handleChange = (event: React.FormEvent): void => {\n        const { value, name } = event.target as HTMLFormElement;\n\n        setFormState({\n          ...formState,\n          [name]: value\n        });\n    };\n\n    return(\n        <div className='viewEditRecipe'>\n            {/* Change measurement type here */}\n            <ToggleMeasure/>\n\n            {/* Map array of ingredients */}\n            <table>\n                {state.recipeState.ingredients.map((ingredient: Ingredient, index: number) => (\n                <RenderIngredient \n                    key={ingredient.name} \n                    data={ingredient} \n                    currentUnits={currentUnits}\n                    index={index}\n                />     \n                ))}\n            </table>\n\n            {/* Ingredient Input */}\n                <form onSubmit={addIngredient}>\n                    <div className='ingredient-input'>\n                        <div>\n                            <input type=\"text\" \n                                placeholder=\"Ingredient\" \n                                id='ingredientNameInput'\n                                name='name'\n                                value={formState.name}\n                                autoComplete=\"off\" \n                                onChange={handleChange}/>\n\n                            <input type=\"number\" \n                                placeholder=\"Amount\"\n                                id='ingredientAmtInput'\n                                name='value'\n                                value={formState.value}\n                                onChange={handleChange}\n                                autoComplete=\"off\"/>\n                        </div>\n\n                        <div id='measurementSelect'>\n                            <UnitSelect \n                                currentUnits={currentUnits} \n                                selectedUnit={selectedUnit}\n                                ingredient={formIngredient}\n                                keyOfIngredient={keyOfIngredient}\n                            />\n                        </div>\n                    </div> \n                    {/* Add Ingredient Button */}\n                    <input type=\"submit\" value=\"+\"></input>\n                </form>\n        </div>\n    )\n};\n\n\n\nexport default ViewEditRecipe;"]},"metadata":{},"sourceType":"module"}