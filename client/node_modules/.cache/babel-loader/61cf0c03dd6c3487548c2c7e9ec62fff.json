{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/ToggleMeasure/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { CHANGE_GLOBAL_UNIT, CHANGE_GLOBAL_SYSTEM, TOGGLE_AUTO_CONVERT } from '../../utils/actions';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToggleMeasure() {\n  _s();\n\n  const [state, dispatch] = useStoreContext(); //Each time form is changed, update GlobalState\n  //Weight or Volume\n\n  function handleUnitChange(event) {\n    const value = event.target.value;\n    dispatch({\n      type: CHANGE_GLOBAL_UNIT,\n      globalUnit: value\n    });\n    console.log(state, value);\n  } //Metric or Imperial\n\n\n  function handleSystemChange(event) {\n    const value = event.target.value;\n    dispatch({\n      type: CHANGE_GLOBAL_SYSTEM,\n      globalSystem: value\n    });\n  } //Toggle autoconvert on and off\n\n\n  function handleToggleAutoConvert() {\n    dispatch({\n      type: TOGGLE_AUTO_CONVERT,\n      autoConvert: !state.autoConvert\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"toggle-measure\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleSystemChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"metric\",\n          children: \"M\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"us\",\n          children: \"US\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleUnitChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"weight\",\n          children: \"WEIGHT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"volume\",\n          children: \"VOLUME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autoconvert\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"autoConvertToggle\",\n        children: \"autoconvert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: \"autoConvertToggle\",\n        onChange: handleToggleAutoConvert\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ToggleMeasure, \"AaULK2aEGk5riJKW01t0FPXyxro=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ToggleMeasure;\nexport default ToggleMeasure;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToggleMeasure\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/ToggleMeasure/index.js"],"names":["React","useState","useStoreContext","CHANGE_GLOBAL_UNIT","CHANGE_GLOBAL_SYSTEM","TOGGLE_AUTO_CONVERT","ToggleMeasure","state","dispatch","handleUnitChange","event","value","target","type","globalUnit","console","log","handleSystemChange","globalSystem","handleToggleAutoConvert","autoConvert"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,kBAAT,EAA6BC,oBAA7B,EAAmDC,mBAAnD,QAA8E,qBAA9E;AACA,OAAO,aAAP;;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AACrB,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBN,eAAe,EAA3C,CADqB,CAGrB;AACA;;AACA,WAASO,gBAAT,CAA0BC,KAA1B,EAAiC;AAC7B,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;AACAH,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEV,kBADD;AAELW,MAAAA,UAAU,EAAEH;AAFP,KAAD,CAAR;AAIAI,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ,EAAmBI,KAAnB;AACH,GAZoB,CAcrB;;;AACA,WAASM,kBAAT,CAA4BP,KAA5B,EAAmC;AAC/B,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;AACAH,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAET,oBADD;AAELc,MAAAA,YAAY,EAAEP;AAFT,KAAD,CAAR;AAIH,GArBoB,CAuBrB;;;AACA,WAASQ,uBAAT,GAAmC;AAC/BX,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAER,mBADD;AAELe,MAAAA,WAAW,EAAE,CAACb,KAAK,CAACa;AAFf,KAAD,CAAR;AAIH;;AAED,sBACI;AAAM,IAAA,SAAS,EAAC,gBAAhB;AAAA,4BAEI;AAAA,8BAEI;AAAQ,QAAA,QAAQ,EAAEH,kBAAlB;AAAA,gCACI;AAAQ,UAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAOI;AAAQ,QAAA,QAAQ,EAAER,gBAAlB;AAAA,gCACQ;AAAQ,UAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADR,eAEQ;AAAQ,UAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFR;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAcI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,EAAE,EAAC,mBAA1B;AAA8C,QAAA,QAAQ,EAAEU;AAAxD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH;;GApDQb,a;UACuBJ,e;;;KADvBI,a;AAsDT,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { CHANGE_GLOBAL_UNIT, CHANGE_GLOBAL_SYSTEM, TOGGLE_AUTO_CONVERT } from '../../utils/actions';\nimport './index.css'\n\nfunction ToggleMeasure() {\n    const [ state, dispatch ] = useStoreContext();\n\n    //Each time form is changed, update GlobalState\n    //Weight or Volume\n    function handleUnitChange(event) {\n        const value = event.target.value;\n        dispatch({\n            type: CHANGE_GLOBAL_UNIT,\n            globalUnit: value\n        });\n        console.log(state, value);\n    }\n\n    //Metric or Imperial\n    function handleSystemChange(event) {\n        const value = event.target.value;\n        dispatch({\n            type: CHANGE_GLOBAL_SYSTEM,\n            globalSystem: value\n        }); \n    }\n\n    //Toggle autoconvert on and off\n    function handleToggleAutoConvert() {\n        dispatch({\n            type: TOGGLE_AUTO_CONVERT,\n            autoConvert: !state.autoConvert\n        })\n    }\n\n    return (\n        <form className='toggle-measure'> \n            {/* Measurement Options */}\n            <div>\n                {/* system */}\n                <select onChange={handleSystemChange}>\n                    <option value=\"metric\">M</option>\n                    <option value=\"us\">US</option>\n                </select>\n                {/* type */}\n                <select onChange={handleUnitChange}>\n                        <option value=\"weight\">WEIGHT</option>\n                        <option value=\"volume\">VOLUME</option>\n                </select>\n            </div>\n            <div className='autoconvert'>\n                <label htmlFor=\"autoConvertToggle\">autoconvert</label>\n                <input type=\"checkbox\" id=\"autoConvertToggle\" onChange={handleToggleAutoConvert}></input>\n            </div>\n        </form>\n    )\n}\n\nexport default ToggleMeasure;"]},"metadata":{},"sourceType":"module"}