{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/ToggleMeasure/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { CHANGE_MEASURE_TYPE, CHANGE_MEASURE_SYSTEM } from '../../utils/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToggleMeasure() {\n  _s();\n\n  const [state, dispatch] = useStoreContext(); //Each time form is changed, update GlobalState\n  //Weight or Volume\n\n  function handleTypeChange(event) {\n    event.preventDefault();\n    const value = event.target.value;\n    const measure = `${value}-${state.measureSystem}`;\n    const submeasure = '';\n\n    switch (measure) {\n      case 'weight-metric':\n        submeasure = 'grams';\n        break;\n\n      case 'weight-metric':\n        submeasure = 'grams';\n        break;\n\n      case 'weight-metric':\n        submeasure = 'grams';\n        break;\n\n      case 'weight-metric':\n        submeasure = 'grams';\n        break;\n    }\n\n    ;\n    console.log(event.target.value);\n    dispatch({\n      type: CHANGE_MEASURE_TYPE,\n      measureType: value\n    });\n  } //Metric or Imperial\n\n\n  function handleSystemChange(event) {\n    const value = event.target.value;\n    dispatch({\n      type: CHANGE_MEASURE_SYSTEM,\n      measureSystem: value\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleSystemChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"metric\",\n        children: \"M\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"imperial\",\n        children: \"I\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleTypeChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"weight\",\n        children: \"WEIGHT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"volume\",\n        children: \"VOLUME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"autoConvertToggle\",\n      children: \"autoconvert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"autoConvertToggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ToggleMeasure, \"AaULK2aEGk5riJKW01t0FPXyxro=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ToggleMeasure;\nexport default ToggleMeasure;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToggleMeasure\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/ToggleMeasure/index.js"],"names":["React","useState","useStoreContext","CHANGE_MEASURE_TYPE","CHANGE_MEASURE_SYSTEM","ToggleMeasure","state","dispatch","handleTypeChange","event","preventDefault","value","target","measure","measureSystem","submeasure","console","log","type","measureType","handleSystemChange"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,mBAAT,EAA8BC,qBAA9B,QAA2D,qBAA3D;;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AACrB,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBL,eAAe,EAA3C,CADqB,CAGrB;AACA;;AACA,WAASM,gBAAT,CAA0BC,KAA1B,EAAiC;AAC7BA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaD,KAA3B;AACA,UAAME,OAAO,GAAI,GAAEF,KAAM,IAAGL,KAAK,CAACQ,aAAc,EAAhD;AACA,UAAMC,UAAU,GAAG,EAAnB;;AACA,YAAQF,OAAR;AACI,WAAK,eAAL;AACIE,QAAAA,UAAU,GAAG,OAAb;AACA;;AACJ,WAAK,eAAL;AACIA,QAAAA,UAAU,GAAG,OAAb;AACA;;AACJ,WAAK,eAAL;AACIA,QAAAA,UAAU,GAAG,OAAb;AACA;;AACJ,WAAK,eAAL;AACIA,QAAAA,UAAU,GAAG,OAAb;AACA;AAZR;;AAaC;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACG,MAAN,CAAaD,KAAzB;AAEAJ,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAEf,mBADD;AAELgB,MAAAA,WAAW,EAAER;AAFR,KAAD,CAAR;AAIH,GA/BoB,CAiCrB;;;AACA,WAASS,kBAAT,CAA4BX,KAA5B,EAAmC;AAE/B,UAAME,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaD,KAA3B;AAEAJ,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAEd,qBADD;AAELU,MAAAA,aAAa,EAAEH;AAFV,KAAD,CAAR;AAIH;;AAED,sBACI;AAAA,4BAGI;AAAQ,MAAA,QAAQ,EAAES,kBAAlB;AAAA,8BACI;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAQI;AAAQ,MAAA,QAAQ,EAAEZ,gBAAlB;AAAA,8BACQ;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADR,eAEQ;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFR;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eAYI;AAAO,MAAA,OAAO,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ,eAaI;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,EAAE,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;GA7DQH,a;UACuBH,e;;;KADvBG,a;AA+DT,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { CHANGE_MEASURE_TYPE, CHANGE_MEASURE_SYSTEM } from '../../utils/actions';\n\nfunction ToggleMeasure() {\n    const [ state, dispatch ] = useStoreContext();\n\n    //Each time form is changed, update GlobalState\n    //Weight or Volume\n    function handleTypeChange(event) {\n        event.preventDefault();\n\n        const value = event.target.value;\n        const measure = `${value}-${state.measureSystem}`;\n        const submeasure = '';\n        switch (measure) {\n            case 'weight-metric':\n                submeasure = 'grams';\n                break;\n            case 'weight-metric':\n                submeasure = 'grams';\n                break;\n            case 'weight-metric':\n                submeasure = 'grams';\n                break;\n            case 'weight-metric':\n                submeasure = 'grams';\n                break;    \n        };\n        console.log(event.target.value);\n\n        dispatch({\n            type: CHANGE_MEASURE_TYPE,\n            measureType: value\n        });\n    }\n\n    //Metric or Imperial\n    function handleSystemChange(event) {\n\n        const value = event.target.value;\n\n        dispatch({\n            type: CHANGE_MEASURE_SYSTEM,\n            measureSystem: value\n        }); \n    }\n\n    return (\n        <form> \n            {/* Measurement Options */}\n            {/* system */}\n            <select onChange={handleSystemChange}>\n                <option value=\"metric\">M</option>\n                <option value=\"imperial\">I</option>\n            </select>\n            {/* type */}\n            <select onChange={handleTypeChange}>\n                    <option value=\"weight\">WEIGHT</option>\n                    <option value=\"volume\">VOLUME</option>\n            </select>\n            <label htmlFor=\"autoConvertToggle\">autoconvert</label>\n            <input type=\"checkbox\" id=\"autoConvertToggle\"></input>\n        </form>\n    )\n}\n\nexport default ToggleMeasure;"]},"metadata":{},"sourceType":"module"}