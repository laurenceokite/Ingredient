{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RenderIngredient(_ref) {\n  _s();\n\n  let {\n    ingredient\n  } = _ref;\n  console.log(ingredient);\n  const [state] = useStoreContext();\n  const measurementUnit = state.measurementUnit;\n  const measurementSystem = state.measurementSystem;\n\n  function handleUnitChange(event) {\n    const newUnit = event.target.value;\n    setIngredientState({});\n  } //convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\n\n\n  function convertMeasurementToString(measurement) {\n    if (measurement) {\n      //if measurement is in pounds send to displayPounds function for further formatting\n      if (measurement) {\n        return displayPounds(measurement);\n      } else {\n        return (Math.round(measurement * 100) / 100).toLocaleString();\n      }\n    } else {\n      //if no measurement\n      return false;\n    } //format pounds for display as string\n\n\n    function displayPounds(measurement) {\n      const poundsInt = parseInt(measurement).toLocaleString();\n      const remainder = measurement % 1;\n      const remainderAsOunces = (remainder * 16).toFixed(1);\n\n      if (remainder) {\n        return `${poundsInt}: ${remainderAsOunces}`;\n      } else if (measurement) {\n        return measurement;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: ingredient.ingredient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RenderIngredient, \"OjKJ3WWoA2ZQTKNXEIIIM9EJwiI=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = RenderIngredient;\nexport default RenderIngredient;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderIngredient\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js"],"names":["React","useState","useEffect","useStoreContext","RenderIngredient","ingredient","console","log","state","measurementUnit","measurementSystem","handleUnitChange","event","newUnit","target","value","setIngredientState","convertMeasurementToString","measurement","displayPounds","Math","round","toLocaleString","poundsInt","parseInt","remainder","remainderAsOunces","toFixed"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,eAAT,QAAgC,yBAAhC;;;AAGA,SAASC,gBAAT,OAA0C;AAAA;;AAAA,MAAhB;AAAEC,IAAAA;AAAF,GAAgB;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,QAAM,CAAEG,KAAF,IAAYL,eAAe,EAAjC;AACA,QAAMM,eAAe,GAAGD,KAAK,CAACC,eAA9B;AACA,QAAMC,iBAAiB,GAAGF,KAAK,CAACE,iBAAhC;;AAEA,WAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC7B,UAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA7B;AAEAC,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AAEH,GAXqC,CAatC;;;AACA,WAASC,0BAAT,CAAoCC,WAApC,EAAiD;AAC7C,QAAIA,WAAJ,EAAiB;AACb;AACA,UAAIA,WAAJ,EAAiB;AACb,eAAOC,aAAa,CAACD,WAAD,CAApB;AACH,OAFD,MAGK;AACD,eAAO,CAACE,IAAI,CAACC,KAAL,CAAWH,WAAW,GAAC,GAAvB,IAA4B,GAA7B,EAAkCI,cAAlC,EAAP;AACH;AACJ,KARD,MASK;AACD;AACA,aAAO,KAAP;AACH,KAb4C,CAe7C;;;AACA,aAASH,aAAT,CAAuBD,WAAvB,EAAoC;AAChC,YAAMK,SAAS,GAAGC,QAAQ,CAACN,WAAD,CAAR,CAAsBI,cAAtB,EAAlB;AACA,YAAMG,SAAS,GAAGP,WAAW,GAAG,CAAhC;AACA,YAAMQ,iBAAiB,GAAG,CAACD,SAAS,GAAC,EAAX,EAAeE,OAAf,CAAuB,CAAvB,CAA1B;;AAEA,UAAIF,SAAJ,EAAe;AACX,eAAQ,GAAEF,SAAU,KAAIG,iBAAkB,EAA1C;AACH,OAFD,MAGK,IAAIR,WAAJ,EAAiB;AAClB,eAAOA,WAAP;AACH,OAFI,MAGA;AACD,eAAO,KAAP;AACH;AACJ;AACJ;;AAED,sBACI;AAAA,2BACI;AAAA,gBAAMb,UAAU,CAACA;AAAjB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;GAjEQD,gB;UAEaD,e;;;KAFbC,gB;AAmET,eAAeA,gBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\n\nfunction RenderIngredient({ ingredient }) {\n    console.log(ingredient);\n    const [ state ] = useStoreContext();\n    const measurementUnit = state.measurementUnit;\n    const measurementSystem = state.measurementSystem;\n\n    function handleUnitChange(event) {\n        const newUnit = event.target.value;\n\n        setIngredientState({\n        }) \n    }\n\n    //convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\n    function convertMeasurementToString(measurement) {\n        if (measurement) {\n            //if measurement is in pounds send to displayPounds function for further formatting\n            if (measurement) {\n                return displayPounds(measurement);\n            }\n            else {\n                return (Math.round(measurement*100)/100).toLocaleString();\n            }\n        }\n        else {\n            //if no measurement\n            return false;\n        }\n\n        //format pounds for display as string\n        function displayPounds(measurement) {\n            const poundsInt = parseInt(measurement).toLocaleString();\n            const remainder = measurement % 1;\n            const remainderAsOunces = (remainder*16).toFixed(1);\n            \n            if (remainder) {\n                return `${poundsInt}: ${remainderAsOunces}`;\n            }\n            else if (measurement) {\n                return measurement;\n            } \n            else {\n                return false;\n            }\n        }\n    }\n\n    return(\n        <div>\n            <div>{ingredient.ingredient}</div>\n            {/*\n            <div>\n                { ingredient.amount \n                    ? (<div>{ingredientMeasurementString}</div>)\n                    : (<form>\n                        <input type=\"text\" placeholder=\"No Amt.\"/>\n                    </form>)\n                }        \n            </div>\n\n            \n\n            */}  \n        </div>\n    )\n}\n\nexport default RenderIngredient;"]},"metadata":{},"sourceType":"module"}