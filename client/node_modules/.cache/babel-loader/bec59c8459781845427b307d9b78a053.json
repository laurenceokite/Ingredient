{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js\",\n    _s = $RefreshSig$();\n\nimport { findAllByAltText } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { Ingredient, relativeValues } from \"../../utils/Ingredient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RenderIngredient(_ref) {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const [state] = useStoreContext();\n  const {\n    globalUnit: unit,\n    globalSystem: system\n  } = state;\n  const ingredient = new Ingredient(data, system, unit);\n  const name = ingredient.name;\n  const defaultUnit = ingredient[unit].default;\n  const [localUnit, setLocalUnit] = useState(defaultUnit);\n\n  const returnMeasurement = () => {\n    console.log();\n\n    const stateContainsDefault = () => {\n      for (const [key, value] of Object.entries(relativeValues[system][unit])) {\n        if (key === defaultUnit) return true;\n      }\n    };\n\n    if (stateContainsDefault) {\n      const string = ingredient.default(unit);\n      return string;\n    }\n  };\n\n  console.log(returnMeasurement()); //format pounds for display as string\n\n  const displayPounds = measurement => {\n    const pounds = parseInt(measurement);\n    const remainder = measurement % 1;\n    const ounces = (remainder * 16).toFixed(1);\n\n    if (remainder) {\n      return `${pounds}: ${ounces}`;\n    } else if (measurement) {\n      return measurement;\n    } else {\n      return false;\n    }\n  }; //convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\n\n\n  const convertMeasurementToString = measurement => {\n    if (measurement) {\n      //if measurement is in pounds send to displayPounds function for further formatting\n      if (measurement) {\n        return displayPounds(measurement);\n      } else {\n        return (Math.round(measurement * 100) / 100).toLocaleString();\n      }\n    } else {\n      //if no measurement\n      return false;\n    }\n  };\n\n  const handleUnitChange = event => {\n    const value = event.target.value;\n    setLocalUnit(value);\n    console.log(localUnit);\n  };\n\n  const measurement = returnMeasurement();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: measurement ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: measurement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"No Amt.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"unitSelect\",\n      onChange: handleUnitChange,\n      children: [system === 'us' && (unit === 'volume' ? /*#__PURE__*/_jsxDEV(\"select\", {\n        defaultValue: localUnit,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-factor\": \"3785\",\n          value: \"gallons\",\n          children: \"G\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-factor\": \"946\",\n          value: \"quarts\",\n          children: \"Q\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-factor\": \"240\",\n          value: \"cups\",\n          children: \"C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-factor\": \"14.787\",\n          value: \"tablespoons\",\n          children: \"T\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-factor\": \"4.929\",\n          value: \"teaspoons\",\n          children: \"t\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-factor\": \"29.574\",\n          value: \"fluidOunces\",\n          children: \"fl. oz.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(\"select\", {\n        defaultValue: localUnit,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-factor\": \"454\",\n          value: \"pounds\",\n          children: \"lbs.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-factor\": \"28.35\",\n          value: \"ounces\",\n          children: \"oz.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this)), system === 'metric' && (unit === 'weight' ? /*#__PURE__*/_jsxDEV(\"select\", {\n        defaultValue: localUnit,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-factor\": \"1000\",\n          value: \"liters\",\n          children: \"L\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-factor\": \"1\",\n          value: \"milliliters\",\n          children: \"mL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(\"select\", {\n        defaultValue: localUnit,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-factor\": \"1000\",\n          value: \"kilograms\",\n          children: \"kg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-factor\": \"1\",\n          value: \"grams\",\n          children: \"g\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-factor\": \".001\",\n          value: \"milligrams\",\n          children: \"mg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 22\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RenderIngredient, \"+5qxH+kcOif0gVV7/TUxhztcbcI=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = RenderIngredient;\nexport default RenderIngredient;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderIngredient\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js"],"names":["findAllByAltText","React","useState","useEffect","useStoreContext","Ingredient","relativeValues","RenderIngredient","data","state","globalUnit","unit","globalSystem","system","ingredient","name","defaultUnit","default","localUnit","setLocalUnit","returnMeasurement","console","log","stateContainsDefault","key","value","Object","entries","string","displayPounds","measurement","pounds","parseInt","remainder","ounces","toFixed","convertMeasurementToString","Math","round","toLocaleString","handleUnitChange","event","target"],"mappings":"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","sourcesContent":["import { findAllByAltText } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { Ingredient, relativeValues } from \"../../utils/Ingredient\";\n\n\nfunction RenderIngredient({ data }) {\n    const [ state ] = useStoreContext();\n    const { globalUnit: unit, globalSystem: system } = state;\n    \n\n    const ingredient = new Ingredient(data, system, unit);\n    const name = ingredient.name;\n    const defaultUnit = ingredient[unit].default;\n    \n    const [localUnit, setLocalUnit] = useState(defaultUnit);\n\n    const returnMeasurement = () => {\n        console.log();\n        const stateContainsDefault = (() => {for (const [key, value] of Object.entries(relativeValues[system][unit])) {\n            if (key === defaultUnit) return true;\n        }});\n\n        if (stateContainsDefault) {\n            const string = ingredient.default(unit);\n            return string;\n        }\n\n    }\n\n    console.log(returnMeasurement());\n\n    //format pounds for display as string\n    const displayPounds = (measurement) => {\n        const pounds = parseInt(measurement);\n        const remainder = measurement % 1;\n        const ounces = (remainder*16).toFixed(1);\n        \n        if (remainder) {\n            return `${pounds}: ${ounces}`;\n        }\n        else if (measurement) {\n            return measurement;\n        } \n        else {\n            return false;\n        }\n    }\n\n    //convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\n    const convertMeasurementToString = (measurement) => {\n        if (measurement) {\n            //if measurement is in pounds send to displayPounds function for further formatting\n            if (measurement) {\n                return displayPounds(measurement);\n            }\n            else {\n                return (Math.round(measurement*100)/100).toLocaleString();\n            }\n        }\n        else {\n            //if no measurement\n            return false;\n        }\n    }\n\n    const handleUnitChange = event => {\n        const value = event.target.value;\n        setLocalUnit(value);\n        console.log(localUnit)\n    }\n\n    const measurement = returnMeasurement();\n\n    return(\n        <div>\n            <div>{name}</div>\n            <div>\n                {  measurement\n                    ? (<div>{measurement}</div>)\n                    : (<form>\n                        <input type=\"text\" placeholder=\"No Amt.\"/>\n                    </form>)\n                }        \n            </div>\n            <div id='unitSelect' onChange={handleUnitChange}>\n                {(system === 'us') && ((unit === 'volume') ?\n                    (<select defaultValue={localUnit}>\n                        <option data-factor=\"3785\" value=\"gallons\">G</option>\n                        <option data-factor=\"946\" value=\"quarts\">Q</option>\n                        <option data-factor=\"240\" value=\"cups\">C</option>\n                        <option data-factor=\"14.787\" value=\"tablespoons\">T</option>\n                        <option data-factor=\"4.929\" value=\"teaspoons\">t</option>\n                        <option data-factor=\"29.574\" value=\"fluidOunces\">fl. oz.</option>\n                    </select>) :\n                    (\n                    <select defaultValue={localUnit}>\n                        <option data-factor=\"454\" value=\"pounds\">lbs.</option>\n                        <option data-factor=\"28.35\" value=\"ounces\">oz.</option>\n                    </select>\n                    )\n                )}\n\n                {(system === 'metric') && ((unit === 'weight') ?\n                    (<select defaultValue={localUnit}>\n                        <option data-factor=\"1000\" value=\"liters\">L</option>\n                        <option data-factor=\"1\" value=\"milliliters\">mL</option>\n                    </select>\n                    ) :\n\n                    (<select defaultValue={localUnit}>\n                        <option data-factor=\"1000\" value=\"kilograms\">kg</option>\n                        <option data-factor=\"1\" value=\"grams\">g</option>\n                        <option data-factor=\".001\" value=\"milligrams\">mg</option>\n                    </select>\n                    )   \n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default RenderIngredient;"]},"metadata":{},"sourceType":"module"}