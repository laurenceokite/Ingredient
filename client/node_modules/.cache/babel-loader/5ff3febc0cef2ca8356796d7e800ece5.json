{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ViewEditRecipe() {\n  _s();\n\n  const [state, dispatch] = useStoreContext();\n  const [addIngredientState, setAddIngredientState] = useState({\n    //This is how data will be structured in each ingredient\n    ingredient: '',\n    amount: {\n      'weight-metric': {\n        value: '',\n        submeasure: 'grams'\n      },\n      'weight-imperial': {\n        value: '',\n        submeasure: 'ounces'\n      },\n      'volume-metric': {\n        value: '',\n        submeasure: 'milliliters'\n      },\n      'volume-imperial': {\n        value: '',\n        submeasure: 'cups'\n      }\n    }\n  }); //recipe name and array of ingredients\n\n  const [recipeState, setRecipeState] = useState({\n    recipe: '',\n    ingredients: []\n  }); //'measure' tells us what measurement to display based on which options are selected\n\n  const measure = `${state.measureType}-${state.measureSystem}`;\n  const [previousMeasure, setPreviousMeasure] = useState(measure); // Push new ingredient to 'ingredients' array\n\n  function addIngredient(event) {\n    event.preventDefault(); //convert value string to floating-point number, formatted to six decimal points\n\n    const valueParsed = parseFloat(addIngredientState.amount[measure].value).toFixed(6);\n    console.log(valueParsed);\n    setAddIngredientState({ ...addIngredientState,\n      amount: { ...addIngredientState.amount,\n        [measure]: {\n          value: valueParsed,\n          ...addIngredientState.amount[measure]\n        }\n      }\n    });\n    console.log(setAddIngredientState);\n    setRecipeState({ //Add ingredient to array of objects in recipeState\n      ...recipeState,\n      ingredients: [...recipeState.ingredients, {\n        ingredient: addIngredientState.ingredient,\n        amount: { ...addIngredientState.amount\n        }\n      }]\n    }); // Reset ingredient input form to original state\n\n    setAddIngredientState({\n      ingredient: '',\n      amount: {\n        'weight-metric': {\n          value: '',\n          submeasure: 'grams'\n        },\n        'weight-imperial': {\n          value: '',\n          submeasure: 'ounces'\n        },\n        'volume-metric': {\n          value: '',\n          submeasure: 'milliliters'\n        },\n        'volume-imperial': {\n          value: '',\n          submeasure: 'cups'\n        }\n      }\n    });\n  }\n\n  ; // Each time text is entered to input, update formState\n  //Ingredient Input\n\n  const handleNameChange = event => {\n    const {\n      value\n    } = event.target;\n    setAddIngredientState({ ...addIngredientState,\n      ingredient: value\n    });\n  }; //Amount Input\n\n\n  const handleAmountChange = event => {\n    const {\n      value\n    } = event.target;\n    const submeasure = document.getElementById('measurementSelect').firstChild.value;\n    setAddIngredientState({ ...addIngredientState,\n      amount: { ...addIngredientState.amount,\n        [measure]: {\n          value: value,\n          submeasure: submeasure\n        }\n      }\n    });\n    console.log(addIngredientState);\n  }; //If global measure has been changed, clear state and move amount to new measure\n\n\n  useEffect(() => {\n    const submeasure = document.getElementById('measurementSelect').firstChild.value;\n\n    if (previousMeasure && measure !== previousMeasure) {\n      const previousAmount = addIngredientState.amount[previousMeasure].value;\n      setAddIngredientState({ ...addIngredientState,\n        amount: { ...addIngredientState.amount,\n          [previousMeasure]: {\n            value: '',\n            submeasure: addIngredientState.amount[previousMeasure].submeasure\n          },\n          [measure]: {\n            value: previousAmount,\n            submeasure: submeasure\n          }\n        }\n      });\n      setPreviousMeasure(measure);\n    }\n  }, [previousMeasure, measure, addIngredientState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ToggleMeasure, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: recipeState.ingredients.map(ingredient => /*#__PURE__*/_jsxDEV(RenderIngredient, {\n        name: ingredient.ingredient,\n        amount: ingredient.amount,\n        measure: measure\n      }, ingredient.ingredient, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addIngredient,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Ingredient\",\n          id: \"ingredientNameInput\",\n          name: \"ingredient\",\n          value: addIngredientState.ingredient,\n          autoComplete: \"off\",\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Amount\",\n          id: \"ingredientAmtInput\",\n          name: \"amount\",\n          value: addIngredientState.amount[measure].value,\n          onChange: handleAmountChange,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"measurementSelect\",\n        children: [measure === 'volume-imperial' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"imperialVolumeSelect\",\n          defaultValue: \"cups\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gallons\",\n            children: \"G\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"quarts\",\n            children: \"Q\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"cups\",\n            children: \"C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"tablespoons\",\n            children: \"T\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"teaspoons\",\n            children: \"t\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"fluid-ounces\",\n            children: \"fl. oz.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 25\n        }, this), measure === 'weight-imperial' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"imperialWeightSelect\",\n          defaultValue: \"ounces\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"pounds\",\n            children: \"lbs.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ounces\",\n            children: \"oz.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 25\n        }, this), measure === 'volume-metric' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"metricVolumeSelect\",\n          defaultValue: \"milliliters\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"liters\",\n            children: \"L\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"deciliters\",\n            children: \"dL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"milliliters\",\n            children: \"mL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 25\n        }, this), measure === 'weight-metric' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"metricWeightSelect\",\n          defaultValue: \"grams\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"kilograms\",\n            children: \"kg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"grams\",\n            children: \"g\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"milligrams\",\n            children: \"mg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewEditRecipe, \"z/1uWQEmTu4CxilZaXaYfeZ/V5E=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ViewEditRecipe;\n;\nexport default ViewEditRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewEditRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js"],"names":["React","useEffect","useState","ToggleMeasure","RenderIngredient","useStoreContext","ViewEditRecipe","state","dispatch","addIngredientState","setAddIngredientState","ingredient","amount","value","submeasure","recipeState","setRecipeState","recipe","ingredients","measure","measureType","measureSystem","previousMeasure","setPreviousMeasure","addIngredient","event","preventDefault","valueParsed","parseFloat","toFixed","console","log","handleNameChange","target","handleAmountChange","document","getElementById","firstChild","previousAmount","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\nfunction ViewEditRecipe() {\n    const [ state, dispatch ] = useStoreContext();\n    const [addIngredientState, setAddIngredientState] = useState({ \n        //This is how data will be structured in each ingredient\n        ingredient: '', amount: {\n            'weight-metric':\n            {\n                value: '',\n                submeasure: 'grams'\n            },\n            'weight-imperial':\n            {\n                value: '',\n                submeasure: 'ounces'\n            },\n            'volume-metric':\n            {\n                value: '',\n                submeasure: 'milliliters'\n            },\n            'volume-imperial':\n            {\n                value: '',\n                submeasure: 'cups'\n            }\n        }\n    });\n    //recipe name and array of ingredients\n    const [recipeState, setRecipeState] = useState({ \n        recipe: '', \n        ingredients: []\n    });\n    //'measure' tells us what measurement to display based on which options are selected\n    const measure = `${state.measureType}-${state.measureSystem}`;\n    const [previousMeasure, setPreviousMeasure] = useState(measure);\n    \n    // Push new ingredient to 'ingredients' array\n    function addIngredient(event) {\n        event.preventDefault();\n        //convert value string to floating-point number, formatted to six decimal points\n        const valueParsed = parseFloat(addIngredientState.amount[measure].value).toFixed(6);\n\n        console.log(valueParsed);\n\n        setAddIngredientState({\n            ...addIngredientState,\n            amount: {\n                ...addIngredientState.amount,\n                [measure]:\n                {\n                    value: valueParsed,\n                    ...addIngredientState.amount[measure]\n                }\n            }\n        });\n\n        console.log(setAddIngredientState);\n\n        setRecipeState({\n            //Add ingredient to array of objects in recipeState\n            ...recipeState,\n            ingredients: [...recipeState.ingredients, {\n                ingredient: addIngredientState.ingredient,\n                    amount: {\n                        ...addIngredientState.amount\n                    }  \n            }]\n        });\n\n        // Reset ingredient input form to original state\n        setAddIngredientState({\n            ingredient: '',\n            amount: {\n                'weight-metric':\n                {\n                    value: '',\n                    submeasure: 'grams'\n                },\n                'weight-imperial':\n                {\n                    value: '',\n                    submeasure: 'ounces'\n                },\n                'volume-metric':\n                {\n                    value: '',\n                    submeasure: 'milliliters'\n                },\n                'volume-imperial':\n                {\n                    value: '',\n                    submeasure: 'cups'\n                }\n            }\n        });\n    };\n\n    // Each time text is entered to input, update formState\n    //Ingredient Input\n    const handleNameChange = event => {\n        const { value } = event.target;\n        setAddIngredientState({\n          ...addIngredientState,\n          ingredient: value\n        });\n    };\n    //Amount Input\n    const handleAmountChange = event => {\n        const { value } = event.target;\n        const submeasure = document.getElementById('measurementSelect').firstChild.value;\n        \n        setAddIngredientState({\n            ...addIngredientState,\n            amount: {\n                ...addIngredientState.amount,\n                [measure]:\n                {\n                    value: value,\n                    submeasure: submeasure\n                }\n            }\n        });\n\n        console.log(addIngredientState);\n    };\n\n    //If global measure has been changed, clear state and move amount to new measure\n    useEffect(()=>{\n        const submeasure = document.getElementById('measurementSelect').firstChild.value;\n\n        if (previousMeasure && measure !== previousMeasure) {\n            const previousAmount = addIngredientState.amount[previousMeasure].value;\n            setAddIngredientState({\n                ...addIngredientState,\n                amount: {\n                    ...addIngredientState.amount,\n                    [previousMeasure]:\n                    {\n                        value: '',\n                        submeasure: addIngredientState.amount[previousMeasure].submeasure\n                    },\n                    [measure]:\n                    {\n                        value: previousAmount,\n                        submeasure: submeasure\n                    }\n                  }\n            });\n            setPreviousMeasure(measure);\n        }\n\n    }, [previousMeasure, measure, addIngredientState]);\n\n    return(\n        <div>\n            {/* Change measurement type here */}\n            <ToggleMeasure/>\n\n            {/* Map array of ingredients */}\n            <div>\n                    {recipeState.ingredients.map(ingredient => (\n                        <RenderIngredient key={ingredient.ingredient} name={ingredient.ingredient} amount={ingredient.amount} measure={measure}/>\n                    ))}\n            </div>\n\n            {/* Ingredient Input */}\n                <form onSubmit={addIngredient}>\n                    <div>\n                        <input type=\"text\" \n                            placeholder=\"Ingredient\" \n                            id='ingredientNameInput'\n                            name='ingredient'\n                            value={addIngredientState.ingredient}\n                            autoComplete=\"off\" \n                            onChange={handleNameChange}/>\n\n                        <input type=\"text\" \n                            placeholder=\"Amount\"\n                            id='ingredientAmtInput'\n                            name='amount'\n                            value={addIngredientState.amount[measure].value}\n                            onChange={handleAmountChange}\n                            autoComplete=\"off\"/>\n                    </div>\n\n                    {/* Measurement Select, Displays each set of options conditionally based on state */}\n\n                    {/* if Imperial */}\n                    <div id='measurementSelect'>\n                        {(measure === 'volume-imperial') && (\n                        <select className=\"imperialVolumeSelect\" defaultValue='cups'>\n                            <option value=\"gallons\">G</option>\n                            <option value=\"quarts\">Q</option>\n                            <option value=\"cups\">C</option>\n                            <option value=\"tablespoons\">T</option>\n                            <option value=\"teaspoons\">t</option>\n                            <option value=\"fluid-ounces\">fl. oz.</option>\n                        </select>\n                        )}\n                        \n                        {(measure === 'weight-imperial') && (\n                        <select className=\"imperialWeightSelect\" defaultValue=\"ounces\">\n                            <option value=\"pounds\">lbs.</option>\n                            <option value=\"ounces\">oz.</option>\n                        </select>\n                        )}\n                        {/* if Metric */}\n                        {(measure === 'volume-metric') && (\n                        <select className=\"metricVolumeSelect\" defaultValue=\"milliliters\">\n                            <option value=\"liters\">L</option>\n                            <option value=\"deciliters\">dL</option>\n                            <option value=\"milliliters\">mL</option>\n                        </select>\n                        )}\n\n                        {(measure === 'weight-metric') && (\n                        <select className=\"metricWeightSelect\" defaultValue=\"grams\">\n                            <option value=\"kilograms\">kg</option>\n                            <option value=\"grams\">g</option>\n                            <option value=\"milligrams\">mg</option>\n                        </select>\n                        )}\n                    </div> \n                    {/* Add Ingredient Button */}\n                    <div>\n                        <input type=\"submit\" value=\"+\"></input>\n                    </div>\n                </form>\n        </div>\n    )\n};\n\nexport default ViewEditRecipe;"]},"metadata":{},"sourceType":"module"}