{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { relativeValues } from \"../RenderIngredient/relativeValues\";\nimport { EDIT_RECIPE } from '../../utils/actions';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ViewEditRecipe() {\n  _s();\n\n  const [state, dispatch] = useStoreContext();\n  const { ...currentUnits\n  } = relativeValues[state.globalSystem][state.globalUnit];\n\n  const selected = () => {\n    for (const [key, value] of Object.entries(currentUnits)) {\n      if (currentUnits[key].selected) {\n        return {\n          initUnit: key,\n          initFactor: currentUnits[key].value\n        };\n      }\n    }\n  };\n\n  const {\n    initUnit,\n    initFactor\n  } = selected();\n  const [formState, setFormState] = useState({\n    name: '',\n    amount: false,\n    unit: initUnit,\n    factor: initFactor\n  });\n\n  const addIngredient = event => {\n    event.preventDefault();\n    const standardVal = formState.amount * formState.factor;\n    dispatch({\n      type: EDIT_RECIPE,\n      recipeState: { ...state.recipeState,\n        ingredients: [...recipeState.ingredients, {\n          name: formState.name,\n          [state.globalUnit]: {\n            value: standardVal,\n            default: formState.unit\n          },\n          index: state.recipeState.ingredients.length\n        }]\n      }\n    }); // Reset ingredient input form to original state\n\n    setFormState({\n      name: '',\n      amount: false,\n      unit: initUnit,\n      factor: initFactor\n    });\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n\n    if (name === 'unit') {\n      const index = event.target.options.selectedIndex;\n      const options = event.target.options;\n      setFormState({ ...formState,\n        [name]: value,\n        factor: options[index].dataset.factor\n      });\n      return;\n    }\n\n    setFormState({ ...formState,\n      [name]: value\n    });\n  };\n\n  console.log(formState.unit);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"viewEditRecipe\",\n    children: [/*#__PURE__*/_jsxDEV(ToggleMeasure, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: recipeState.ingredients.map(ingredient => /*#__PURE__*/_jsxDEV(RenderIngredient, {\n        data: ingredient,\n        currentUnits: currentUnits\n      }, ingredient.index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addIngredient,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ingredient-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Ingredient\",\n            id: \"ingredientNameInput\",\n            name: \"name\",\n            value: formState.name,\n            autoComplete: \"off\",\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Amount\",\n            id: \"ingredientAmtInput\",\n            name: \"amount\",\n            value: formState.amount,\n            onChange: handleChange,\n            autoComplete: \"off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"measurementSelect\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: handleChange,\n            name: \"unit\",\n            defaultValue: formState.unit,\n            children: Object.entries(currentUnits).map(_ref => {\n              let [key, obj] = _ref;\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                \"data-factor\": obj.value,\n                value: key,\n                children: obj.abbrev\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewEditRecipe, \"uh0Yxo7zjIwSt3Fa6MxWVuw23Ac=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ViewEditRecipe;\n;\nexport default ViewEditRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewEditRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js"],"names":["React","useState","ToggleMeasure","RenderIngredient","useStoreContext","relativeValues","EDIT_RECIPE","ViewEditRecipe","state","dispatch","currentUnits","globalSystem","globalUnit","selected","key","value","Object","entries","initUnit","initFactor","formState","setFormState","name","amount","unit","factor","addIngredient","event","preventDefault","standardVal","type","recipeState","ingredients","default","index","length","handleChange","target","options","selectedIndex","dataset","console","log","map","ingredient","obj","abbrev"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { relativeValues } from \"../RenderIngredient/relativeValues\";\nimport { EDIT_RECIPE } from '../../utils/actions';\nimport './index.css';\n\nfunction ViewEditRecipe() {\n    const [ state, dispatch ] = useStoreContext();\n\n    const {...currentUnits} = relativeValues[state.globalSystem][state.globalUnit];\n    const selected = () => {\n        for (const [key, value] of Object.entries(currentUnits)) {\n            if (currentUnits[key].selected) {\n                return {\n                    initUnit: key,\n                    initFactor: currentUnits[key].value\n                };\n            } \n        }\n    }\n    \n    const { initUnit, initFactor } = selected();\n\n    const [formState, setFormState] = useState({ \n        name: '',\n        amount: false,\n        unit: initUnit,\n        factor: initFactor\n    });\n\n\n    const addIngredient = (event) => {\n        event.preventDefault();\n\n        const standardVal = formState.amount * formState.factor;\n        \n        dispatch({\n            type: EDIT_RECIPE,\n            recipeState: {\n                ...state.recipeState,\n                ingredients: [\n                    ...recipeState.ingredients, \n                    {\n                        name: formState.name,\n                        [state.globalUnit]: {\n                            value: standardVal,\n                            default: formState.unit\n                        },\n                        index: state.recipeState.ingredients.length\n                    }\n                ]\n            }\n        });\n\n        // Reset ingredient input form to original state\n        setFormState({\n            name: '',\n            amount: false,\n            unit: initUnit,\n            factor: initFactor\n        });\n    };\n\n    const handleChange = event => {\n        const { value, name } = event.target;\n\n        if (name === 'unit') {\n            const index = event.target.options.selectedIndex;\n            const options = event.target.options\n\n            setFormState({\n                ...formState,\n                [name]: value,\n                factor: options[index].dataset.factor\n            });\n\n            return;\n        }\n\n        setFormState({\n          ...formState,\n          [name]: value\n        });\n    };\n\n    console.log(formState.unit);\n\n    return(\n        <div className='viewEditRecipe'>\n            {/* Change measurement type here */}\n            <ToggleMeasure/>\n\n            {/* Map array of ingredients */}\n            <table>\n                {recipeState.ingredients.map(ingredient => (\n                    <RenderIngredient key={ingredient.index} data={ingredient} currentUnits={currentUnits}/>\n                ))}\n            </table>\n\n            {/* Ingredient Input */}\n                <form onSubmit={addIngredient}>\n                    <div className='ingredient-input'>\n                        <div>\n                            <input type=\"text\" \n                                placeholder=\"Ingredient\" \n                                id='ingredientNameInput'\n                                name='name'\n                                value={formState.name}\n                                autoComplete=\"off\" \n                                onChange={handleChange}/>\n\n                            <input type=\"number\" \n                                placeholder=\"Amount\"\n                                id='ingredientAmtInput'\n                                name='amount'\n                                value={formState.amount}\n                                onChange={handleChange}\n                                autoComplete=\"off\"/>\n                        </div>\n\n                        {/* Measurement Select, Displays each set of options conditionally based on state */}\n                        <div id='measurementSelect'>\n                            <select onChange={handleChange} name='unit' defaultValue={formState.unit}>\n\n                                {Object.entries(currentUnits).map(([key, obj]) => (\n                                    <option data-factor={obj.value} key={key} value={key}>\n                                            {obj.abbrev}\n                                    </option>\n                                ))}\n\n                            </select>\n                        </div>\n                    </div> \n                    {/* Add Ingredient Button */}\n                    <input type=\"submit\" value=\"+\"></input>\n                </form>\n        </div>\n    )\n};\n\nexport default ViewEditRecipe;"]},"metadata":{},"sourceType":"module"}