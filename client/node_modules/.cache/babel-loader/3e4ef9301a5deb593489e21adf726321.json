{"ast":null,"code":"class Ingredient {\n  constructor(data) {\n    this.metric_weight = [{\n      unit: 'milligrams',\n      divisor: .001,\n      abbrev: 'mg',\n      selected: false,\n      value: 0\n    }, {\n      unit: 'grams',\n      divisor: 1,\n      abbrev: 'g',\n      selected: true,\n      value: 0\n    }, {\n      unit: 'kilograms',\n      divisor: 1000,\n      abbrev: 'k',\n      selected: false,\n      value: 0\n    }];\n    this.us_weight = [{\n      unit: 'pounds',\n      divisor: 454,\n      abbrev: 'lbs.',\n      selected: false,\n      value: 0\n    }, {\n      unit: 'ounces',\n      divisor: 28,\n      abbrev: 'oz.',\n      selected: true,\n      value: 0\n    }];\n    this.metric_volume = [{\n      unit: 'milliliters',\n      divisor: 1,\n      abbrev: 'mL',\n      selected: true,\n      value: 0\n    }, {\n      unit: 'liters',\n      divisor: 1000,\n      abbrev: 'L',\n      selected: false,\n      value: 0\n    }];\n    this.us_volume = [{\n      unit: 'cups',\n      divisor: 240,\n      abbrev: 'C',\n      selected: true,\n      value: 0\n    }, {\n      unit: 'quarts',\n      divisor: 946,\n      abbrev: 'Q',\n      selected: false,\n      value: 0\n    }, {\n      unit: 'gallons',\n      divisor: 3785,\n      abbrev: 'G',\n      selected: false,\n      value: 0\n    }, {\n      unit: 'teaspoons',\n      divisor: 4.929,\n      abbrev: 'tsp.',\n      selected: false,\n      value: 0\n    }, {\n      unit: 'tablespoons',\n      divisor: 14.787,\n      abbrev: 'tbsp.',\n      selected: false,\n      value: 0\n    }, {\n      unit: 'fluidOunces',\n      divisor: 29.575,\n      abbrev: 'fl. oz.',\n      selected: false,\n      value: 0\n    }];\n    this.name = void 0;\n\n    if (data) {\n      this.name = data.name;\n      this.updateValue(data.state, data.unit, data.value);\n      this.updateSelected(data.state, data.unit);\n    }\n  } //return relevant units, based on global state \n\n\n  returnCurrentUnits(state) {\n    return this[state];\n  } //return data of unit with 'selected: true'\n\n\n  returnSelected(state) {\n    const selectedUnit = this[state].filter(unit => unit.selected)[0];\n    return selectedUnit;\n  } //changes selected to true on given unit, and all else in array to false\n\n\n  updateSelected(state, unit) {\n    this[state].forEach(unitData => {\n      if (unitData.unit === unit) {\n        unitData.selected = true;\n      } else unitData.selected = false;\n    });\n  } //update all relevant unit values, by giving new value of any unit\n\n\n  updateValue(state, unit, value) {\n    //retrieve index of requested unit\n    const unitIndex = this[state].findIndex(unitData => unitData.unit === unit); //get product of value and unit divisor\n\n    const product = this[state][unitIndex].divisor * value; //update each state relevant array in Ingredient\n\n    const update = units => {\n      units.forEach((unitData, index) => {\n        const thisValue = product / unitData.divisor;\n        unitData.value = thisValue;\n      });\n    };\n\n    if (state === ('metric_weight' || 'us_weight')) {\n      update(this.metric_weight);\n      update(this.us_weight);\n    }\n\n    if (state === ('metric_volume' || 'us_volume')) {\n      update(this.metric_volume);\n      update(this.us_volume);\n    }\n  }\n\n}\n\n;\nexport { Ingredient };","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/Ingredient.tsx"],"names":["Ingredient","constructor","data","metric_weight","unit","divisor","abbrev","selected","value","us_weight","metric_volume","us_volume","name","updateValue","state","updateSelected","returnCurrentUnits","returnSelected","selectedUnit","filter","forEach","unitData","unitIndex","findIndex","product","update","units","index","thisValue"],"mappings":"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","sourcesContent":["import { useStoreContext, GlobalSystems, GlobalUnits } from \"../../utils/GlobalState\";\n\ntype Unit = \n    'milligrams' | 'grams' | 'kilograms' |\n    'pounds' | 'ounces' |\n    'milliliters' | 'liters' |\n    'cups' | 'quarts' | 'gallons' | 'teaspoons' | 'tablespoons' | 'fluidOunces';\n\n\ninterface UnitInterface {\n    unit: string; \n    divisor: number;\n    abbrev: string; \n    selected: boolean; \n    value: number;\n}\n\ninterface IngredientInterface {\n    metric_weight: UnitInterface[];\n    us_weight: UnitInterface[];\n    metric_volume: UnitInterface[];\n    us_volume: UnitInterface[];\n}\n\ninterface IngredientDataInterface {\n    name: string;\n    value: number;\n    unit: string;\n    state: keyof IngredientInterface;\n}\n\nclass Ingredient implements IngredientInterface {\n    metric_weight = [\n        { unit: 'milligrams', divisor: .001, abbrev: 'mg', selected: false, value: 0 },\n        { unit: 'grams', divisor: 1, abbrev: 'g', selected: true, value: 0 },\n        { unit: 'kilograms', divisor: 1000, abbrev: 'k', selected: false, value: 0 }\n    ];   \n\n    us_weight = [\n        { unit: 'pounds', divisor: 454, abbrev: 'lbs.', selected: false , value: 0 },\n        { unit: 'ounces', divisor: 28, abbrev: 'oz.', selected: true, value: 0 }\n    ];\n\n    metric_volume = [\n        { unit: 'milliliters', divisor: 1, abbrev: 'mL', selected: true, value: 0 },\n        { unit: 'liters', divisor: 1000, abbrev: 'L', selected: false, value: 0 },\n    ];\n        \n    us_volume = [   \n        { unit: 'cups', divisor: 240, abbrev: 'C', selected: true, value: 0 },\n        { unit: 'quarts', divisor: 946, abbrev: 'Q', selected: false, value: 0 },\n        { unit: 'gallons', divisor: 3785, abbrev: 'G', selected: false, value: 0 },\n        { unit: 'teaspoons', divisor: 4.929, abbrev: 'tsp.', selected: false , value: 0},\n        { unit: 'tablespoons', divisor: 14.787, abbrev: 'tbsp.', selected: false, value: 0 },\n        { unit: 'fluidOunces', divisor: 29.575, abbrev: 'fl. oz.', selected: false, value: 0 }\n    ];\n\n    name?: string;\n\n    constructor(data: IngredientDataInterface | null) {\n        if (data) {\n            this.name = data.name;\n            this.updateValue(data.state, data.unit, data.value);\n            this.updateSelected(data.state, data.unit);\n        }\n    }\n\n    //return relevant units, based on global state \n    returnCurrentUnits(state: keyof IngredientInterface): UnitInterface[] {\n        return this[state];\n    }\n\n    //return data of unit with 'selected: true'\n    returnSelected(state: keyof IngredientInterface): UnitInterface {\n        const selectedUnit: UnitInterface = \n            this[state].filter(unit => unit.selected)[0];  \n\n        return selectedUnit;\n    }\n\n    //changes selected to true on given unit, and all else in array to false\n    updateSelected(state: keyof IngredientInterface, unit: string): void {\n        this[state].forEach(unitData => { \n            if (unitData.unit === unit) {\n                unitData.selected = true;\n            }\n            else unitData.selected = false;\n        });\n    }\n    \n    //update all relevant unit values, by giving new value of any unit\n    updateValue(state: keyof IngredientInterface, unit: string, value: number ): void {\n        //retrieve index of requested unit\n        const unitIndex: number = this[state].findIndex(unitData => unitData.unit === unit);\n\n        //get product of value and unit divisor\n        const product = this[state][unitIndex].divisor * value;\n\n        //update each state relevant array in Ingredient\n        const update = (units: UnitInterface[]) => {\n            units.forEach((unitData, index) => {\n                const thisValue = product / unitData.divisor;\n                unitData.value = thisValue;\n            });\n        }\n\n        if (state === ('metric_weight' || 'us_weight')) {\n            update(this.metric_weight);\n            update(this.us_weight);\n        }\n\n        if (state === ('metric_volume' || 'us_volume')) {\n            update(this.metric_volume);\n            update(this.us_volume);\n        }\n    }\n};\n\nexport { Ingredient, UnitInterface, IngredientInterface, IngredientDataInterface }\n\n"]},"metadata":{},"sourceType":"module"}