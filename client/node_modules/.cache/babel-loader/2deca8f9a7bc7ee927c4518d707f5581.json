{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { observer, useLocalObservable } from 'mobx-react-lite';\nimport { Container, Form, Table, Stack, Button } from 'react-bootstrap';\nimport ToggleGlobals from '../ToggleGlobals';\nimport RenderIngredient from '../RenderIngredient';\nimport UnitSelect from '../UnitSelect';\nimport { Ingredient } from './Ingredient';\nimport { Recipe } from './Recipe';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayRecipe = _s(observer(_c = _s(() => {\n  _s();\n\n  const recipe = useLocalObservable(() => new Recipe('metric', 'weight', 0));\n  const {\n    state,\n    data\n  } = recipe;\n  const selectedUnit = data.returnSelected(state).unit; //form data is collected in the shape of new Ingredient params\n\n  const formInitialState = {\n    name: '',\n    value: 0,\n    unit: selectedUnit,\n    state: state\n  }; //declare form state\n\n  const [formState, setFormState] = useState(formInitialState); //add new Ingredient to Recipe object\n\n  const addIngredient = event => {\n    event.preventDefault();\n    console.log(formState);\n    recipe.addIngredient(new Ingredient(formState));\n    console.log(recipe); // Reset ingredient input form to original state\n\n    setFormState(formInitialState);\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setFormState({ ...formState,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(ToggleGlobals, {\n      recipe: recipe\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: recipe.ingredients.map(ingredient => /*#__PURE__*/_jsxDEV(RenderIngredient, {\n          recipe: recipe,\n          ingredient: ingredient\n        }, ingredient.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: addIngredient,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          placeholder: \"Ingredient\",\n          id: \"ingredientNameInput\",\n          name: \"name\",\n          value: formState.name,\n          autoComplete: \"off\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          placeholder: \"Amount\",\n          id: \"ingredientAmtInput\",\n          name: \"value\",\n          value: formState.value ? formState.value : '',\n          onChange: handleChange,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        children: [/*#__PURE__*/_jsxDEV(UnitSelect, {\n          data: recipe.data,\n          state: recipe.state,\n          formState: formState,\n          setFormState: setFormState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Add Ingredient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}, \"QMCrfcxE4Z0Y+k4EOcNrPi18NNY=\", false, function () {\n  return [useLocalObservable];\n})), \"QMCrfcxE4Z0Y+k4EOcNrPi18NNY=\", false, function () {\n  return [useLocalObservable];\n});\n\n_c2 = DisplayRecipe;\nexport default DisplayRecipe;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DisplayRecipe$observer\");\n$RefreshReg$(_c2, \"DisplayRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/client/src/components/Recipe/index.tsx"],"names":["React","useState","observer","useLocalObservable","Container","Form","Table","Stack","Button","ToggleGlobals","RenderIngredient","UnitSelect","Ingredient","Recipe","DisplayRecipe","recipe","state","data","selectedUnit","returnSelected","unit","formInitialState","name","value","formState","setFormState","addIngredient","event","preventDefault","console","log","handleChange","target","ingredients","map","ingredient"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { observer, useLocalObservable } from 'mobx-react-lite';\nimport { Container, Form, Table, Row, Stack, Button } from 'react-bootstrap';\n\nimport ToggleGlobals from '../ToggleGlobals';\nimport RenderIngredient from '../RenderIngredient';\nimport UnitSelect from '../UnitSelect';\n\nimport { Ingredient, UnitInterface, IngredientDataInterface } from './Ingredient';\nimport { Recipe } from './Recipe';\n\nconst DisplayRecipe = observer(() => {\n\n    const recipe = useLocalObservable(() => new Recipe('metric', 'weight', 0));\n\n    const { state, data } = recipe;\n\n    const selectedUnit = data.returnSelected(state).unit;\n\n    //form data is collected in the shape of new Ingredient params\n    const formInitialState = { \n        name: '',\n        value: 0,\n        unit: selectedUnit,\n        state: state\n    }\n\n    //declare form state\n    const [formState, setFormState] = useState<IngredientDataInterface>(formInitialState);\n\n    //add new Ingredient to Recipe object\n    const addIngredient = (event: React.FormEvent): void => {\n        event.preventDefault();\n\n        console.log(formState)\n        \n        recipe.addIngredient(new Ingredient(formState))\n\n        console.log(recipe);\n        // Reset ingredient input form to original state\n        setFormState(formInitialState);\n    };\n\n    const handleChange = (event: React.FormEvent): void => {\n        const { value, name } = event.target as HTMLFormElement;\n\n        setFormState({\n          ...formState,\n          [name]: value\n        });\n    };\n\n    return(\n        <Container fluid='md'>\n            {/* Change measurement type here */}\n            <ToggleGlobals recipe={recipe}/>\n\n            {/* Map array of ingredients */}\n            <Table striped bordered>\n                <tbody>\n                    {recipe.ingredients.map((ingredient: Ingredient) => (\n                    <RenderIngredient \n                        key={ingredient.name} \n                        recipe={recipe}\n                        ingredient={ingredient} \n                    />     \n                    ))}\n                </tbody>\n            </Table>\n\n            {/* Ingredient Input */}\n            <Form onSubmit={addIngredient}>\n                \n                <Form.Group>\n                    <Form.Control type=\"text\" \n                        placeholder=\"Ingredient\" \n                        id='ingredientNameInput'\n                        name='name'\n                        value={formState.name}\n                        autoComplete=\"off\" \n                        onChange={handleChange}/>\n\n                    <Form.Control type=\"number\" \n                        placeholder=\"Amount\"\n                        id='ingredientAmtInput'\n                        name='value'\n                        value={formState.value?formState.value:''}\n                        onChange={handleChange}\n                        autoComplete=\"off\"/>\n                </Form.Group>\n\n                <Stack>\n\n                    <UnitSelect \n                        data={recipe.data}\n                        state={recipe.state}\n                        formState={formState}\n                        setFormState={setFormState}\n                    />\n\n                    {/* Add Ingredient Button */}\n                    <Button type=\"submit\">Add Ingredient</Button>\n                </Stack>\n            </Form>\n        </Container>\n    )\n});\n\n\n\nexport default DisplayRecipe;"]},"metadata":{},"sourceType":"module"}