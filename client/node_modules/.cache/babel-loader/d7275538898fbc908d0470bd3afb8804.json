{"ast":null,"code":"import { Ingredient } from \"./Ingredient\"; //convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\n\nconst convertMeasurementToString = (measurement, requested) => {\n  if (measurement) {\n    //if measurement is in pounds send to displayPounds function for further formatting\n    if (requested === \"pounds\") {\n      return displayPounds(measurement);\n    } else {\n      return (Math.round(measurement * 100) / 100).toLocaleString();\n    }\n  } else {\n    //if no measurement\n    return false;\n  }\n}; //format pounds for display as string\n\n\nconst displayPounds = measurement => {\n  const pounds = parseInt(measurement);\n  const remainder = measurement % 1;\n  const ounces = (remainder * 16).toFixed(1);\n\n  if (remainder) {\n    return `${pounds}: ${ounces}`;\n  } else if (measurement) {\n    return measurement;\n  } else {\n    return false;\n  }\n};\n\nconst returnIngredient = (data, system, unit, requested, autoconvert) => {\n  const ingredient = new Ingredient(data, system, unit);\n\n  if (!requested || requested === ingredient[unit].default) {\n    const measurement = ingredient.returnDefault();\n    return {\n      name: ingredient.name,\n      unit: requested,\n      measurement: convertMeasurementToString(measurement, requested)\n    };\n  }\n\n  if (requested !== ingredient[unit].default) {\n    if (ingredient[unit].default) {\n      const measurement = ingredient.convert(requested);\n      return {\n        name: ingredient.name,\n        unit: requested,\n        measurement: convertMeasurementToString(measurement, requested)\n      };\n    }\n\n    if (autoconvert) {\n      const measurement = ingredient.convert(requested);\n      return {\n        name: ingredient.name,\n        unit: requested,\n        measurement: convertMeasurementToString(measurement, requested)\n      };\n    }\n  }\n};\n\nexport default returnIngredient;","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/returnIngredient.js"],"names":["Ingredient","convertMeasurementToString","measurement","requested","displayPounds","Math","round","toLocaleString","pounds","parseInt","remainder","ounces","toFixed","returnIngredient","data","system","unit","autoconvert","ingredient","default","returnDefault","name","convert"],"mappings":"AAAA,SAASA,UAAT,QAA2B,cAA3B,C,CAEA;;AACA,MAAMC,0BAA0B,GAAG,CAACC,WAAD,EAAcC,SAAd,KAA4B;AAC3D,MAAID,WAAJ,EAAiB;AACb;AACA,QAAIC,SAAS,KAAK,QAAlB,EAA4B;AACxB,aAAOC,aAAa,CAACF,WAAD,CAApB;AACH,KAFD,MAGK;AACD,aAAO,CAACG,IAAI,CAACC,KAAL,CAAWJ,WAAW,GAAC,GAAvB,IAA4B,GAA7B,EAAkCK,cAAlC,EAAP;AACH;AACJ,GARD,MASK;AACD;AACA,WAAO,KAAP;AACH;AACJ,CAdD,C,CAgBA;;;AACA,MAAMH,aAAa,GAAIF,WAAD,IAAiB;AACnC,QAAMM,MAAM,GAAGC,QAAQ,CAACP,WAAD,CAAvB;AACA,QAAMQ,SAAS,GAAGR,WAAW,GAAG,CAAhC;AACA,QAAMS,MAAM,GAAG,CAACD,SAAS,GAAC,EAAX,EAAeE,OAAf,CAAuB,CAAvB,CAAf;;AAEA,MAAIF,SAAJ,EAAe;AACX,WAAQ,GAAEF,MAAO,KAAIG,MAAO,EAA5B;AACH,GAFD,MAGK,IAAIT,WAAJ,EAAiB;AAClB,WAAOA,WAAP;AACH,GAFI,MAGA;AACD,WAAO,KAAP;AACH;AACJ,CAdD;;AAgBA,MAAMW,gBAAgB,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,IAAf,EAAqBb,SAArB,EAAgCc,WAAhC,KAAgD;AACrE,QAAMC,UAAU,GAAG,IAAIlB,UAAJ,CAAec,IAAf,EAAqBC,MAArB,EAA6BC,IAA7B,CAAnB;;AAEA,MAAI,CAACb,SAAD,IAAeA,SAAS,KAAKe,UAAU,CAACF,IAAD,CAAV,CAAiBG,OAAlD,EAA4D;AACxD,UAAMjB,WAAW,GAAGgB,UAAU,CAACE,aAAX,EAApB;AACA,WAAO;AACHC,MAAAA,IAAI,EAAEH,UAAU,CAACG,IADd;AAEHL,MAAAA,IAAI,EAAEb,SAFH;AAGHD,MAAAA,WAAW,EAAED,0BAA0B,CAACC,WAAD,EAAcC,SAAd;AAHpC,KAAP;AAKH;;AAED,MAAIA,SAAS,KAAKe,UAAU,CAACF,IAAD,CAAV,CAAiBG,OAAnC,EAA4C;AACxC,QAAID,UAAU,CAACF,IAAD,CAAV,CAAiBG,OAArB,EAA8B;AAC1B,YAAMjB,WAAW,GAAGgB,UAAU,CAACI,OAAX,CAAmBnB,SAAnB,CAApB;AACA,aAAO;AACHkB,QAAAA,IAAI,EAAEH,UAAU,CAACG,IADd;AAEHL,QAAAA,IAAI,EAAEb,SAFH;AAGHD,QAAAA,WAAW,EAAED,0BAA0B,CAACC,WAAD,EAAcC,SAAd;AAHpC,OAAP;AAKH;;AAED,QAAIc,WAAJ,EAAiB;AACb,YAAMf,WAAW,GAAGgB,UAAU,CAACI,OAAX,CAAmBnB,SAAnB,CAApB;AACA,aAAO;AACHkB,QAAAA,IAAI,EAAEH,UAAU,CAACG,IADd;AAEHL,QAAAA,IAAI,EAAEb,SAFH;AAGHD,QAAAA,WAAW,EAAED,0BAA0B,CAACC,WAAD,EAAcC,SAAd;AAHpC,OAAP;AAKH;AACJ;AAIJ,CAlCD;;AAoCA,eAAeU,gBAAf","sourcesContent":["import { Ingredient } from \"./Ingredient\";\n\n//convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\nconst convertMeasurementToString = (measurement, requested) => {\n    if (measurement) {\n        //if measurement is in pounds send to displayPounds function for further formatting\n        if (requested === \"pounds\") {\n            return displayPounds(measurement);\n        }\n        else {\n            return (Math.round(measurement*100)/100).toLocaleString();\n        }\n    }\n    else {\n        //if no measurement\n        return false;\n    }\n}\n\n//format pounds for display as string\nconst displayPounds = (measurement) => {\n    const pounds = parseInt(measurement);\n    const remainder = measurement % 1;\n    const ounces = (remainder*16).toFixed(1);\n    \n    if (remainder) {\n        return `${pounds}: ${ounces}`;\n    }\n    else if (measurement) {\n        return measurement;\n    } \n    else {\n        return false;\n    }\n}\n\nconst returnIngredient = (data, system, unit, requested, autoconvert) => {\n    const ingredient = new Ingredient(data, system, unit);\n\n    if (!requested || (requested === ingredient[unit].default)) {\n        const measurement = ingredient.returnDefault();\n        return {\n            name: ingredient.name,\n            unit: requested,\n            measurement: convertMeasurementToString(measurement, requested)\n        }\n    }\n\n    if (requested !== ingredient[unit].default) {\n        if (ingredient[unit].default) {\n            const measurement = ingredient.convert(requested);\n            return {\n                name: ingredient.name,\n                unit: requested,\n                measurement: convertMeasurementToString(measurement, requested)\n            }\n        }\n\n        if (autoconvert) {\n            const measurement = ingredient.convert(requested);\n            return {\n                name: ingredient.name,\n                unit: requested,\n                measurement: convertMeasurementToString(measurement, requested)\n            }\n        }\n    }\n\n    \n\n}\n\nexport default returnIngredient;"]},"metadata":{},"sourceType":"module"}