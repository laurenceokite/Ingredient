{"ast":null,"code":"class Ingredient {\n  constructor(data) {\n    this.metric_weight = [{\n      unit: 'milligrams',\n      divisor: .001,\n      abbrev: 'mg'\n    }, {\n      unit: 'grams',\n      divisor: 1,\n      abbrev: 'g',\n      selected: true\n    }, {\n      unit: 'kilograms',\n      divisor: 1000,\n      abbrev: 'k'\n    }];\n    this.us_weight = [{\n      unit: 'pounds',\n      divisor: 454,\n      abbrev: 'lbs.'\n    }, {\n      unit: 'ounces',\n      divisor: 28,\n      abbrev: 'oz.',\n      selected: true\n    }];\n    this.metric_volume = [{\n      unit: 'milliliters',\n      divisor: 1,\n      abbrev: 'mL',\n      selected: true\n    }, {\n      unit: 'liters',\n      divisor: 1000,\n      abbrev: 'L'\n    }];\n    this.us_volume = [{\n      unit: 'cups',\n      divisor: 240,\n      abbrev: 'C',\n      selected: true\n    }, {\n      unit: 'quarts',\n      divisor: 946,\n      abbrev: 'Q'\n    }, {\n      unit: 'gallons',\n      divisor: 3785,\n      abbrev: 'G'\n    }, {\n      unit: 'teaspoons',\n      divisor: 4.929,\n      abbrev: 'tsp.'\n    }, {\n      unit: 'tablespoons',\n      divisor: 14.787,\n      abbrev: 'tbsp.'\n    }, {\n      unit: 'fluidOunces',\n      divisor: 29.575,\n      abbrev: 'fl. oz.'\n    }];\n    this.name = void 0;\n  }\n\n  returnCurrentUnits(state) {\n    return this[state];\n  }\n\n  returnSelected(state) {\n    const selectedUnit = this[state].map(unit => unit.selected);\n    return selectedUnit;\n  }\n\n  returnAnyUnit(unit) {\n    console.log(this);\n  }\n\n  updateValue(state, value, unit) {}\n\n}\n\n;\nexport { Ingredient };","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/client/src/components/ViewEditRecipe/Ingredient.tsx"],"names":["Ingredient","constructor","data","metric_weight","unit","divisor","abbrev","selected","us_weight","metric_volume","us_volume","name","returnCurrentUnits","state","returnSelected","selectedUnit","map","returnAnyUnit","console","log","updateValue","value"],"mappings":"AAyBA,MAAMA,UAAN,CAAgD;AA4B5CC,EAAAA,WAAW,CAACC,IAAD,EAAuC;AAAA,SA3BlDC,aA2BkD,GA3BlC,CACZ;AAAEC,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,OAAO,EAAE,IAA/B;AAAqCC,MAAAA,MAAM,EAAE;AAA7C,KADY,EAEZ;AAAEF,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,OAAO,EAAE,CAA1B;AAA6BC,MAAAA,MAAM,EAAE,GAArC;AAA0CC,MAAAA,QAAQ,EAAE;AAApD,KAFY,EAGZ;AAAEH,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,OAAO,EAAE,IAA9B;AAAoCC,MAAAA,MAAM,EAAE;AAA5C,KAHY,CA2BkC;AAAA,SArBlDE,SAqBkD,GArBtC,CACR;AAAEJ,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAE,GAA3B;AAAgCC,MAAAA,MAAM,EAAE;AAAxC,KADQ,EAER;AAAEF,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAE,EAA3B;AAA+BC,MAAAA,MAAM,EAAE,KAAvC;AAA8CC,MAAAA,QAAQ,EAAE;AAAxD,KAFQ,CAqBsC;AAAA,SAhBlDE,aAgBkD,GAhBlC,CACZ;AAAEL,MAAAA,IAAI,EAAC,aAAP;AAAsBC,MAAAA,OAAO,EAAE,CAA/B;AAAkCC,MAAAA,MAAM,EAAE,IAA1C;AAAgDC,MAAAA,QAAQ,EAAE;AAA1D,KADY,EAEZ;AAAEH,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAE,IAA3B;AAAiCC,MAAAA,MAAM,EAAE;AAAzC,KAFY,CAgBkC;AAAA,SAXlDI,SAWkD,GAXtC,CACR;AAAEN,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,OAAO,EAAE,GAAzB;AAA8BC,MAAAA,MAAM,EAAE,GAAtC;AAA2CC,MAAAA,QAAQ,EAAE;AAArD,KADQ,EAER;AAAEH,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAE,GAA3B;AAAgCC,MAAAA,MAAM,EAAE;AAAxC,KAFQ,EAGR;AAAEF,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,OAAO,EAAE,IAA5B;AAAkCC,MAAAA,MAAM,EAAE;AAA1C,KAHQ,EAIR;AAAEF,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,OAAO,EAAE,KAA9B;AAAqCC,MAAAA,MAAM,EAAE;AAA7C,KAJQ,EAKR;AAAEF,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,OAAO,EAAE,MAAhC;AAAwCC,MAAAA,MAAM,EAAE;AAAhD,KALQ,EAMR;AAAEF,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,OAAO,EAAE,MAAhC;AAAwCC,MAAAA,MAAM,EAAE;AAAhD,KANQ,CAWsC;AAAA,SAFlDK,IAEkD;AAEjD;;AAEDC,EAAAA,kBAAkB,CAACC,KAAD,EAAoD;AAClE,WAAO,KAAKA,KAAL,CAAP;AACH;;AAEDC,EAAAA,cAAc,CAACD,KAAD,EAAkD;AAC5D,UAAME,YAA2B,GAAG,KAAKF,KAAL,EAAYG,GAAZ,CAAgBZ,IAAI,IAAKA,IAAI,CAACG,QAA9B,CAApC;AACA,WAAOQ,YAAP;AACH;;AAGDE,EAAAA,aAAa,CAACb,IAAD,EAAqB;AAC9Bc,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACH;;AAEDC,EAAAA,WAAW,CAACP,KAAD,EAAmCQ,KAAnC,EAAkDjB,IAAlD,EAAgE,CAE1E;;AAhD2C;;AAiD/C;AAED,SAASJ,UAAT","sourcesContent":["import { useStoreContext, GlobalSystems, GlobalUnits } from \"../../utils/GlobalState\";\n\ntype KeyOfIngredient = `${GlobalSystems}_${GlobalUnits}`\n\ninterface UnitInterface {\n    unit: string; \n    divisor: number;\n    abbrev: string; \n    selected?: boolean; \n    value?: number;\n}\n\ninterface IngredientInterface {\n    metric_weight: UnitInterface[];\n    us_weight: UnitInterface[];\n    metric_volume: UnitInterface[];\n    us_volume: UnitInterface[];\n}\n\ninterface IngredientDataInterface {\n    name: string;\n    amount: number | false;\n    unit: string;\n}\n\nclass Ingredient implements IngredientInterface {\n    metric_weight = [\n        { unit: 'milligrams', divisor: .001, abbrev: 'mg' },\n        { unit: 'grams', divisor: 1, abbrev: 'g', selected: true },\n        { unit: 'kilograms', divisor: 1000, abbrev: 'k' }\n    ];   \n\n    us_weight = [\n        { unit: 'pounds', divisor: 454, abbrev: 'lbs.' },\n        { unit: 'ounces', divisor: 28, abbrev: 'oz.', selected: true }\n    ];\n\n    metric_volume = [\n        { unit:'milliliters', divisor: 1, abbrev: 'mL', selected: true },\n        { unit: 'liters', divisor: 1000, abbrev: 'L'},\n    ];\n        \n    us_volume = [   \n        { unit: 'cups', divisor: 240, abbrev: 'C', selected: true },\n        { unit: 'quarts', divisor: 946, abbrev: 'Q' },\n        { unit: 'gallons', divisor: 3785, abbrev: 'G' },\n        { unit: 'teaspoons', divisor: 4.929, abbrev: 'tsp.' },\n        { unit: 'tablespoons', divisor: 14.787, abbrev: 'tbsp.' },\n        { unit: 'fluidOunces', divisor: 29.575, abbrev: 'fl. oz.' }\n    ];\n\n    name?: string;\n\n    constructor(data: IngredientDataInterface | null) {\n\n    }\n\n    returnCurrentUnits(state: keyof IngredientInterface): UnitInterface[] {\n        return this[state];\n    }\n\n    returnSelected(state: keyof IngredientInterface): UnitInterface {\n        const selectedUnit: UnitInterface = this[state].map(unit => (unit.selected));\n        return selectedUnit;\n    }\n    \n\n    returnAnyUnit(unit: string): void { \n        console.log(this)\n    }\n\n    updateValue(state: keyof IngredientInterface, value: number, unit: string) {\n        \n    }\n};\n\nexport { Ingredient, UnitInterface, IngredientInterface, IngredientDataInterface }\n\n"]},"metadata":{},"sourceType":"module"}