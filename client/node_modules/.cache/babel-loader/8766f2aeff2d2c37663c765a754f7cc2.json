{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/client/src/components/RenderIngredient/index.tsx\";\nimport React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Form, Row, Col } from \"react-bootstrap\";\nimport UnitSelect from \"../UnitSelect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RenderIngredient = observer(_c = _ref => {\n  let {\n    recipe\n  } = _ref;\n\n  const thisValue = index => recipe.ingredients[index].returnSelected(recipe.state).value;\n\n  const formatValue = value => {\n    if (value > 0) return '';\n    const roundedInt = (Math.round(value * 100) / 100).toFixed(2);\n    return roundedInt.toLocaleString();\n  };\n\n  const thisUnit = index => recipe.ingredients[index].returnSelected(recipe.state).unit;\n\n  const handleChange = (ingredient, name) => event => {\n    const {\n      value\n    } = event.target;\n    const unit = ingredient.returnSelected(recipe.state).unit; //update ingredient value\n\n    if (name === 'value') ingredient.updateValue(recipe.state, unit, value); //update ingredient unit\n\n    if (name === 'unit') ingredient.updateSelected(recipe.state, value); //update bakers percent\n\n    if (name === 'percent') {}\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: recipe.ingredients.map((ingredient, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(\"td\", {\n          children: recipe.ingredients[index].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: 9,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: 8,\n              children: /*#__PURE__*/_jsxDEV(Form, {\n                children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"No Amt.\",\n                  value: formatValue(thisValue(index)),\n                  onChange: handleChange(ingredient, 'value')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                onChange: handleChange(ingredient, 'unit'),\n                children: /*#__PURE__*/_jsxDEV(UnitSelect, {\n                  recipe: recipe,\n                  ingredient: ingredient\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"number\",\n            value: recipe.bakersPercent(index),\n            onChange: handleChange(ingredient, 'percent')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n});\n_c2 = RenderIngredient;\nexport default RenderIngredient;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RenderIngredient$observer\");\n$RefreshReg$(_c2, \"RenderIngredient\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/client/src/components/RenderIngredient/index.tsx"],"names":["React","observer","Form","Row","Col","UnitSelect","RenderIngredient","recipe","thisValue","index","ingredients","returnSelected","state","value","formatValue","roundedInt","Math","round","toFixed","toLocaleString","thisUnit","unit","handleChange","ingredient","name","event","target","updateValue","updateSelected","map","bakersPercent"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Form, Row, Col } from \"react-bootstrap\";\nimport UnitSelect from \"../UnitSelect\";\nimport { Ingredient } from \"../Recipe/Ingredient\";\nimport { Recipe } from \"../Recipe/Recipe\";\n\n\nexport interface IRecipeProp {\n    recipe: Recipe\n}\n\nconst RenderIngredient = observer(({ recipe }: IRecipeProp) => {\n\n    const thisValue = (index: number): number => recipe.ingredients[index].returnSelected(recipe.state).value;\n\n    \n    const formatValue = (value: number): string => {\n        if (value > 0) return '';\n\n        const roundedInt = (Math.round(value * 100) / 100).toFixed(2);\n\n        return roundedInt.toLocaleString();\n    }\n\n\n    const thisUnit = (index: number): string => recipe.ingredients[index].returnSelected(recipe.state).unit;\n\n    \n    const handleChange = (ingredient: Ingredient, name: string) => (event: React.FormEvent): void => {\n        const { value } = event.target as HTMLFormElement;\n\n        const unit = ingredient.returnSelected(recipe.state).unit;\n\n        //update ingredient value\n        if (name === 'value') ingredient.updateValue(recipe.state, unit, value);\n\n        //update ingredient unit\n        if (name === 'unit') ingredient.updateSelected(recipe.state, value);\n\n        //update bakers percent\n        if (name === 'percent') {};\n    };\n\n    return(\n        <tr>\n            {recipe.ingredients.map((ingredient: Ingredient, index) => (\n            <div>\n                <Row>\n                    <td>{recipe.ingredients[index].name}</td>\n                </Row>\n                <Row>\n                    <Col xs={9}>\n\n                        <Row>\n\n                            {/* render ingredient value */}\n                            <Col xs={8}>\n                                <Form>\n                                    <Form.Control \n                                        type=\"text\" \n                                        placeholder=\"No Amt.\" \n                                        value={formatValue(thisValue(index))}\n                                          \n                                        onChange={handleChange(ingredient, 'value')}\n                                    />\n                                </Form>\n                            </Col>\n\n                            {/* render UnitSelect */}\n                            <Col>\n                                <div onChange={handleChange(ingredient, 'unit')}>\n                                    <UnitSelect \n                                        recipe={recipe}\n                                        ingredient={ingredient}\n                                    />\n                                </div>\n                            </Col>\n\n                        </Row>\n\n                    </Col>\n\n                    {/* percentage */}\n                    <Col>\n                        <Form.Control type=\"number\" value={recipe.bakersPercent(index)} onChange={handleChange(ingredient, 'percent')}/>\n                    </Col>\n\n                </Row>  \n            </div>     \n            ))} \n        </tr>    \n    )\n})\n\nexport default RenderIngredient;"]},"metadata":{},"sourceType":"module"}