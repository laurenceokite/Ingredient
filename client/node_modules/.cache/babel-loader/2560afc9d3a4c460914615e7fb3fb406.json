{"ast":null,"code":"export function convertSubMeasure(current, requested, measurement) {\n  const log = args => console.log(args);\n\n  log(current, requested, measurement);\n  const measures = {\n    grams: 1,\n    milligrams: .001,\n    kilograms: 100\n  };\n  log(measures[current], measures[requested]);\n\n  if (measures[current] > measures[requested]) {\n    const newMeasure = measures[current] * measures[requested] * measurement;\n    return newMeasure;\n  } else if (measures[current] < measures[requested]) {\n    const newMeasure = measures[current] / measures[requested] * measurement;\n    return newMeasure;\n  }\n}\nexport function convertMeasure(current, requested, measurement, submeasure) {\n  const conversion = `${current}->${requested}`;\n\n  switch (conversion) {\n    case 'weight-metric->volume-metric':\n      if (submeasure !== 'grams') {\n        measurement = convertSubMeasure(submeasure, 'grams', measurement);\n      }\n\n      return {\n        newMeasurement: measurement,\n        newSubmeasure: 'milliliters'\n      };\n  }\n}","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/utils/helpers.js"],"names":["convertSubMeasure","current","requested","measurement","log","args","console","measures","grams","milligrams","kilograms","newMeasure","convertMeasure","submeasure","conversion","newMeasurement","newSubmeasure"],"mappings":"AAAA,OAAO,SAASA,iBAAT,CAA2BC,OAA3B,EAAoCC,SAApC,EAA+CC,WAA/C,EAA4D;AAC/D,QAAMC,GAAG,GAAGC,IAAI,IAAIC,OAAO,CAACF,GAAR,CAAYC,IAAZ,CAApB;;AAEAD,EAAAA,GAAG,CAACH,OAAD,EAAUC,SAAV,EAAqBC,WAArB,CAAH;AAEA,QAAMI,QAAQ,GAAG;AACdC,IAAAA,KAAK,EAAE,CADO;AAEdC,IAAAA,UAAU,EAAE,IAFE;AAGdC,IAAAA,SAAS,EAAE;AAHG,GAAjB;AAMAN,EAAAA,GAAG,CAACG,QAAQ,CAACN,OAAD,CAAT,EAAoBM,QAAQ,CAACL,SAAD,CAA5B,CAAH;;AAEA,MAAIK,QAAQ,CAACN,OAAD,CAAR,GAAoBM,QAAQ,CAACL,SAAD,CAAhC,EAA6C;AACzC,UAAMS,UAAU,GAAGJ,QAAQ,CAACN,OAAD,CAAR,GAAoBM,QAAQ,CAACL,SAAD,CAA5B,GAA0CC,WAA7D;AACA,WAAOQ,UAAP;AACH,GAHD,MAKK,IAAIJ,QAAQ,CAACN,OAAD,CAAR,GAAoBM,QAAQ,CAACL,SAAD,CAAhC,EAA6C;AAC9C,UAAMS,UAAU,GAAGJ,QAAQ,CAACN,OAAD,CAAR,GAAoBM,QAAQ,CAACL,SAAD,CAA5B,GAA0CC,WAA7D;AACA,WAAOQ,UAAP;AACH;AACJ;AAED,OAAO,SAASC,cAAT,CAAwBX,OAAxB,EAAiCC,SAAjC,EAA4CC,WAA5C,EAAyDU,UAAzD,EAAqE;AACxE,QAAMC,UAAU,GAAI,GAAEb,OAAQ,KAAIC,SAAU,EAA5C;;AAEA,UAAOY,UAAP;AACI,SAAK,8BAAL;AACI,UAAID,UAAU,KAAK,OAAnB,EAA4B;AACxBV,QAAAA,WAAW,GAAGH,iBAAiB,CAACa,UAAD,EAAa,OAAb,EAAsBV,WAAtB,CAA/B;AACH;;AACD,aAAO;AACHY,QAAAA,cAAc,EAAEZ,WADb;AAEHa,QAAAA,aAAa,EAAE;AAFZ,OAAP;AALR;AAUH","sourcesContent":["export function convertSubMeasure(current, requested, measurement) {    \n    const log = args => console.log(args);\n    \n    log(current, requested, measurement);\n    \n    const measures = {\n       grams: 1,\n       milligrams: .001,\n       kilograms: 100\n    }\n\n    log(measures[current], measures[requested]);\n    \n    if (measures[current] > measures[requested]) {\n        const newMeasure = measures[current] * measures[requested] * measurement;\n        return newMeasure;\n    }\n    \n    else if (measures[current] < measures[requested]) {\n        const newMeasure = measures[current] / measures[requested] * measurement;\n        return newMeasure;\n    }\n}\n\nexport function convertMeasure(current, requested, measurement, submeasure) {\n    const conversion = `${current}->${requested}`;\n\n    switch(conversion) {\n        case 'weight-metric->volume-metric':\n            if (submeasure !== 'grams') {\n                measurement = convertSubMeasure(submeasure, 'grams', measurement);\n            }\n            return {\n                newMeasurement: measurement,\n                newSubmeasure: 'milliliters'\n            }\n    }\n}"]},"metadata":{},"sourceType":"module"}