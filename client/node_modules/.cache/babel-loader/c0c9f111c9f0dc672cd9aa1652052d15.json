{"ast":null,"code":"export function convertMeasure(current, requested, measurement, system, newSystem) {\n  const log = function () {\n    return console.log(...arguments);\n  };\n\n  const measures = {\n    weight_metric: {\n      grams: 1,\n      milligrams: .001,\n      kilograms: 100\n    },\n    metric_volume: {\n      milliliters: 1,\n      liters: 1000\n    },\n    us_volume: {\n      cups: 240,\n      quarts: 946,\n      gallons: 3785,\n      fluid_ounces: 29.574,\n      tablespoons: 14.787,\n      teaspoon: 4.929\n    }\n  };\n\n  if (!requested) {\n    const newPossibleRequested = {};\n    Object.values(measures[newSystem]).forEach(val => {\n      const difference = measures[system][current] - val;\n      log(difference);\n    });\n  }\n\n  const newMeasurement = measures[current] / measures[requested] * measurement;\n  return {\n    newMeasurement: newMeasurement,\n    newSubmeasure: requested\n  };\n}","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/utils/helpers.js"],"names":["convertMeasure","current","requested","measurement","system","newSystem","log","console","measures","weight_metric","grams","milligrams","kilograms","metric_volume","milliliters","liters","us_volume","cups","quarts","gallons","fluid_ounces","tablespoons","teaspoon","newPossibleRequested","Object","values","forEach","val","difference","newMeasurement","newSubmeasure"],"mappings":"AAAA,OAAO,SAASA,cAAT,CAAwBC,OAAxB,EAAiCC,SAAjC,EAA4CC,WAA5C,EAAyDC,MAAzD,EAAiEC,SAAjE,EAA4E;AAC/E,QAAMC,GAAG,GAAG;AAAA,WAAaC,OAAO,CAACD,GAAR,CAAY,YAAZ,CAAb;AAAA,GAAZ;;AAEA,QAAME,QAAQ,GAAG;AACbC,IAAAA,aAAa,EAAE;AACXC,MAAAA,KAAK,EAAE,CADI;AAEXC,MAAAA,UAAU,EAAE,IAFD;AAGXC,MAAAA,SAAS,EAAE;AAHA,KADF;AAObC,IAAAA,aAAa,EAAE;AACXC,MAAAA,WAAW,EAAE,CADF;AAEXC,MAAAA,MAAM,EAAE;AAFG,KAPF;AAYbC,IAAAA,SAAS,EAAE;AACPC,MAAAA,IAAI,EAAE,GADC;AAEPC,MAAAA,MAAM,EAAE,GAFD;AAGPC,MAAAA,OAAO,EAAE,IAHF;AAIPC,MAAAA,YAAY,EAAE,MAJP;AAKPC,MAAAA,WAAW,EAAE,MALN;AAMPC,MAAAA,QAAQ,EAAE;AANH;AAZE,GAAjB;;AAuBA,MAAI,CAACpB,SAAL,EAAgB;AACZ,UAAMqB,oBAAoB,GAAG,EAA7B;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAcjB,QAAQ,CAACH,SAAD,CAAtB,EAAmCqB,OAAnC,CAA2CC,GAAG,IAAI;AAC9C,YAAMC,UAAU,GAAGpB,QAAQ,CAACJ,MAAD,CAAR,CAAiBH,OAAjB,IAA4B0B,GAA/C;AACArB,MAAAA,GAAG,CAACsB,UAAD,CAAH;AACH,KAHD;AAIH;;AAED,QAAMC,cAAc,GAAGrB,QAAQ,CAACP,OAAD,CAAR,GAAoBO,QAAQ,CAACN,SAAD,CAA5B,GAA0CC,WAAjE;AAEA,SAAO;AACH0B,IAAAA,cAAc,EAAEA,cADb;AAEHC,IAAAA,aAAa,EAAE5B;AAFZ,GAAP;AAKH","sourcesContent":["export function convertMeasure(current, requested, measurement, system, newSystem) {    \n    const log = (...args) => console.log(...args);\n    \n    const measures = {\n        weight_metric: {\n            grams: 1,\n            milligrams: .001,\n            kilograms: 100\n        },\n\n        metric_volume: {\n            milliliters: 1,\n            liters: 1000\n        },\n\n        us_volume: {\n            cups: 240,\n            quarts: 946,\n            gallons: 3785,\n            fluid_ounces: 29.574,\n            tablespoons: 14.787,\n            teaspoon: 4.929\n        }\n\n    }\n\n    if (!requested) {\n        const newPossibleRequested = {};\n        Object.values(measures[newSystem]).forEach(val => {\n            const difference = measures[system][current] - val\n            log(difference);\n        });\n    }\n    \n    const newMeasurement = measures[current] / measures[requested] * measurement\n    \n    return { \n        newMeasurement: newMeasurement,\n        newSubmeasure: requested\n    }\n    \n}\n\n"]},"metadata":{},"sourceType":"module"}