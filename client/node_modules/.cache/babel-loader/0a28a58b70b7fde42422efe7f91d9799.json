{"ast":null,"code":"import { relativeValues } from \"./relativeValues\";\nexport class Ingredient {\n  constructor(data, unit, system) {\n    this.system = system;\n    this.unit = unit;\n    this.weight = false;\n    this.volume = false;\n    Object.assign(this, data);\n  }\n\n  convert(requested) {\n    const {\n      unit,\n      system\n    } = this;\n    console.log(relativeValues[system][unit], requested);\n    const relativeValue = relativeValues[system][unit][requested].value;\n    return {\n      measurement: this[unit].value / relativeValue,\n      newUnit: requested\n    };\n  }\n\n  default() {\n    const {\n      unit,\n      system\n    } = this;\n    const requested = this[unit].default;\n    console.log(relativeValues[system][unit][requested]);\n\n    if (!relativeValues[system][unit][requested]) {\n      return false;\n    }\n\n    return this.convert(requested);\n  }\n\n  findConciseUnit() {\n    const {\n      unit,\n      system\n    } = this;\n    let oppUnit;\n    let thisValue;\n    let quotient;\n\n    if (unit === 'volume') {\n      oppUnit = 'weight';\n    } else oppUnit = 'volume';\n\n    if (this[unit]) {\n      thisValue = this[unit].value;\n    } else thisValue = this[oppUnit].value;\n\n    console.log(thisValue);\n\n    for (const [key, value] of Object.entries(relativeValues[system][oppUnit])) {\n      const thisQuotient = Math.abs(value.value / thisValue);\n\n      if (quotient) {\n        if (quotient.val > thisQuotient && thisQuotient > 1) {\n          quotient = {\n            val: thisQuotient,\n            key: key\n          };\n        }\n      }\n\n      if (!quotient) {\n        quotient = {\n          val: thisQuotient,\n          key: key\n        };\n      }\n    }\n\n    console.log(quotient.key);\n    return this.convert(quotient.key);\n  }\n\n}","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/Ingredient.js"],"names":["relativeValues","Ingredient","constructor","data","unit","system","weight","volume","Object","assign","convert","requested","console","log","relativeValue","value","measurement","newUnit","default","findConciseUnit","oppUnit","thisValue","quotient","key","entries","thisQuotient","Math","abs","val"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AAEA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,IAAP,EAAaC,MAAb,EAAqB;AAC5B,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKD,IAAL,GAAYA,IAAZ;AAEA,SAAKE,MAAL,GAAc,KAAd;AACA,SAAKC,MAAL,GAAc,KAAd;AAEAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBN,IAApB;AACH;;AAEDO,EAAAA,OAAO,CAACC,SAAD,EAAY;AACf,UAAM;AAAEP,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAmB,IAAzB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYb,cAAc,CAACK,MAAD,CAAd,CAAuBD,IAAvB,CAAZ,EAA0CO,SAA1C;AACA,UAAMG,aAAa,GAAGd,cAAc,CAACK,MAAD,CAAd,CAAuBD,IAAvB,EAA6BO,SAA7B,EAAwCI,KAA9D;AAEA,WAAO;AACHC,MAAAA,WAAW,EAAE,KAAKZ,IAAL,EAAWW,KAAX,GAAmBD,aAD7B;AAEHG,MAAAA,OAAO,EAAEN;AAFN,KAAP;AAIH;;AAEDO,EAAAA,OAAO,GAAG;AACN,UAAM;AAAEd,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAmB,IAAzB;AACA,UAAMM,SAAS,GAAG,KAAKP,IAAL,EAAWc,OAA7B;AAEAN,IAAAA,OAAO,CAACC,GAAR,CAAYb,cAAc,CAACK,MAAD,CAAd,CAAuBD,IAAvB,EAA6BO,SAA7B,CAAZ;;AAEA,QAAI,CAACX,cAAc,CAACK,MAAD,CAAd,CAAuBD,IAAvB,EAA6BO,SAA7B,CAAL,EAA8C;AAC1C,aAAO,KAAP;AACH;;AAED,WAAO,KAAKD,OAAL,CAAaC,SAAb,CAAP;AACH;;AAEDQ,EAAAA,eAAe,GAAG;AACd,UAAM;AAAEf,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAmB,IAAzB;AAEA,QAAIe,OAAJ;AACA,QAAIC,SAAJ;AACA,QAAIC,QAAJ;;AAEA,QAAIlB,IAAI,KAAK,QAAb,EACA;AAAEgB,MAAAA,OAAO,GAAG,QAAV;AAAoB,KADtB,MAGKA,OAAO,GAAG,QAAV;;AAEL,QAAI,KAAKhB,IAAL,CAAJ,EACA;AAAEiB,MAAAA,SAAS,GAAG,KAAKjB,IAAL,EAAWW,KAAvB;AAA8B,KADhC,MAGKM,SAAS,GAAG,KAAKD,OAAL,EAAcL,KAA1B;;AAELH,IAAAA,OAAO,CAACC,GAAR,CAAYQ,SAAZ;;AAEA,SAAK,MAAM,CAACE,GAAD,EAAMR,KAAN,CAAX,IAA2BP,MAAM,CAACgB,OAAP,CAAexB,cAAc,CAACK,MAAD,CAAd,CAAuBe,OAAvB,CAAf,CAA3B,EAA4E;AACxE,YAAMK,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASZ,KAAK,CAACA,KAAN,GAAcM,SAAvB,CAArB;;AACA,UAAIC,QAAJ,EAAc;AACV,YAAIA,QAAQ,CAACM,GAAT,GAAeH,YAAf,IAA+BA,YAAY,GAAG,CAAlD,EAAqD;AACjDH,UAAAA,QAAQ,GAAG;AACPM,YAAAA,GAAG,EAAEH,YADE;AAEPF,YAAAA,GAAG,EAAEA;AAFE,WAAX;AAIH;AACJ;;AACD,UAAI,CAACD,QAAL,EAAe;AACXA,QAAAA,QAAQ,GAAG;AACPM,UAAAA,GAAG,EAAEH,YADE;AAEPF,UAAAA,GAAG,EAAEA;AAFE,SAAX;AAIH;AACJ;;AAEDX,IAAAA,OAAO,CAACC,GAAR,CAAYS,QAAQ,CAACC,GAArB;AAEA,WAAO,KAAKb,OAAL,CAAaY,QAAQ,CAACC,GAAtB,CAAP;AACH;;AA3EmB","sourcesContent":["import { relativeValues } from \"./relativeValues\";\n\nexport class Ingredient {\n    constructor(data, unit, system) {\n        this.system = system;\n        this.unit = unit;\n\n        this.weight = false;\n        this.volume = false;\n\n        Object.assign(this, data);\n    }\n\n    convert(requested) {\n        const { unit, system } = this;\n        console.log(relativeValues[system][unit], requested);\n        const relativeValue = relativeValues[system][unit][requested].value;\n\n        return {\n            measurement: this[unit].value / relativeValue,\n            newUnit: requested\n        };\n    }\n\n    default() {\n        const { unit, system } = this;\n        const requested = this[unit].default;\n\n        console.log(relativeValues[system][unit][requested]);\n\n        if (!relativeValues[system][unit][requested]) {\n            return false;\n        }\n\n        return this.convert(requested);\n    }\n\n    findConciseUnit() {\n        const { unit, system } = this;\n\n        let oppUnit;\n        let thisValue;\n        let quotient;\n\n        if (unit === 'volume') \n        { oppUnit = 'weight' }\n\n        else oppUnit = 'volume';\n\n        if (this[unit]) \n        { thisValue = this[unit].value }\n\n        else thisValue = this[oppUnit].value;\n\n        console.log(thisValue);\n\n        for (const [key, value] of Object.entries(relativeValues[system][oppUnit])) {\n            const thisQuotient = Math.abs(value.value / thisValue);\n            if (quotient) {\n                if (quotient.val > thisQuotient && thisQuotient > 1) {\n                    quotient = {\n                        val: thisQuotient,\n                        key: key \n                    };\n                }\n            }\n            if (!quotient) {\n                quotient = {\n                    val: thisQuotient,\n                    key: key \n                };\n            }\n        }\n\n        console.log(quotient.key);\n\n        return this.convert(quotient.key);\n    }\n}"]},"metadata":{},"sourceType":"module"}