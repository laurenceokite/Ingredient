{"ast":null,"code":"class Ingredient {\n  constructor(data) {\n    this.metric_weight = [{\n      unit: 'milligrams',\n      divisor: .001,\n      abbrev: 'mg',\n      selected: false,\n      value: 0\n    }, {\n      unit: 'grams',\n      divisor: 1,\n      abbrev: 'g',\n      selected: true,\n      value: 0\n    }, {\n      unit: 'kilograms',\n      divisor: 1000,\n      abbrev: 'k',\n      selected: false,\n      value: 0\n    }];\n    this.us_weight = [{\n      unit: 'pounds',\n      divisor: 454,\n      abbrev: 'lbs.',\n      selected: false,\n      value: 0\n    }, {\n      unit: 'ounces',\n      divisor: 28,\n      abbrev: 'oz.',\n      selected: true,\n      value: 0\n    }];\n    this.metric_volume = [{\n      unit: 'milliliters',\n      divisor: 1,\n      abbrev: 'mL',\n      selected: true,\n      value: 0\n    }, {\n      unit: 'liters',\n      divisor: 1000,\n      abbrev: 'L',\n      selected: false,\n      value: 0\n    }];\n    this.us_volume = [{\n      unit: 'cups',\n      divisor: 240,\n      abbrev: 'C',\n      selected: true,\n      value: 0\n    }, {\n      unit: 'quarts',\n      divisor: 946,\n      abbrev: 'Q',\n      selected: false,\n      value: 0\n    }, {\n      unit: 'gallons',\n      divisor: 3785,\n      abbrev: 'G',\n      selected: false,\n      value: 0\n    }, {\n      unit: 'teaspoons',\n      divisor: 4.929,\n      abbrev: 'tsp.',\n      selected: false,\n      value: 0\n    }, {\n      unit: 'tablespoons',\n      divisor: 14.787,\n      abbrev: 'tbsp.',\n      selected: false,\n      value: 0\n    }, {\n      unit: 'fluidOunces',\n      divisor: 29.575,\n      abbrev: 'fl. oz.',\n      selected: false,\n      value: 0\n    }];\n    this.name = void 0;\n\n    if (data) {\n      this.name = data.name;\n      this.updateValue(data.state);\n    }\n  } //return relevant units, based on global state \n\n\n  returnCurrentUnits(state) {\n    return this[state];\n  } //return data of unit with 'selected: true'\n\n\n  returnSelected(state) {\n    const selectedUnit = this[state].filter(unit => unit.selected)[0];\n    return selectedUnit;\n  } //update all relevant unit values, by giving new value of any unit\n\n\n  updateValue(state, unit, value) {\n    //retrieve index of requested unit\n    const unitIndex = this[state].findIndex(unitData => unitData.unit === unit); //get product of value and unit divisor\n\n    const product = this[state][unitIndex].divisor * value; //update each state relevant array in Ingredient\n\n    const update = units => {\n      units.forEach((unitData, index) => {\n        const thisValue = product / unitData.divisor;\n        unitData.value = thisValue;\n      });\n    };\n\n    if (state === ('metric_weight' || 'us_weight')) {\n      update(this.metric_weight);\n      update(this.us_weight);\n    }\n\n    if (state === ('metric_volume' || 'us_volume')) {\n      update(this.metric_volume);\n      update(this.us_volume);\n    }\n\n    console.log(this);\n  }\n\n}\n\n;\nexport { Ingredient };","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/client/src/components/ViewEditRecipe/Ingredient.tsx"],"names":["Ingredient","constructor","data","metric_weight","unit","divisor","abbrev","selected","value","us_weight","metric_volume","us_volume","name","updateValue","state","returnCurrentUnits","returnSelected","selectedUnit","filter","unitIndex","findIndex","unitData","product","update","units","forEach","index","thisValue","console","log"],"mappings":"AA+BA,MAAMA,UAAN,CAAgD;AA4B5CC,EAAAA,WAAW,CAACC,IAAD,EAAuC;AAAA,SA3BlDC,aA2BkD,GA3BlC,CACZ;AAAEC,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,OAAO,EAAE,IAA/B;AAAqCC,MAAAA,MAAM,EAAE,IAA7C;AAAmDC,MAAAA,QAAQ,EAAE,KAA7D;AAAoEC,MAAAA,KAAK,EAAE;AAA3E,KADY,EAEZ;AAAEJ,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,OAAO,EAAE,CAA1B;AAA6BC,MAAAA,MAAM,EAAE,GAArC;AAA0CC,MAAAA,QAAQ,EAAE,IAApD;AAA0DC,MAAAA,KAAK,EAAE;AAAjE,KAFY,EAGZ;AAAEJ,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,OAAO,EAAE,IAA9B;AAAoCC,MAAAA,MAAM,EAAE,GAA5C;AAAiDC,MAAAA,QAAQ,EAAE,KAA3D;AAAkEC,MAAAA,KAAK,EAAE;AAAzE,KAHY,CA2BkC;AAAA,SArBlDC,SAqBkD,GArBtC,CACR;AAAEL,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAE,GAA3B;AAAgCC,MAAAA,MAAM,EAAE,MAAxC;AAAgDC,MAAAA,QAAQ,EAAE,KAA1D;AAAkEC,MAAAA,KAAK,EAAE;AAAzE,KADQ,EAER;AAAEJ,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAE,EAA3B;AAA+BC,MAAAA,MAAM,EAAE,KAAvC;AAA8CC,MAAAA,QAAQ,EAAE,IAAxD;AAA8DC,MAAAA,KAAK,EAAE;AAArE,KAFQ,CAqBsC;AAAA,SAhBlDE,aAgBkD,GAhBlC,CACZ;AAAEN,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,OAAO,EAAE,CAAhC;AAAmCC,MAAAA,MAAM,EAAE,IAA3C;AAAiDC,MAAAA,QAAQ,EAAE,IAA3D;AAAiEC,MAAAA,KAAK,EAAE;AAAxE,KADY,EAEZ;AAAEJ,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAE,IAA3B;AAAiCC,MAAAA,MAAM,EAAE,GAAzC;AAA8CC,MAAAA,QAAQ,EAAE,KAAxD;AAA+DC,MAAAA,KAAK,EAAE;AAAtE,KAFY,CAgBkC;AAAA,SAXlDG,SAWkD,GAXtC,CACR;AAAEP,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,OAAO,EAAE,GAAzB;AAA8BC,MAAAA,MAAM,EAAE,GAAtC;AAA2CC,MAAAA,QAAQ,EAAE,IAArD;AAA2DC,MAAAA,KAAK,EAAE;AAAlE,KADQ,EAER;AAAEJ,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAE,GAA3B;AAAgCC,MAAAA,MAAM,EAAE,GAAxC;AAA6CC,MAAAA,QAAQ,EAAE,KAAvD;AAA8DC,MAAAA,KAAK,EAAE;AAArE,KAFQ,EAGR;AAAEJ,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,OAAO,EAAE,IAA5B;AAAkCC,MAAAA,MAAM,EAAE,GAA1C;AAA+CC,MAAAA,QAAQ,EAAE,KAAzD;AAAgEC,MAAAA,KAAK,EAAE;AAAvE,KAHQ,EAIR;AAAEJ,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,OAAO,EAAE,KAA9B;AAAqCC,MAAAA,MAAM,EAAE,MAA7C;AAAqDC,MAAAA,QAAQ,EAAE,KAA/D;AAAuEC,MAAAA,KAAK,EAAE;AAA9E,KAJQ,EAKR;AAAEJ,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,OAAO,EAAE,MAAhC;AAAwCC,MAAAA,MAAM,EAAE,OAAhD;AAAyDC,MAAAA,QAAQ,EAAE,KAAnE;AAA0EC,MAAAA,KAAK,EAAE;AAAjF,KALQ,EAMR;AAAEJ,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,OAAO,EAAE,MAAhC;AAAwCC,MAAAA,MAAM,EAAE,SAAhD;AAA2DC,MAAAA,QAAQ,EAAE,KAArE;AAA4EC,MAAAA,KAAK,EAAE;AAAnF,KANQ,CAWsC;AAAA,SAFlDI,IAEkD;;AAC9C,QAAIV,IAAJ,EAAU;AACN,WAAKU,IAAL,GAAYV,IAAI,CAACU,IAAjB;AACA,WAAKC,WAAL,CAAiBX,IAAI,CAACY,KAAtB;AACH;AACJ,GAjC2C,CAmC5C;;;AACAC,EAAAA,kBAAkB,CAACD,KAAD,EAAoD;AAClE,WAAO,KAAKA,KAAL,CAAP;AACH,GAtC2C,CAwC5C;;;AACAE,EAAAA,cAAc,CAACF,KAAD,EAAkD;AAE5D,UAAMG,YAA2B,GAC7B,KAAKH,KAAL,EAAYI,MAAZ,CAAmBd,IAAI,IAAIA,IAAI,CAACG,QAAhC,EAA0C,CAA1C,CADJ;AAGA,WAAOU,YAAP;AACH,GA/C2C,CAiD5C;;;AACAJ,EAAAA,WAAW,CAACC,KAAD,EAAmCV,IAAnC,EAA+CI,KAA/C,EAAqE;AAE5E;AACA,UAAMW,SAAiB,GAAG,KAAKL,KAAL,EAAYM,SAAZ,CAAsBC,QAAQ,IAAIA,QAAQ,CAACjB,IAAT,KAAkBA,IAApD,CAA1B,CAH4E,CAK5E;;AACA,UAAMkB,OAAO,GAAG,KAAKR,KAAL,EAAYK,SAAZ,EAAuBd,OAAvB,GAAiCG,KAAjD,CAN4E,CAQ5E;;AACA,UAAMe,MAAM,GAAIC,KAAD,IAA4B;AACvCA,MAAAA,KAAK,CAACC,OAAN,CAAc,CAACJ,QAAD,EAAWK,KAAX,KAAqB;AAC/B,cAAMC,SAAS,GAAGL,OAAO,GAAGD,QAAQ,CAAChB,OAArC;AACAgB,QAAAA,QAAQ,CAACb,KAAT,GAAiBmB,SAAjB;AACH,OAHD;AAIH,KALD;;AAOA,QAAIb,KAAK,MAAM,mBAAmB,WAAzB,CAAT,EAAgD;AAC5CS,MAAAA,MAAM,CAAC,KAAKpB,aAAN,CAAN;AACAoB,MAAAA,MAAM,CAAC,KAAKd,SAAN,CAAN;AACH;;AAED,QAAIK,KAAK,MAAM,mBAAmB,WAAzB,CAAT,EAAgD;AAC5CS,MAAAA,MAAM,CAAC,KAAKb,aAAN,CAAN;AACAa,MAAAA,MAAM,CAAC,KAAKZ,SAAN,CAAN;AACH;;AACDiB,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACH;;AA5E2C;;AA6E/C;AAED,SAAS7B,UAAT","sourcesContent":["import { useStoreContext, GlobalSystems, GlobalUnits } from \"../../utils/GlobalState\";\n\ntype Unit = \n    'milligrams' | 'grams' | 'kilograms' |\n    'pounds' | 'ounces' |\n    'milliliters' | 'liters' |\n    'cups' | 'quarts' | 'gallons' | 'teaspoons' | 'tablespoons' | 'fluidOunces';\n\n\ninterface UnitInterface {\n    unit: string; \n    divisor: number;\n    abbrev: string; \n    selected: boolean; \n    value: number;\n}\n\ninterface IngredientInterface {\n    metric_weight: UnitInterface[];\n    us_weight: UnitInterface[];\n    metric_volume: UnitInterface[];\n    us_volume: UnitInterface[];\n}\n\ninterface IngredientDataInterface {\n    name: string;\n    value: number | false;\n    unit: string;\n    state: keyof IngredientInterface;\n}\n\nclass Ingredient implements IngredientInterface {\n    metric_weight = [\n        { unit: 'milligrams', divisor: .001, abbrev: 'mg', selected: false, value: 0 },\n        { unit: 'grams', divisor: 1, abbrev: 'g', selected: true, value: 0 },\n        { unit: 'kilograms', divisor: 1000, abbrev: 'k', selected: false, value: 0 }\n    ];   \n\n    us_weight = [\n        { unit: 'pounds', divisor: 454, abbrev: 'lbs.', selected: false , value: 0 },\n        { unit: 'ounces', divisor: 28, abbrev: 'oz.', selected: true, value: 0 }\n    ];\n\n    metric_volume = [\n        { unit: 'milliliters', divisor: 1, abbrev: 'mL', selected: true, value: 0 },\n        { unit: 'liters', divisor: 1000, abbrev: 'L', selected: false, value: 0 },\n    ];\n        \n    us_volume = [   \n        { unit: 'cups', divisor: 240, abbrev: 'C', selected: true, value: 0 },\n        { unit: 'quarts', divisor: 946, abbrev: 'Q', selected: false, value: 0 },\n        { unit: 'gallons', divisor: 3785, abbrev: 'G', selected: false, value: 0 },\n        { unit: 'teaspoons', divisor: 4.929, abbrev: 'tsp.', selected: false , value: 0},\n        { unit: 'tablespoons', divisor: 14.787, abbrev: 'tbsp.', selected: false, value: 0 },\n        { unit: 'fluidOunces', divisor: 29.575, abbrev: 'fl. oz.', selected: false, value: 0 }\n    ];\n\n    name?: string;\n\n    constructor(data: IngredientDataInterface | null) {\n        if (data) {\n            this.name = data.name;\n            this.updateValue(data.state,);\n        }\n    }\n\n    //return relevant units, based on global state \n    returnCurrentUnits(state: keyof IngredientInterface): UnitInterface[] {\n        return this[state];\n    }\n\n    //return data of unit with 'selected: true'\n    returnSelected(state: keyof IngredientInterface): UnitInterface {\n\n        const selectedUnit: UnitInterface = \n            this[state].filter(unit => unit.selected)[0];  \n\n        return selectedUnit;\n    }\n    \n    //update all relevant unit values, by giving new value of any unit\n    updateValue(state: keyof IngredientInterface, unit: Unit, value: number ): void {\n\n        //retrieve index of requested unit\n        const unitIndex: number = this[state].findIndex(unitData => unitData.unit === unit);\n\n        //get product of value and unit divisor\n        const product = this[state][unitIndex].divisor * value;\n\n        //update each state relevant array in Ingredient\n        const update = (units: UnitInterface[]) => {\n            units.forEach((unitData, index) => {\n                const thisValue = product / unitData.divisor;\n                unitData.value = thisValue;\n            });\n        }\n\n        if (state === ('metric_weight' || 'us_weight')) {\n            update(this.metric_weight);\n            update(this.us_weight);\n        }\n\n        if (state === ('metric_volume' || 'us_volume')) {\n            update(this.metric_volume);\n            update(this.us_volume);\n        }\n        console.log(this);\n    }\n};\n\nexport { Ingredient, UnitInterface, IngredientInterface, IngredientDataInterface }\n\n"]},"metadata":{},"sourceType":"module"}