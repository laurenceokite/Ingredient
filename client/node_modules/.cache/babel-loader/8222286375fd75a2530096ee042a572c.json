{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { convertSubMeasure, convertMeasure } from \"../../utils/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RenderIngredient(_ref) {\n  _s();\n\n  let {\n    name,\n    amount,\n    measure\n  } = _ref;\n  const [state] = useStoreContext();\n  const [ingredientSubmeasureState, setIngredientSubmeasureState] = useState({\n    measure: measure,\n    submeasure: amount[measure].submeasure,\n    newMeasurement: false\n  });\n  const {\n    value,\n    submeasure\n  } = amount[measure]; //this gets sent to getMeasString, maybe convert this all to one function\n\n  const ingredientMeasurement = getMeasString(getIngredientMeasurement);\n\n  function getIngredientMeasurement() {\n    //If global state measurement type has been changed, set submeasure to no \"newMeasurement\" and return value or false\n    //Except if auto convert is on\n    if (ingredientSubmeasureState.measure !== measure && (value || !state.autoConvert)) {\n      setIngredientSubmeasureState({\n        measure: measure,\n        submeasure: amount[measure].submeasure,\n        newMeasurement: false\n      });\n      return value;\n    } else if (ingredientSubmeasureState.measure !== measure && state.autoConvert) {\n      const current = ingredientSubmeasureState.measure;\n      const requested = `${state.measureType}-${state.measureSystem}`;\n      const measurement = amount[current].value;\n      const submeasure = ingredientSubmeasureState.submeasure;\n      const {\n        newMeasurement,\n        newSubmeasure\n      } = convertMeasure(current, requested, measurement, submeasure);\n      setIngredientSubmeasureState({\n        measure: requested,\n        submeasure: newSubmeasure,\n        newMeasurement: newMeasurement\n      });\n      return newMeasurement;\n    } else if (ingredientSubmeasureState.newMeasurement) {\n      return ingredientSubmeasureState.newMeasurement;\n    } else if (value) {\n      return value;\n    } else {\n      return false;\n    }\n  } //convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\n\n\n  function getMeasString(meas) {\n    if (meas) {\n      //if measurement is in pounds send to displayPounds function for further formatting\n      if (ingredientSubmeasureState.submeasure === 'pounds') {\n        return displayPounds(meas);\n      } else {\n        return (Math.round(meas * 100) / 100).toLocaleString();\n      }\n    } else {\n      //if no measurement\n      return false;\n    }\n  } //format pounds for display as string\n\n\n  function displayPounds(measurement) {\n    const poundsInt = parseInt(measurement).toLocaleString();\n    const remainder = measurement % 1;\n    const remainderAsOunces = (remainder * 16).toFixed(1);\n\n    if (remainder) {\n      return `${poundsInt}: ${remainderAsOunces}`;\n    } else if (measurement) {\n      return measurement;\n    } else {\n      return false;\n    }\n  }\n\n  function handleSubMeasureChange(event) {\n    const newSubmeasure = event.target.value;\n    const newMeasurement = convertSubMeasure(ingredientSubmeasureState.submeasure, newSubmeasure, ingredientMeasurement).toFixed(6);\n    setIngredientSubmeasureState({\n      measure: measure,\n      submeasure: newSubmeasure,\n      newMeasurement: newMeasurement\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: ingredientMeasurement ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: ingredientMeasurementString\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"No Amt.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: `${name}MeasurementSelect`,\n      onChange: handleSubMeasureChange,\n      children: [measure === 'volume-imperial' && /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"imperialVolumeSelect\",\n        defaultValue: submeasure,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gallons\",\n          children: \"G\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"quarts\",\n          children: \"Q\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cups\",\n          children: \"C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"tablespoons\",\n          children: \"T\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"teaspoons\",\n          children: \"t\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fluid-ounces\",\n          children: \"fl. oz.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 25\n      }, this), measure === 'weight-imperial' && /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"imperialWeightSelect\",\n        defaultValue: submeasure,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"pounds\",\n          children: \"lbs.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ounces\",\n          children: \"oz.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }, this), measure === 'volume-metric' && /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"metricVolumeSelect\",\n        defaultValue: submeasure,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"liters\",\n          children: \"L\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"deciliters\",\n          children: \"dL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"milliliters\",\n          children: \"mL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }, this), measure === 'weight-metric' && /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"metricWeightSelect\",\n        defaultValue: submeasure,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"kilograms\",\n          children: \"kg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"grams\",\n          children: \"g\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"milligrams\",\n          children: \"mg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RenderIngredient, \"0bNWS9JEYUDIBsJyQxk9C/Vow/E=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = RenderIngredient;\nexport default RenderIngredient;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderIngredient\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js"],"names":["React","useState","useStoreContext","convertSubMeasure","convertMeasure","RenderIngredient","name","amount","measure","state","ingredientSubmeasureState","setIngredientSubmeasureState","submeasure","newMeasurement","value","ingredientMeasurement","getMeasString","getIngredientMeasurement","autoConvert","current","requested","measureType","measureSystem","measurement","newSubmeasure","meas","displayPounds","Math","round","toLocaleString","poundsInt","parseInt","remainder","remainderAsOunces","toFixed","handleSubMeasureChange","event","target","ingredientMeasurementString"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { convertSubMeasure, convertMeasure } from \"../../utils/helpers\"\n\n\nfunction RenderIngredient({ name, amount, measure }) {\n    const [ state ] = useStoreContext();\n\n    const [ingredientSubmeasureState, setIngredientSubmeasureState] = useState({\n        measure: measure,\n        submeasure: amount[measure].submeasure,\n        newMeasurement: false\n    })\n\n    const { value, submeasure } = amount[measure];\n\n    //this gets sent to getMeasString, maybe convert this all to one function\n    const ingredientMeasurement = getMeasString(getIngredientMeasurement);\n\n    function getIngredientMeasurement() {\n        //If global state measurement type has been changed, set submeasure to no \"newMeasurement\" and return value or false\n        //Except if auto convert is on\n        if (ingredientSubmeasureState.measure !== measure && (value || !state.autoConvert)) {\n            setIngredientSubmeasureState({\n                measure: measure,\n                submeasure: amount[measure].submeasure,\n                newMeasurement: false\n            });\n            \n            return value;\n        } \n\n        else if (ingredientSubmeasureState.measure !== measure && state.autoConvert) {\n            const current = ingredientSubmeasureState.measure;\n            const requested = `${state.measureType}-${state.measureSystem}`;\n            const measurement = amount[current].value;\n            const submeasure = ingredientSubmeasureState.submeasure;\n        \n            const { newMeasurement, newSubmeasure } = convertMeasure(current, requested, measurement, submeasure);\n\n            setIngredientSubmeasureState({\n                measure: requested,\n                submeasure: newSubmeasure,\n                newMeasurement: newMeasurement\n            });\n\n            return newMeasurement;\n        }\n\n        else if (ingredientSubmeasureState.newMeasurement) {\n            return(ingredientSubmeasureState.newMeasurement);\n        } \n\n        else if (value){\n            return(value);\n        }\n\n        else {\n            return(false);\n        }\n    }\n\n    //convert measurement number to string, formatted with commas and rounded to 0, 1 or 2 decimal points\n    function getMeasString(meas) {\n        if (meas) {\n            //if measurement is in pounds send to displayPounds function for further formatting\n            if (ingredientSubmeasureState.submeasure === 'pounds') {\n                return displayPounds(meas);\n            }\n            else {\n                return (Math.round(meas*100)/100).toLocaleString();\n            }\n        }\n        else {\n            //if no measurement\n            return false;\n        }\n    }\n\n    //format pounds for display as string\n    function displayPounds(measurement) {\n        const poundsInt = parseInt(measurement).toLocaleString();\n        const remainder = measurement % 1;\n        const remainderAsOunces = (remainder*16).toFixed(1);\n        \n        if (remainder) {\n            return `${poundsInt}: ${remainderAsOunces}`;\n        }\n        else if (measurement) {\n            return measurement;\n        } \n        else {\n            return false;\n        }\n    }\n\n    function handleSubMeasureChange(event) {\n        const newSubmeasure = event.target.value;\n        const newMeasurement = convertSubMeasure(ingredientSubmeasureState.submeasure, newSubmeasure, ingredientMeasurement).toFixed(6);\n        setIngredientSubmeasureState({\n            measure: measure,\n            submeasure: newSubmeasure,\n            newMeasurement: newMeasurement \n        }) \n    }\n\n    return(\n        <div>\n            <div>{name}</div>\n\n            <div>\n                { ingredientMeasurement \n                    ? (<div>{ingredientMeasurementString}</div>)\n                    : (<form>\n                        <input type=\"text\" placeholder=\"No Amt.\"/>\n                    </form>)\n                }        \n            </div>\n\n            \n\n            <form id={`${name}MeasurementSelect`} onChange={handleSubMeasureChange}>\n                        {(measure === 'volume-imperial') && (\n                        <select className=\"imperialVolumeSelect\" defaultValue={submeasure}>\n                            <option value=\"gallons\">G</option>\n                            <option value=\"quarts\">Q</option>\n                            <option value=\"cups\">C</option>\n                            <option value=\"tablespoons\">T</option>\n                            <option value=\"teaspoons\">t</option>\n                            <option value=\"fluid-ounces\">fl. oz.</option>\n                        </select>\n                        )}\n                        \n                        {(measure === 'weight-imperial') && (\n                        <select className=\"imperialWeightSelect\" defaultValue={submeasure}>\n                            <option value=\"pounds\">lbs.</option>\n                            <option value=\"ounces\">oz.</option>\n                        </select>\n                        )}\n                        {/* if Metric */}\n                        {(measure === 'volume-metric') && (\n                        <select className=\"metricVolumeSelect\" defaultValue={submeasure}>\n                            <option value=\"liters\">L</option>\n                            <option value=\"deciliters\">dL</option>\n                            <option value=\"milliliters\">mL</option>\n                        </select>\n                        )}\n\n                        {(measure === 'weight-metric') && (\n                        <select className=\"metricWeightSelect\" defaultValue={submeasure}>\n                            <option value=\"kilograms\">kg</option>\n                            <option value=\"grams\">g</option>\n                            <option value=\"milligrams\">mg</option>\n                        </select>\n                        )}\n                    </form>    \n        </div>\n    )\n}\n\nexport default RenderIngredient;"]},"metadata":{},"sourceType":"module"}