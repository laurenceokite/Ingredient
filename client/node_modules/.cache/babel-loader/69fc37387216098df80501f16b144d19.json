{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { CHANGE_SUBMEASURE } from '../../utils/actions';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ViewEditRecipe() {\n  _s();\n\n  const [state, dispatch] = useStoreContext();\n  const [addIngredientState, setAddIngredientState] = useState({\n    ingredient: '',\n    amount: {\n      'weight-metric': {\n        value: '',\n        submeasure: 'grams'\n      },\n      'weight-imperial': {\n        value: '',\n        submeasure: 'ounces'\n      },\n      'volume-metric': {\n        value: '',\n        submeasure: 'milliliters'\n      },\n      'volume-imperial': {\n        value: '',\n        submeasure: 'cups'\n      }\n    }\n  });\n  const [recipeState, setRecipeState] = useState({\n    recipe: '',\n    ingredients: []\n  });\n  const measure = `${state.measureType}-${state.measureSystem}`; // Push new ingredient to 'ingredients' array\n\n  function addIngredient(event) {\n    event.preventDefault(); //Turn 'amount' string to integer for math-y purposes\n\n    const amountInt = parseInt(addIngredientState.amount[measure].value);\n    setRecipeState({ //Add ingredient to array of objects in recipeState\n      ...recipeState,\n      ingredients: [...recipeState.ingredients, {\n        ingredient: addIngredientState.ingredient,\n        amount: { ...addIngredientState.amount\n        }\n      }]\n    });\n    setAddIngredientState({\n      ingredient: '',\n      amount: {\n        'weight-metric': {\n          value: '',\n          submeasure: 'grams'\n        },\n        'weight-imperial': {\n          value: '',\n          submeasure: 'ounces'\n        },\n        'volume-metric': {\n          value: '',\n          submeasure: 'milliliters'\n        },\n        'volume-imperial': {\n          value: '',\n          submeasure: 'cups'\n        }\n      }\n    });\n  }\n\n  ;\n\n  function updateSubMeasure(submeasure) {\n    dispatch({\n      type: CHANGE_SUBMEASURE,\n      subMeasure: submeasure\n    });\n  } // Each time text is entered to input, update formState\n\n\n  const handleNameChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setAddIngredientState({ ...addIngredientState,\n      ingredient: value\n    });\n  };\n\n  const handleAmountChange = event => {\n    const {\n      value\n    } = event.target;\n    setAddIngredientState({ ...addIngredientState,\n      amount: { ...addIngredientState.amount,\n        [measure]: {\n          value: value,\n          submeasure: state.subMeasure\n        }\n      }\n    });\n    console.log(addIngredientState);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ToggleMeasure, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => recipeState.ingredients.map(ingredient => console.log(ingredient.amount)),\n      children: \"log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: recipeState.ingredients.map(ingredient => /*#__PURE__*/_jsxDEV(RenderIngredient, {\n        name: ingredient.ingredient,\n        amount: ingredient.amount,\n        measure: measure\n      }, ingredient.ingredient, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addIngredient,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Ingredient\",\n          id: \"ingredientNameInput\",\n          name: \"ingredient\",\n          value: addIngredientState.ingredient,\n          autoComplete: \"off\",\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Amount\",\n          id: \"ingredientAmtInput\",\n          name: \"amount\",\n          value: addIngredientState.amount[measure].value,\n          onChange: handleAmountChange,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"measurementSelect\",\n        children: [measure === 'volume-imperial' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"imperialVolumeSelect\",\n          defaultValue: state.subMeasure,\n          onChange: event => updateSubMeasure(event.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gallons\",\n            children: \"G\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"quarts\",\n            children: \"Q\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"cups\",\n            children: \"C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"tablespoons\",\n            children: \"T\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"teaspoons\",\n            children: \"t\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"fluid ounces\",\n            children: \"fl. oz.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 25\n        }, this), measure === 'weight-imperial' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"imperialWeightSelect\",\n          defaultValue: state.subMeasure,\n          onChange: event => updateSubMeasure(event.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"pounds\",\n            children: \"lbs.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ounces\",\n            children: \"oz.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this), measure === 'volume-metric' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"metricVolumeSelect\",\n          defaultValue: state.subMeasure,\n          onChange: event => updateSubMeasure(event.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"liters\",\n            children: \"L\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"deciliters\",\n            children: \"dL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"milliliters\",\n            children: \"mL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this), measure === 'weight-metric' && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"metricWeightSelect\",\n          defaultValue: state.subMeasure,\n          onChange: event => updateSubMeasure(event.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"kilograms\",\n            children: \"kg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"grams\",\n            children: \"g\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"milligrams\",\n            children: \"mg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ViewEditRecipe, \"JRlNeLH1YAlwN7J0JyzaLAC2kkM=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ViewEditRecipe;\n;\nexport default ViewEditRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewEditRecipe\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/ViewEditRecipe/index.js"],"names":["React","useState","ToggleMeasure","RenderIngredient","CHANGE_SUBMEASURE","useStoreContext","ViewEditRecipe","state","dispatch","addIngredientState","setAddIngredientState","ingredient","amount","value","submeasure","recipeState","setRecipeState","recipe","ingredients","measure","measureType","measureSystem","addIngredient","event","preventDefault","amountInt","parseInt","updateSubMeasure","type","subMeasure","handleNameChange","name","target","handleAmountChange","console","log","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ToggleMeasure from '../ToggleMeasure';\nimport RenderIngredient from '../RenderIngredient';\nimport { CHANGE_SUBMEASURE } from '../../utils/actions';\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\nfunction ViewEditRecipe() {\n    const [ state, dispatch ] = useStoreContext();\n    const [addIngredientState, setAddIngredientState] = useState({ \n        ingredient: '', amount: {\n            'weight-metric':\n            {\n                value: '',\n                submeasure: 'grams'\n            },\n            'weight-imperial':\n            {\n                value: '',\n                submeasure: 'ounces'\n            },\n            'volume-metric':\n            {\n                value: '',\n                submeasure: 'milliliters'\n            },\n            'volume-imperial':\n            {\n                value: '',\n                submeasure: 'cups'\n            }\n        }\n    });\n    const [recipeState, setRecipeState] = useState({ \n        recipe: '', \n        ingredients: []\n    });\n\n\n    const measure = `${state.measureType}-${state.measureSystem}`;\n    \n    // Push new ingredient to 'ingredients' array\n    function addIngredient(event) {\n        event.preventDefault();\n\n        //Turn 'amount' string to integer for math-y purposes\n        const amountInt = parseInt(addIngredientState.amount[measure].value);\n\n        setRecipeState({\n            //Add ingredient to array of objects in recipeState\n            ...recipeState,\n            ingredients: [...recipeState.ingredients, {\n                ingredient: addIngredientState.ingredient,\n                    amount: {\n                        ...addIngredientState.amount\n                    }  \n            }]\n        });\n\n        \n        setAddIngredientState({\n            ingredient: '',\n            amount: {\n                'weight-metric':\n                {\n                    value: '',\n                    submeasure: 'grams'\n                },\n                'weight-imperial':\n                {\n                    value: '',\n                    submeasure: 'ounces'\n                },\n                'volume-metric':\n                {\n                    value: '',\n                    submeasure: 'milliliters'\n                },\n                'volume-imperial':\n                {\n                    value: '',\n                    submeasure: 'cups'\n                }\n            }\n        });\n    };\n\n    function updateSubMeasure(submeasure) {\n        dispatch({\n            type: CHANGE_SUBMEASURE,\n            subMeasure: submeasure\n        });\n    }\n\n    // Each time text is entered to input, update formState\n    const handleNameChange = event => {\n        const { name, value } = event.target;\n        setAddIngredientState({\n          ...addIngredientState,\n          ingredient: value\n        });\n    };\n\n    const handleAmountChange = event => {\n        const { value } = event.target;\n        setAddIngredientState({\n          ...addIngredientState,\n          amount: {\n              ...addIngredientState.amount,\n              [measure]:\n              {\n                  value: value,\n                  submeasure: state.subMeasure\n              }\n            }\n        });\n        console.log(addIngredientState);\n    };\n\n    return(\n        <div>\n            {/* Change measurement type here */}\n            <ToggleMeasure/>\n            <button onClick={() => (recipeState.ingredients.map(ingredient => console.log(ingredient.amount)))}>log</button>\n            {/* Map array of ingredients */}\n            <div>\n                    {recipeState.ingredients.map(ingredient => (\n                        <RenderIngredient key={ingredient.ingredient} name={ingredient.ingredient} amount={ingredient.amount} measure={measure}/>\n                    ))}\n            </div>\n\n            {/* Ingredient Input */}\n                <form onSubmit={addIngredient}>\n                    <div>\n                        <input type=\"text\" \n                            placeholder=\"Ingredient\" \n                            id='ingredientNameInput'\n                            name='ingredient'\n                            value={addIngredientState.ingredient}\n                            autoComplete=\"off\" \n                            onChange={handleNameChange}/>\n\n                        <input type=\"text\" \n                            placeholder=\"Amount\"\n                            id='ingredientAmtInput'\n                            name='amount'\n                            value={addIngredientState.amount[measure].value}\n                            onChange={handleAmountChange}\n                            autoComplete=\"off\"/>\n                    </div>\n\n                    {/* Measurement Select, Displays each set of options conditionally based on state */}\n\n                    {/* if Imperial */}\n                    <div id='measurementSelect'>\n                        {(measure === 'volume-imperial') && (\n                        <select className=\"imperialVolumeSelect\" defaultValue={state.subMeasure} onChange={(event)=> updateSubMeasure(event.target.value)}>\n                            <option value=\"gallons\">G</option>\n                            <option value=\"quarts\">Q</option>\n                            <option value=\"cups\">C</option>\n                            <option value=\"tablespoons\">T</option>\n                            <option value=\"teaspoons\">t</option>\n                            <option value=\"fluid ounces\">fl. oz.</option>\n                        </select>\n                        )}\n                        \n                        {(measure === 'weight-imperial') && (\n                        <select className=\"imperialWeightSelect\" defaultValue={state.subMeasure } onChange={(event)=> updateSubMeasure(event.target.value)}>\n                            <option value=\"pounds\">lbs.</option>\n                            <option value=\"ounces\">oz.</option>\n                        </select>\n                        )}\n                        {/* if Metric */}\n                        {(measure === 'volume-metric') && (\n                        <select className=\"metricVolumeSelect\" defaultValue={state.subMeasure} onChange={(event)=> updateSubMeasure(event.target.value)}>\n                            <option value=\"liters\">L</option>\n                            <option value=\"deciliters\">dL</option>\n                            <option value=\"milliliters\">mL</option>\n                        </select>\n                        )}\n\n                        {(measure === 'weight-metric') && (\n                        <select className=\"metricWeightSelect\" defaultValue={state.subMeasure} onChange={(event)=> updateSubMeasure(event.target.value)}>\n                            <option value=\"kilograms\">kg</option>\n                            <option value=\"grams\">g</option>\n                            <option value=\"milligrams\">mg</option>\n                        </select>\n                        )}\n                    </div> \n                    {/* Add Ingredient Button */}\n                    <div>\n                        <input type=\"submit\" value=\"+\"></input>\n                    </div>\n                </form>\n        </div>\n    )\n};\n\nexport default ViewEditRecipe;"]},"metadata":{},"sourceType":"module"}