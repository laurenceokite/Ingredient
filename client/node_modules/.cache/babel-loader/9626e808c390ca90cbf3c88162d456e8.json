{"ast":null,"code":"import { relativeValues } from \"./relativeValues\";\nexport class Ingredient {\n  constructor(data, unit, system) {\n    this.system = system;\n    this.unit = unit;\n    this.weight = false;\n    this.volume = false;\n    Object.assign(this, data);\n  }\n\n  convert(requested) {\n    const {\n      unit,\n      system\n    } = this;\n    const relativeValue = relativeValues[system][unit][requested].value;\n    return {\n      measurement: this[unit].value / relativeValue,\n      unit: requested\n    };\n  }\n\n  default() {\n    const {\n      unit,\n      system\n    } = this;\n    return this.convert(this[unit].default);\n  }\n\n  findConciseUnit() {\n    const {\n      unit,\n      system\n    } = this;\n    let oppUnit;\n\n    if (unit === 'volume') {\n      oppUnit = 'weight';\n    } else oppUnit = 'volume';\n\n    let thisValue;\n\n    if (this[unit]) {\n      thisValue = this[unit].value;\n    } else thisValue = this[oppUnit].value;\n\n    let quotient;\n\n    for (const [key, value] of Object.entries(relativeValues[system][oppUnit])) {\n      const thisQuotient = Math.abs(value.value / thisValue);\n\n      if (quotient) {\n        if (quotient.val > thisQuotient && thisQuotient > 1) {\n          quotient = {\n            val: thisQuotient,\n            key: key\n          };\n        }\n      }\n\n      if (!quotient) {\n        quotient = {\n          val: thisQuotient,\n          key: key\n        };\n      }\n    }\n\n    return quotient.key;\n  }\n\n}","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/Ingredient.js"],"names":["relativeValues","Ingredient","constructor","data","unit","system","weight","volume","Object","assign","convert","requested","relativeValue","value","measurement","default","findConciseUnit","oppUnit","thisValue","quotient","key","entries","thisQuotient","Math","abs","val"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AAEA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,IAAP,EAAaC,MAAb,EAAqB;AAC5B,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKD,IAAL,GAAYA,IAAZ;AAEA,SAAKE,MAAL,GAAc,KAAd;AACA,SAAKC,MAAL,GAAc,KAAd;AAEAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBN,IAApB;AACH;;AAEDO,EAAAA,OAAO,CAACC,SAAD,EAAY;AACf,UAAM;AAAEP,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAmB,IAAzB;AACA,UAAMO,aAAa,GAAGZ,cAAc,CAACK,MAAD,CAAd,CAAuBD,IAAvB,EAA6BO,SAA7B,EAAwCE,KAA9D;AAEA,WAAO;AACHC,MAAAA,WAAW,EAAE,KAAKV,IAAL,EAAWS,KAAX,GAAmBD,aAD7B;AAEHR,MAAAA,IAAI,EAAEO;AAFH,KAAP;AAIH;;AAEDI,EAAAA,OAAO,GAAG;AACN,UAAM;AAAEX,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAmB,IAAzB;AAEA,WAAO,KAAKK,OAAL,CAAa,KAAKN,IAAL,EAAWW,OAAxB,CAAP;AACH;;AAEDC,EAAAA,eAAe,GAAG;AACd,UAAM;AAAEZ,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAmB,IAAzB;AAEA,QAAIY,OAAJ;;AACA,QAAIb,IAAI,KAAK,QAAb,EACA;AAAEa,MAAAA,OAAO,GAAG,QAAV;AAAoB,KADtB,MAGKA,OAAO,GAAG,QAAV;;AAEL,QAAIC,SAAJ;;AACA,QAAI,KAAKd,IAAL,CAAJ,EACA;AAAEc,MAAAA,SAAS,GAAG,KAAKd,IAAL,EAAWS,KAAvB;AAA8B,KADhC,MAGKK,SAAS,GAAG,KAAKD,OAAL,EAAcJ,KAA1B;;AAEL,QAAIM,QAAJ;;AAEA,SAAK,MAAM,CAACC,GAAD,EAAMP,KAAN,CAAX,IAA2BL,MAAM,CAACa,OAAP,CAAerB,cAAc,CAACK,MAAD,CAAd,CAAuBY,OAAvB,CAAf,CAA3B,EAA4E;AACxE,YAAMK,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASX,KAAK,CAACA,KAAN,GAAcK,SAAvB,CAArB;;AACA,UAAIC,QAAJ,EAAc;AACV,YAAIA,QAAQ,CAACM,GAAT,GAAeH,YAAf,IAA+BA,YAAY,GAAG,CAAlD,EAAqD;AACjDH,UAAAA,QAAQ,GAAG;AACPM,YAAAA,GAAG,EAAEH,YADE;AAEPF,YAAAA,GAAG,EAAEA;AAFE,WAAX;AAIH;AACJ;;AACD,UAAI,CAACD,QAAL,EAAe;AACXA,QAAAA,QAAQ,GAAG;AACPM,UAAAA,GAAG,EAAEH,YADE;AAEPF,UAAAA,GAAG,EAAEA;AAFE,SAAX;AAIH;AACJ;;AAED,WAAOD,QAAQ,CAACC,GAAhB;AACH;;AA/DmB","sourcesContent":["import { relativeValues } from \"./relativeValues\";\n\nexport class Ingredient {\n    constructor(data, unit, system) {\n        this.system = system;\n        this.unit = unit;\n\n        this.weight = false;\n        this.volume = false;\n\n        Object.assign(this, data);\n    }\n\n    convert(requested) {\n        const { unit, system } = this;\n        const relativeValue = relativeValues[system][unit][requested].value;\n\n        return {\n            measurement: this[unit].value / relativeValue,\n            unit: requested\n        };\n    }\n\n    default() {\n        const { unit, system } = this;\n        \n        return this.convert(this[unit].default);\n    }\n\n    findConciseUnit() {\n        const { unit, system } = this;\n\n        let oppUnit;\n        if (unit === 'volume') \n        { oppUnit = 'weight' }\n\n        else oppUnit = 'volume';\n\n        let thisValue;\n        if (this[unit]) \n        { thisValue = this[unit].value }\n\n        else thisValue = this[oppUnit].value;\n\n        let quotient;\n\n        for (const [key, value] of Object.entries(relativeValues[system][oppUnit])) {\n            const thisQuotient = Math.abs(value.value / thisValue);\n            if (quotient) {\n                if (quotient.val > thisQuotient && thisQuotient > 1) {\n                    quotient = {\n                        val: thisQuotient,\n                        key: key \n                    };\n                }\n            }\n            if (!quotient) {\n                quotient = {\n                    val: thisQuotient,\n                    key: key \n                };\n            }\n        }\n\n        return quotient.key;\n    }\n}"]},"metadata":{},"sourceType":"module"}