{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { convertSubMeasure } from \"../../utils/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RenderIngredient(_ref) {\n  _s();\n\n  let {\n    name,\n    amount,\n    measure\n  } = _ref;\n  const [state, dispatch] = useStoreContext();\n  const [ingredientSubmeasureState, setIngredientSubmeasureState] = useState({\n    submeasure: amount.submeasure,\n    newMeasurement: false\n  });\n  const measurement = amount[measure];\n\n  function handleSubMeasureChange(event) {\n    const newSubMeasure = event.target.value;\n    const newMeasurement = convertSubMeasure(ingredientSubmeasureState.submeasure, newSubMeasure, measurement);\n    setIngredientSubmeasureState({\n      submeasure: newSubMeasure,\n      newMeasurement: newMeasurement\n    });\n    console.log(newMeasurement, ingredientSubmeasureState);\n  }\n\n  class DisplayMeasurement extends React.Component {\n    constructor() {\n      super(...arguments);\n\n      this.DisplayMeasurement = () => {\n        if (ingredientSubmeasureState.newMeasurement) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: ingredientSubmeasureState.newMeasurement\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 25\n          }, this);\n        } else if (measurement) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: measurement\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 25\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"form\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"No Amt.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 21\n          }, this);\n        }\n      };\n    }\n\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DisplayMeasurement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"measurementSelect\",\n      onChange: handleSubMeasureChange,\n      children: [measure === 'volume-imperial' && /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"imperialVolumeSelect\",\n        defaultValue: ingredientSubmeasureState.submeasure,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gallons\",\n          children: \"G\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"quarts\",\n          children: \"Q\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cups\",\n          children: \"C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"tablespoons\",\n          children: \"T\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"teaspoons\",\n          children: \"t\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fluid ounces\",\n          children: \"fl. oz.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }, this), measure === 'weight-imperial' && /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"imperialWeightSelect\",\n        defaultValue: ingredientSubmeasureState.submeasure,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"pounds\",\n          children: \"lbs.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ounces\",\n          children: \"oz.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }, this), measure === 'volume-metric' && /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"metricVolumeSelect\",\n        defaultValue: ingredientSubmeasureState.submeasure,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"liters\",\n          children: \"L\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"deciliters\",\n          children: \"dL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"milliliters\",\n          children: \"mL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }, this), measure === 'weight-metric' && /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"metricWeightSelect\",\n        defaultValue: ingredientSubmeasureState.submeasure,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"kilograms\",\n          children: \"kg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"grams\",\n          children: \"g\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"milligrams\",\n          children: \"mg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RenderIngredient, \"c7v3G6vyFpVoE/O/1FrMtA/OCL8=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = RenderIngredient;\nexport default RenderIngredient;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderIngredient\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/RenderIngredient/index.js"],"names":["React","useState","useStoreContext","convertSubMeasure","RenderIngredient","name","amount","measure","state","dispatch","ingredientSubmeasureState","setIngredientSubmeasureState","submeasure","newMeasurement","measurement","handleSubMeasureChange","event","newSubMeasure","target","value","console","log","DisplayMeasurement","Component"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { convertSubMeasure } from \"../../utils/helpers\"\n\nfunction RenderIngredient({ name, amount, measure }) {\n    const [ state, dispatch ] = useStoreContext();\n\n    const [ingredientSubmeasureState, setIngredientSubmeasureState] = useState({\n        submeasure: amount.submeasure,\n        newMeasurement: false\n    })\n\n    const measurement = amount[measure];\n\n\n    function handleSubMeasureChange(event) {\n        const newSubMeasure = event.target.value;\n        const newMeasurement = convertSubMeasure(ingredientSubmeasureState.submeasure, newSubMeasure, measurement);\n  \n        setIngredientSubmeasureState({\n            submeasure: newSubMeasure,\n            newMeasurement: newMeasurement\n        }) \n        console.log(newMeasurement, ingredientSubmeasureState);\n    }\n\n    class DisplayMeasurement extends React.Component {\n        DisplayMeasurement = () => {\n            if (ingredientSubmeasureState.newMeasurement) {\n                return (<div>{ingredientSubmeasureState.newMeasurement}</div>);\n            }\n            \n            else if (measurement) {\n                return (<div>{measurement}</div>);\n            }\n\n            else {\n                return (\n                    <form>\n                        <input type=\"text\" placeholder=\"No Amt.\"/>\n                    </form>\n                );\n            }\n        }\n    }\n\n    return(\n        <div>\n            <div>{name}</div>\n            <DisplayMeasurement />\n            <form id='measurementSelect' onChange={handleSubMeasureChange}>\n                        {(measure === 'volume-imperial') && (\n                        <select className=\"imperialVolumeSelect\" defaultValue={ingredientSubmeasureState.submeasure}>\n                            <option value=\"gallons\">G</option>\n                            <option value=\"quarts\">Q</option>\n                            <option value=\"cups\">C</option>\n                            <option value=\"tablespoons\">T</option>\n                            <option value=\"teaspoons\">t</option>\n                            <option value=\"fluid ounces\">fl. oz.</option>\n                        </select>\n                        )}\n                        \n                        {(measure === 'weight-imperial') && (\n                        <select className=\"imperialWeightSelect\" defaultValue={ingredientSubmeasureState.submeasure}>\n                            <option value=\"pounds\">lbs.</option>\n                            <option value=\"ounces\">oz.</option>\n                        </select>\n                        )}\n                        {/* if Metric */}\n                        {(measure === 'volume-metric') && (\n                        <select className=\"metricVolumeSelect\" defaultValue={ingredientSubmeasureState.submeasure}>\n                            <option value=\"liters\">L</option>\n                            <option value=\"deciliters\">dL</option>\n                            <option value=\"milliliters\">mL</option>\n                        </select>\n                        )}\n\n                        {(measure === 'weight-metric') && (\n                        <select className=\"metricWeightSelect\" defaultValue={ingredientSubmeasureState.submeasure}>\n                            <option value=\"kilograms\">kg</option>\n                            <option value=\"grams\">g</option>\n                            <option value=\"milligrams\">mg</option>\n                        </select>\n                        )}\n                    </form>    \n        </div>\n    )\n}\n\nexport default RenderIngredient;"]},"metadata":{},"sourceType":"module"}