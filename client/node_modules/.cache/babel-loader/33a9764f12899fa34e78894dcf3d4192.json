{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/src/components/ToggleMeasure/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { CHANGE_MEASURE_TYPE, CHANGE_MEASURE_SYSTEM, TOGGLE_AUTO_CONVERT } from '../../utils/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToggleMeasure() {\n  _s();\n\n  const [state, dispatch] = useStoreContext(); //Each time form is changed, update GlobalState\n  //Weight or Volume\n\n  function handleTypeChange(event) {\n    const value = event.target.value;\n    dispatch({\n      type: CHANGE_MEASURE_TYPE,\n      measurementType: value\n    });\n  } //Metric or Imperial\n\n\n  function handleSystemChange(event) {\n    const value = event.target.value;\n    dispatch({\n      type: CHANGE_MEASURE_SYSTEM,\n      measurementSystem: value\n    });\n  } //Toggle autoconvert on and off\n\n\n  function handleToggleAutoConvert() {\n    dispatch({\n      type: TOGGLE_AUTO_CONVERT,\n      autoConvert: !state.autoConvert\n    });\n    console.log(state.autoConvert);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleSystemChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"metric\",\n        children: \"M\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"us\",\n        children: \"US\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleTypeChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"weight\",\n        children: \"WEIGHT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"volume\",\n        children: \"VOLUME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"autoConvertToggle\",\n      children: \"autoconvert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"autoConvertToggle\",\n      onChange: handleToggleAutoConvert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ToggleMeasure, \"AaULK2aEGk5riJKW01t0FPXyxro=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = ToggleMeasure;\nexport default ToggleMeasure;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToggleMeasure\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/src/components/ToggleMeasure/index.js"],"names":["React","useState","useStoreContext","CHANGE_MEASURE_TYPE","CHANGE_MEASURE_SYSTEM","TOGGLE_AUTO_CONVERT","ToggleMeasure","state","dispatch","handleTypeChange","event","value","target","type","measurementType","handleSystemChange","measurementSystem","handleToggleAutoConvert","autoConvert","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,mBAAT,EAA8BC,qBAA9B,EAAqDC,mBAArD,QAAgF,qBAAhF;;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AACrB,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBN,eAAe,EAA3C,CADqB,CAGrB;AACA;;AACA,WAASO,gBAAT,CAA0BC,KAA1B,EAAiC;AAC7B,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;AACAH,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEV,mBADD;AAELW,MAAAA,eAAe,EAAEH;AAFZ,KAAD,CAAR;AAIH,GAXoB,CAarB;;;AACA,WAASI,kBAAT,CAA4BL,KAA5B,EAAmC;AAC/B,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;AACAH,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAET,qBADD;AAELY,MAAAA,iBAAiB,EAAEL;AAFd,KAAD,CAAR;AAIH,GApBoB,CAsBrB;;;AACA,WAASM,uBAAT,GAAmC;AAC/BT,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAER,mBADD;AAELa,MAAAA,WAAW,EAAE,CAACX,KAAK,CAACW;AAFf,KAAD,CAAR;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACW,WAAlB;AACH;;AAED,sBACI;AAAA,4BAGI;AAAQ,MAAA,QAAQ,EAAEH,kBAAlB;AAAA,8BACI;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAQI;AAAQ,MAAA,QAAQ,EAAEN,gBAAlB;AAAA,8BACQ;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADR,eAEQ;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFR;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eAYI;AAAO,MAAA,OAAO,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ,eAaI;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,EAAE,EAAC,mBAA1B;AAA8C,MAAA,QAAQ,EAAEQ;AAAxD;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;GAhDQX,a;UACuBJ,e;;;KADvBI,a;AAkDT,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { CHANGE_MEASURE_TYPE, CHANGE_MEASURE_SYSTEM, TOGGLE_AUTO_CONVERT } from '../../utils/actions';\n\nfunction ToggleMeasure() {\n    const [ state, dispatch ] = useStoreContext();\n\n    //Each time form is changed, update GlobalState\n    //Weight or Volume\n    function handleTypeChange(event) {\n        const value = event.target.value;\n        dispatch({\n            type: CHANGE_MEASURE_TYPE,\n            measurementType: value\n        });\n    }\n\n    //Metric or Imperial\n    function handleSystemChange(event) {\n        const value = event.target.value;\n        dispatch({\n            type: CHANGE_MEASURE_SYSTEM,\n            measurementSystem: value\n        }); \n    }\n\n    //Toggle autoconvert on and off\n    function handleToggleAutoConvert() {\n        dispatch({\n            type: TOGGLE_AUTO_CONVERT,\n            autoConvert: !state.autoConvert\n        })\n        console.log(state.autoConvert);\n    }\n\n    return (\n        <form> \n            {/* Measurement Options */}\n            {/* system */}\n            <select onChange={handleSystemChange}>\n                <option value=\"metric\">M</option>\n                <option value=\"us\">US</option>\n            </select>\n            {/* type */}\n            <select onChange={handleTypeChange}>\n                    <option value=\"weight\">WEIGHT</option>\n                    <option value=\"volume\">VOLUME</option>\n            </select>\n            <label htmlFor=\"autoConvertToggle\">autoconvert</label>\n            <input type=\"checkbox\" id=\"autoConvertToggle\" onChange={handleToggleAutoConvert}></input>\n        </form>\n    )\n}\n\nexport default ToggleMeasure;"]},"metadata":{},"sourceType":"module"}