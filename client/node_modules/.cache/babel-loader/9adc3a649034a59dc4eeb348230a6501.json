{"ast":null,"code":"var _jsxFileName = \"/Users/laurenceokite/Documents/projects/recipes/client/src/components/UnitSelect/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UnitSelect = _s(observer(_c = _s(_ref => {\n  _s();\n\n  let {\n    recipe,\n    ingredient\n  } = _ref;\n  //mobx observer needs the whole observed object \n  const {\n    state\n  } = recipe; //if it is an ingredient, pass ingredient data, otherwise use empty ingredient in recipe.data\n\n  const data = ingredient || recipe.data;\n  useEffect(() => {\n    const selectedUnit = data.returnSelected(state).unit;\n    const currentUnits = data.returnCurrentUnits(state);\n  });\n\n  const handleChangeUnit = event => {\n    const {\n      value\n    } = event.target;\n    data.updateSelected(state, value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form.Select, {\n    name: \"unit\",\n    defaultValue: selectedUnit,\n    onChange: handleChangeUnit,\n    children: currentUnits.map(unit => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: unit.unit,\n      children: unit.abbrev\n    }, unit.unit, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c2 = UnitSelect;\nexport default UnitSelect;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UnitSelect$observer\");\n$RefreshReg$(_c2, \"UnitSelect\");","map":{"version":3,"sources":["/Users/laurenceokite/Documents/projects/recipes/client/src/components/UnitSelect/index.tsx"],"names":["observer","React","useEffect","Form","UnitSelect","recipe","ingredient","state","data","selectedUnit","returnSelected","unit","currentUnits","returnCurrentUnits","handleChangeUnit","event","value","target","updateSelected","map","abbrev"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,iBAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,iBAArB;;;AASA,MAAMC,UAAU,MAAGJ,QAAQ,SAAC,QAAyC;AAAA;;AAAA,MAAxC;AAAEK,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAwC;AACjE;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYF,MAAlB,CAFiE,CAIjE;;AACA,QAAMG,IAAI,GAAGF,UAAU,IAAID,MAAM,CAACG,IAAlC;AAEAN,EAAAA,SAAS,CAAC,MAAK;AACX,UAAMO,YAAY,GAAGD,IAAI,CAACE,cAAL,CAAoBH,KAApB,EAA2BI,IAAhD;AACA,UAAMC,YAAY,GAAGJ,IAAI,CAACK,kBAAL,CAAwBN,KAAxB,CAArB;AACH,GAHQ,CAAT;;AAKA,QAAMO,gBAAgB,GAAIC,KAAD,IAAkC;AACvD,UAAM;AAAEC,MAAAA;AAAF,QAAYD,KAAK,CAACE,MAAxB;AAEAT,IAAAA,IAAI,CAACU,cAAL,CAAoBX,KAApB,EAA2BS,KAA3B;AACH,GAJD;;AAMA,sBACI,QAAC,IAAD,CAAM,MAAN;AAAa,IAAA,IAAI,EAAC,MAAlB;AAAyB,IAAA,YAAY,EAAEP,YAAvC;AAAqD,IAAA,QAAQ,EAAEK,gBAA/D;AAAA,cACKF,YAAY,CAACO,GAAb,CAAiBR,IAAI,iBAClB;AAAwB,MAAA,KAAK,EAAEA,IAAI,CAACA,IAApC;AAAA,gBACSA,IAAI,CAACS;AADd,OAAaT,IAAI,CAACA,IAAlB;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CA5B0B,kCAAX,iCAAhB;;MAAMP,U;AA8BN,eAAeA,UAAf","sourcesContent":["import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { Ingredient } from \"../Recipe/Ingredient\";\nimport { Recipe } from '../Recipe/Recipe'\n\ninterface IUnitSelect {\n    recipe: Recipe,\n    ingredient?: Ingredient\n}\n\nconst UnitSelect = observer(({ recipe, ingredient }: IUnitSelect) => {\n    //mobx observer needs the whole observed object \n    const { state } = recipe;\n\n    //if it is an ingredient, pass ingredient data, otherwise use empty ingredient in recipe.data\n    const data = ingredient || recipe.data;\n\n    useEffect(() =>{\n        const selectedUnit = data.returnSelected(state).unit;\n        const currentUnits = data.returnCurrentUnits(state);\n    });\n\n    const handleChangeUnit = (event: React.FormEvent): void => {\n        const { value } = event.target as HTMLFormElement;\n        \n        data.updateSelected(state, value);\n    }\n\n    return (\n        <Form.Select name='unit' defaultValue={selectedUnit} onChange={handleChangeUnit}>\n            {currentUnits.map(unit => (\n                <option key={unit.unit} value={unit.unit}>\n                        {unit.abbrev}\n                </option>\n            ))}\n\n        </Form.Select>\n    );\n});\n\nexport default UnitSelect;"]},"metadata":{},"sourceType":"module"}